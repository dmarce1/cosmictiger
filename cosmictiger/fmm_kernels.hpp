/*
CosmicTiger - A cosmological N-Body code
Copyright (C) 2021  Dominic C. Marcello

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/
#pragma once
#include <cosmictiger/tensor.hpp>
#include <cosmictiger/cuda.hpp>
#include <cosmictiger/ewald_indices.hpp>
#include <cosmictiger/math.hpp>
#include <cosmictiger/treepm_kernels.hpp>
template<class T>
using expansion = tensor_sym<T,6>;
template<class T>
using expansion2 = tensor_sym<T,2>;
template<class T>
using multipole = tensor_sym<T,5>;
#define EXPANSION_SIZE 56
#define MULTIPOLE_SIZE 35


template<class T>
CUDA_EXPORT
inline int greens_function(tensor_sym<T, 6>& D, array<T, NDIM> dx, float rsinv, float rsinv2) {
	D = T(0);
	T r2 = fmaf(dx[0], dx[0], fmaf(dx[1], dx[1], sqr(dx[2])));
	const T r = sqrt(r2);
	const T rinv = 1.f / r;
	const T rinv0 = T(1);
	const T rinv1 = rinv;
	const T rinv2 = rinv1 * rinv1;
	const auto d = green_kernel( r, rsinv, rsinv2 );
	const T Drinvpow_0_0 = d[0] * rinv0;
	const T Drinvpow_1_0 = d[1] * rinv0;
	const T Drinvpow_1_1 = d[1] * rinv1;
	const T Drinvpow_2_0 = d[2] * rinv0;
	const T Drinvpow_2_1 = d[2] * rinv1;
	const T Drinvpow_2_2 = d[2] * rinv2;
	const T Drinvpow_3_0 = d[3] * rinv0;
	const T Drinvpow_3_1 = d[3] * rinv1;
	const T Drinvpow_3_2 = d[3] * rinv2;
	const T Drinvpow_4_0 = d[4] * rinv0;
	const T Drinvpow_4_1 = d[4] * rinv1;
	const T Drinvpow_5_0 = d[5] * rinv0;
	array<T,NDIM> dxrinv;
	dxrinv[0] = dx[0] * rinv;
	dxrinv[1] = dx[1] * rinv;
	dxrinv[2] = dx[2] * rinv;
	T x[56];
	x[0] = T(1);
	x[1] = dxrinv[0];
	x[2] = dxrinv[1];
	x[3] = dxrinv[2];
	x[9] = x[3] * x[3];
	x[8] = x[2] * x[3];
	x[7] = x[2] * x[2];
	x[6] = x[1] * x[3];
	x[5] = x[1] * x[2];
	x[4] = x[1] * x[1];
	x[19] = x[9] * x[3];
	x[18] = x[8] * x[3];
	x[17] = x[8] * x[2];
	x[16] = x[7] * x[2];
	x[15] = x[6] * x[3];
	x[14] = x[5] * x[3];
	x[13] = x[5] * x[2];
	x[12] = x[6] * x[1];
	x[11] = x[5] * x[1];
	x[10] = x[4] * x[1];
	x[34] = x[9] * x[9];
	x[33] = x[8] * x[9];
	x[32] = x[8] * x[8];
	x[31] = x[8] * x[7];
	x[30] = x[7] * x[7];
	x[29] = x[6] * x[9];
	x[28] = x[5] * x[9];
	x[27] = x[5] * x[8];
	x[26] = x[5] * x[7];
	x[25] = x[6] * x[6];
	x[24] = x[5] * x[6];
	x[23] = x[5] * x[5];
	x[22] = x[6] * x[4];
	x[21] = x[5] * x[4];
	x[20] = x[4] * x[4];
	x[55] = x[19] * x[9];
	x[54] = x[18] * x[9];
	x[53] = x[17] * x[9];
	x[52] = x[17] * x[8];
	x[51] = x[17] * x[7];
	x[50] = x[16] * x[7];
	x[49] = x[15] * x[9];
	x[48] = x[14] * x[9];
	x[47] = x[14] * x[8];
	x[46] = x[14] * x[7];
	x[45] = x[13] * x[7];
	x[44] = x[12] * x[9];
	x[43] = x[14] * x[6];
	x[42] = x[14] * x[5];
	x[41] = x[11] * x[7];
	x[40] = x[12] * x[6];
	x[39] = x[14] * x[4];
	x[38] = x[11] * x[5];
	x[37] = x[12] * x[4];
	x[36] = x[11] * x[4];
	x[35] = x[10] * x[4];
	D[0] = fmaf(x[0], Drinvpow_0_0, D[0]);
	D[3] = fmaf(x[3], Drinvpow_1_0, D[3]);
	D[9] = fmaf(x[9], Drinvpow_2_0, D[9]);
	D[9] = fmaf(x[0], Drinvpow_1_1, D[9]);
	D[19] = fmaf(x[19], Drinvpow_3_0, D[19]);
	D[19] = fmaf(T(3.000000000e+00), x[3]*Drinvpow_2_1, D[19]);
	D[34] = fmaf(x[34], Drinvpow_4_0, D[34]);
	D[34] = fmaf(T(6.000000000e+00), x[9]*Drinvpow_3_1, D[34]);
	D[34] = fmaf(T(3.000000000e+00), x[0]*Drinvpow_2_2, D[34]);
	D[55] = fmaf(x[55], Drinvpow_5_0, D[55]);
	D[55] = fmaf(T(1.000000000e+01), x[19]*Drinvpow_4_1, D[55]);
	D[55] = fmaf(T(1.500000000e+01), x[3]*Drinvpow_3_2, D[55]);
	D[2] = fmaf(x[2], Drinvpow_1_0, D[2]);
	D[8] = fmaf(x[8], Drinvpow_2_0, D[8]);
	D[18] = fmaf(x[18], Drinvpow_3_0, D[18]);
	D[18] = fmaf(x[2], Drinvpow_2_1, D[18]);
	D[33] = fmaf(x[33], Drinvpow_4_0, D[33]);
	D[33] = fmaf(T(3.000000000e+00), x[8]*Drinvpow_3_1, D[33]);
	D[54] = fmaf(x[54], Drinvpow_5_0, D[54]);
	D[54] = fmaf(T(6.000000000e+00), x[18]*Drinvpow_4_1, D[54]);
	D[54] = fmaf(T(3.000000000e+00), x[2]*Drinvpow_3_2, D[54]);
	D[7] = fmaf(x[7], Drinvpow_2_0, D[7]);
	D[7] = fmaf(x[0], Drinvpow_1_1, D[7]);
	D[17] = fmaf(x[17], Drinvpow_3_0, D[17]);
	D[17] = fmaf(x[3], Drinvpow_2_1, D[17]);
	D[32] = fmaf(x[32], Drinvpow_4_0, D[32]);
	D[32] = fmaf(x[7], Drinvpow_3_1, D[32]);
	D[32] = fmaf(x[9], Drinvpow_3_1, D[32]);
	D[32] = fmaf(x[0], Drinvpow_2_2, D[32]);
	D[53] = fmaf(x[53], Drinvpow_5_0, D[53]);
	D[53] = fmaf(T(3.000000000e+00), x[17]*Drinvpow_4_1, D[53]);
	D[53] = fmaf(x[19], Drinvpow_4_1, D[53]);
	D[53] = fmaf(T(3.000000000e+00), x[3]*Drinvpow_3_2, D[53]);
	D[16] = fmaf(x[16], Drinvpow_3_0, D[16]);
	D[16] = fmaf(T(3.000000000e+00), x[2]*Drinvpow_2_1, D[16]);
	D[31] = fmaf(x[31], Drinvpow_4_0, D[31]);
	D[31] = fmaf(T(3.000000000e+00), x[8]*Drinvpow_3_1, D[31]);
	D[52] = fmaf(x[52], Drinvpow_5_0, D[52]);
	D[52] = fmaf(x[16], Drinvpow_4_1, D[52]);
	D[52] = fmaf(T(3.000000000e+00), x[18]*Drinvpow_4_1, D[52]);
	D[52] = fmaf(T(3.000000000e+00), x[2]*Drinvpow_3_2, D[52]);
	D[30] = fmaf(x[30], Drinvpow_4_0, D[30]);
	D[30] = fmaf(T(6.000000000e+00), x[7]*Drinvpow_3_1, D[30]);
	D[30] = fmaf(T(3.000000000e+00), x[0]*Drinvpow_2_2, D[30]);
	D[51] = fmaf(x[51], Drinvpow_5_0, D[51]);
	D[51] = fmaf(T(6.000000000e+00), x[17]*Drinvpow_4_1, D[51]);
	D[51] = fmaf(T(3.000000000e+00), x[3]*Drinvpow_3_2, D[51]);
	D[50] = fmaf(x[50], Drinvpow_5_0, D[50]);
	D[50] = fmaf(T(1.000000000e+01), x[16]*Drinvpow_4_1, D[50]);
	D[50] = fmaf(T(1.500000000e+01), x[2]*Drinvpow_3_2, D[50]);
	D[1] = fmaf(x[1], Drinvpow_1_0, D[1]);
	D[6] = fmaf(x[6], Drinvpow_2_0, D[6]);
	D[15] = fmaf(x[15], Drinvpow_3_0, D[15]);
	D[15] = fmaf(x[1], Drinvpow_2_1, D[15]);
	D[29] = fmaf(x[29], Drinvpow_4_0, D[29]);
	D[29] = fmaf(T(3.000000000e+00), x[6]*Drinvpow_3_1, D[29]);
	D[49] = fmaf(x[49], Drinvpow_5_0, D[49]);
	D[49] = fmaf(T(6.000000000e+00), x[15]*Drinvpow_4_1, D[49]);
	D[49] = fmaf(T(3.000000000e+00), x[1]*Drinvpow_3_2, D[49]);
	D[5] = fmaf(x[5], Drinvpow_2_0, D[5]);
	D[14] = fmaf(x[14], Drinvpow_3_0, D[14]);
	D[28] = fmaf(x[28], Drinvpow_4_0, D[28]);
	D[28] = fmaf(x[5], Drinvpow_3_1, D[28]);
	D[48] = fmaf(x[48], Drinvpow_5_0, D[48]);
	D[48] = fmaf(T(3.000000000e+00), x[14]*Drinvpow_4_1, D[48]);
	D[13] = fmaf(x[13], Drinvpow_3_0, D[13]);
	D[13] = fmaf(x[1], Drinvpow_2_1, D[13]);
	D[27] = fmaf(x[27], Drinvpow_4_0, D[27]);
	D[27] = fmaf(x[6], Drinvpow_3_1, D[27]);
	D[47] = fmaf(x[47], Drinvpow_5_0, D[47]);
	D[47] = fmaf(x[13], Drinvpow_4_1, D[47]);
	D[47] = fmaf(x[15], Drinvpow_4_1, D[47]);
	D[47] = fmaf(x[1], Drinvpow_3_2, D[47]);
	D[26] = fmaf(x[26], Drinvpow_4_0, D[26]);
	D[26] = fmaf(T(3.000000000e+00), x[5]*Drinvpow_3_1, D[26]);
	D[46] = fmaf(x[46], Drinvpow_5_0, D[46]);
	D[46] = fmaf(T(3.000000000e+00), x[14]*Drinvpow_4_1, D[46]);
	D[45] = fmaf(x[45], Drinvpow_5_0, D[45]);
	D[45] = fmaf(T(6.000000000e+00), x[13]*Drinvpow_4_1, D[45]);
	D[45] = fmaf(T(3.000000000e+00), x[1]*Drinvpow_3_2, D[45]);
	D[4] = fmaf(x[4], Drinvpow_2_0, D[4]);
	D[4] = fmaf(x[0], Drinvpow_1_1, D[4]);
	D[12] = fmaf(x[12], Drinvpow_3_0, D[12]);
	D[12] = fmaf(x[3], Drinvpow_2_1, D[12]);
	D[25] = fmaf(x[25], Drinvpow_4_0, D[25]);
	D[25] = fmaf(x[4], Drinvpow_3_1, D[25]);
	D[25] = fmaf(x[9], Drinvpow_3_1, D[25]);
	D[25] = fmaf(x[0], Drinvpow_2_2, D[25]);
	D[44] = fmaf(x[44], Drinvpow_5_0, D[44]);
	D[44] = fmaf(T(3.000000000e+00), x[12]*Drinvpow_4_1, D[44]);
	D[44] = fmaf(x[19], Drinvpow_4_1, D[44]);
	D[44] = fmaf(T(3.000000000e+00), x[3]*Drinvpow_3_2, D[44]);
	D[11] = fmaf(x[11], Drinvpow_3_0, D[11]);
	D[11] = fmaf(x[2], Drinvpow_2_1, D[11]);
	D[24] = fmaf(x[24], Drinvpow_4_0, D[24]);
	D[24] = fmaf(x[8], Drinvpow_3_1, D[24]);
	D[43] = fmaf(x[43], Drinvpow_5_0, D[43]);
	D[43] = fmaf(x[11], Drinvpow_4_1, D[43]);
	D[43] = fmaf(x[18], Drinvpow_4_1, D[43]);
	D[43] = fmaf(x[2], Drinvpow_3_2, D[43]);
	D[23] = fmaf(x[23], Drinvpow_4_0, D[23]);
	D[23] = fmaf(x[4], Drinvpow_3_1, D[23]);
	D[23] = fmaf(x[7], Drinvpow_3_1, D[23]);
	D[23] = fmaf(x[0], Drinvpow_2_2, D[23]);
	D[42] = fmaf(x[42], Drinvpow_5_0, D[42]);
	D[42] = fmaf(x[12], Drinvpow_4_1, D[42]);
	D[42] = fmaf(x[17], Drinvpow_4_1, D[42]);
	D[42] = fmaf(x[3], Drinvpow_3_2, D[42]);
	D[41] = fmaf(x[41], Drinvpow_5_0, D[41]);
	D[41] = fmaf(T(3.000000000e+00), x[11]*Drinvpow_4_1, D[41]);
	D[41] = fmaf(x[16], Drinvpow_4_1, D[41]);
	D[41] = fmaf(T(3.000000000e+00), x[2]*Drinvpow_3_2, D[41]);
	D[10] = fmaf(x[10], Drinvpow_3_0, D[10]);
	D[10] = fmaf(T(3.000000000e+00), x[1]*Drinvpow_2_1, D[10]);
	D[22] = fmaf(x[22], Drinvpow_4_0, D[22]);
	D[22] = fmaf(T(3.000000000e+00), x[6]*Drinvpow_3_1, D[22]);
	D[40] = fmaf(x[40], Drinvpow_5_0, D[40]);
	D[40] = fmaf(x[10], Drinvpow_4_1, D[40]);
	D[40] = fmaf(T(3.000000000e+00), x[15]*Drinvpow_4_1, D[40]);
	D[40] = fmaf(T(3.000000000e+00), x[1]*Drinvpow_3_2, D[40]);
	D[21] = fmaf(x[21], Drinvpow_4_0, D[21]);
	D[21] = fmaf(T(3.000000000e+00), x[5]*Drinvpow_3_1, D[21]);
	D[39] = fmaf(x[39], Drinvpow_5_0, D[39]);
	D[39] = fmaf(T(3.000000000e+00), x[14]*Drinvpow_4_1, D[39]);
	D[38] = fmaf(x[38], Drinvpow_5_0, D[38]);
	D[38] = fmaf(x[10], Drinvpow_4_1, D[38]);
	D[38] = fmaf(T(3.000000000e+00), x[13]*Drinvpow_4_1, D[38]);
	D[38] = fmaf(T(3.000000000e+00), x[1]*Drinvpow_3_2, D[38]);
	D[20] = fmaf(x[20], Drinvpow_4_0, D[20]);
	D[20] = fmaf(T(6.000000000e+00), x[4]*Drinvpow_3_1, D[20]);
	D[20] = fmaf(T(3.000000000e+00), x[0]*Drinvpow_2_2, D[20]);
	D[37] = fmaf(x[37], Drinvpow_5_0, D[37]);
	D[37] = fmaf(T(6.000000000e+00), x[12]*Drinvpow_4_1, D[37]);
	D[37] = fmaf(T(3.000000000e+00), x[3]*Drinvpow_3_2, D[37]);
	D[36] = fmaf(x[36], Drinvpow_5_0, D[36]);
	D[36] = fmaf(T(6.000000000e+00), x[11]*Drinvpow_4_1, D[36]);
	D[36] = fmaf(T(3.000000000e+00), x[2]*Drinvpow_3_2, D[36]);
	D[35] = fmaf(x[35], Drinvpow_5_0, D[35]);
	D[35] = fmaf(T(1.000000000e+01), x[10]*Drinvpow_4_1, D[35]);
	D[35] = fmaf(T(1.500000000e+01), x[1]*Drinvpow_3_2, D[35]);
	return 0; 
}


template<class T>
CUDA_EXPORT
inline int M2L(tensor_sym<T, 2>& L, const tensor_sym<T, 5>& M, const tensor_sym<T, 6>& D, bool do_phi) {
	if( do_phi ) {
		L[0] *= T(2.400000000e+01);
		L[0] = fmaf(M[20], D[20], L[0]);
		L[0] = fmaf(M[34], D[34], L[0]);
		L[0] = fmaf(M[30], D[30], L[0]);
		L[0] *= T(2.500000000e-01);
		L[0] = fmaf(M[21], D[21], L[0]);
		L[0] = fmaf(M[19], D[19], L[0]);
		L[0] = fmaf(M[22], D[22], L[0]);
		L[0] = fmaf(M[10], D[10], L[0]);
		L[0] = fmaf(M[26], D[26], L[0]);
		L[0] = fmaf(M[33], D[33], L[0]);
		L[0] = fmaf(M[29], D[29], L[0]);
		L[0] = fmaf(M[16], D[16], L[0]);
		L[0] = fmaf(M[31], D[31], L[0]);
		L[0] *= T(6.666666667e-01);
		L[0] = fmaf(M[32], D[32], L[0]);
		L[0] = fmaf(M[25], D[25], L[0]);
		L[0] = fmaf(M[23], D[23], L[0]);
		L[0] *= T(5.000000000e-01);
		L[0] = fmaf(M[15], D[15], L[0]);
		L[0] = fmaf(M[11], D[11], L[0]);
		L[0] = fmaf(M[12], D[12], L[0]);
		L[0] = fmaf(M[4], D[4], L[0]);
		L[0] = fmaf(M[24], D[24], L[0]);
		L[0] = fmaf(M[27], D[27], L[0]);
		L[0] = fmaf(M[13], D[13], L[0]);
		L[0] = fmaf(M[28], D[28], L[0]);
		L[0] = fmaf(M[17], D[17], L[0]);
		L[0] = fmaf(M[7], D[7], L[0]);
		L[0] = fmaf(M[18], D[18], L[0]);
		L[0] = fmaf(M[9], D[9], L[0]);
		L[0] *= T(5.000000000e-01);
		L[0] = fmaf(M[14], D[14], L[0]);
		L[0] = fmaf(M[5], D[5], L[0]);
		L[0] = fmaf(M[0], D[0], L[0]);
		L[0] = fmaf(M[6], D[6], L[0]);
		L[0] = fmaf(M[1], D[1], L[0]);
		L[0] = fmaf(M[8], D[8], L[0]);
		L[0] = fmaf(M[2], D[2], L[0]);
		L[0] = fmaf(M[3], D[3], L[0]);
	}
	L[1] *= T(2.400000000e+01);
	L[2] *= T(2.400000000e+01);
	L[1] = fmaf(M[20], D[35], L[1]);
	L[2] = fmaf(M[20], D[36], L[2]);
	L[1] = fmaf(M[34], D[49], L[1]);
	L[2] = fmaf(M[34], D[54], L[2]);
	L[1] = fmaf(M[30], D[45], L[1]);
	L[2] = fmaf(M[30], D[50], L[2]);
	L[1] *= T(2.500000000e-01);
	L[2] *= T(2.500000000e-01);
	L[1] = fmaf(M[21], D[36], L[1]);
	L[2] = fmaf(M[21], D[38], L[2]);
	L[1] = fmaf(M[19], D[29], L[1]);
	L[2] = fmaf(M[19], D[33], L[2]);
	L[1] = fmaf(M[22], D[37], L[1]);
	L[2] = fmaf(M[22], D[39], L[2]);
	L[1] = fmaf(M[10], D[20], L[1]);
	L[2] = fmaf(M[10], D[21], L[2]);
	L[1] = fmaf(M[26], D[41], L[1]);
	L[2] = fmaf(M[26], D[45], L[2]);
	L[1] = fmaf(M[33], D[48], L[1]);
	L[2] = fmaf(M[33], D[53], L[2]);
	L[1] = fmaf(M[29], D[44], L[1]);
	L[2] = fmaf(M[29], D[48], L[2]);
	L[1] = fmaf(M[16], D[26], L[1]);
	L[2] = fmaf(M[16], D[30], L[2]);
	L[1] = fmaf(M[31], D[46], L[1]);
	L[2] = fmaf(M[31], D[51], L[2]);
	L[1] *= T(6.666666667e-01);
	L[2] *= T(6.666666667e-01);
	L[1] = fmaf(M[32], D[47], L[1]);
	L[2] = fmaf(M[32], D[52], L[2]);
	L[1] = fmaf(M[25], D[40], L[1]);
	L[2] = fmaf(M[25], D[43], L[2]);
	L[1] = fmaf(M[23], D[38], L[1]);
	L[2] = fmaf(M[23], D[41], L[2]);
	L[1] *= T(5.000000000e-01);
	L[2] *= T(5.000000000e-01);
	L[1] = fmaf(M[15], D[25], L[1]);
	L[2] = fmaf(M[15], D[28], L[2]);
	L[1] = fmaf(M[11], D[21], L[1]);
	L[2] = fmaf(M[11], D[23], L[2]);
	L[1] = fmaf(M[12], D[22], L[1]);
	L[2] = fmaf(M[12], D[24], L[2]);
	L[1] = fmaf(M[4], D[10], L[1]);
	L[2] = fmaf(M[4], D[11], L[2]);
	L[1] = fmaf(M[24], D[39], L[1]);
	L[2] = fmaf(M[24], D[42], L[2]);
	L[1] = fmaf(M[27], D[42], L[1]);
	L[2] = fmaf(M[27], D[46], L[2]);
	L[1] = fmaf(M[13], D[23], L[1]);
	L[2] = fmaf(M[13], D[26], L[2]);
	L[1] = fmaf(M[28], D[43], L[1]);
	L[2] = fmaf(M[28], D[47], L[2]);
	L[1] = fmaf(M[17], D[27], L[1]);
	L[2] = fmaf(M[17], D[31], L[2]);
	L[1] = fmaf(M[7], D[13], L[1]);
	L[2] = fmaf(M[7], D[16], L[2]);
	L[1] = fmaf(M[18], D[28], L[1]);
	L[2] = fmaf(M[18], D[32], L[2]);
	L[1] = fmaf(M[9], D[15], L[1]);
	L[2] = fmaf(M[9], D[18], L[2]);
	L[1] *= T(5.000000000e-01);
	L[2] *= T(5.000000000e-01);
	L[1] = fmaf(M[14], D[24], L[1]);
	L[2] = fmaf(M[14], D[27], L[2]);
	L[1] = fmaf(M[5], D[11], L[1]);
	L[2] = fmaf(M[5], D[13], L[2]);
	L[1] = fmaf(M[0], D[1], L[1]);
	L[2] = fmaf(M[0], D[2], L[2]);
	L[1] = fmaf(M[6], D[12], L[1]);
	L[2] = fmaf(M[6], D[14], L[2]);
	L[1] = fmaf(M[1], D[4], L[1]);
	L[2] = fmaf(M[1], D[5], L[2]);
	L[1] = fmaf(M[8], D[14], L[1]);
	L[2] = fmaf(M[8], D[17], L[2]);
	L[1] = fmaf(M[2], D[5], L[1]);
	L[2] = fmaf(M[2], D[7], L[2]);
	L[1] = fmaf(M[3], D[6], L[1]);
	L[2] = fmaf(M[3], D[8], L[2]);
	L[3] *= T(2.400000000e+01);
	L[3] = fmaf(M[20], D[37], L[3]);
	L[3] = fmaf(M[34], D[55], L[3]);
	L[3] = fmaf(M[30], D[51], L[3]);
	L[3] *= T(2.500000000e-01);
	L[3] = fmaf(M[21], D[39], L[3]);
	L[3] = fmaf(M[19], D[34], L[3]);
	L[3] = fmaf(M[22], D[40], L[3]);
	L[3] = fmaf(M[10], D[22], L[3]);
	L[3] = fmaf(M[26], D[46], L[3]);
	L[3] = fmaf(M[33], D[54], L[3]);
	L[3] = fmaf(M[29], D[49], L[3]);
	L[3] = fmaf(M[16], D[31], L[3]);
	L[3] = fmaf(M[31], D[52], L[3]);
	L[3] *= T(6.666666667e-01);
	L[3] = fmaf(M[32], D[53], L[3]);
	L[3] = fmaf(M[25], D[44], L[3]);
	L[3] = fmaf(M[23], D[42], L[3]);
	L[3] *= T(5.000000000e-01);
	L[3] = fmaf(M[15], D[29], L[3]);
	L[3] = fmaf(M[11], D[24], L[3]);
	L[3] = fmaf(M[12], D[25], L[3]);
	L[3] = fmaf(M[4], D[12], L[3]);
	L[3] = fmaf(M[24], D[43], L[3]);
	L[3] = fmaf(M[27], D[47], L[3]);
	L[3] = fmaf(M[13], D[27], L[3]);
	L[3] = fmaf(M[28], D[48], L[3]);
	L[3] = fmaf(M[17], D[32], L[3]);
	L[3] = fmaf(M[7], D[17], L[3]);
	L[3] = fmaf(M[18], D[33], L[3]);
	L[3] = fmaf(M[9], D[19], L[3]);
	L[3] *= T(5.000000000e-01);
	L[3] = fmaf(M[14], D[28], L[3]);
	L[3] = fmaf(M[5], D[14], L[3]);
	L[3] = fmaf(M[0], D[3], L[3]);
	L[3] = fmaf(M[6], D[15], L[3]);
	L[3] = fmaf(M[1], D[6], L[3]);
	L[3] = fmaf(M[8], D[18], L[3]);
	L[3] = fmaf(M[2], D[8], L[3]);
	L[3] = fmaf(M[3], D[9], L[3]);
	return 225 + do_phi * 75;
}


template<class T>
CUDA_EXPORT
inline int M2L(tensor_sym<T, 6>& L, const tensor_sym<T, 5>& M, const tensor_sym<T, 6>& D, bool do_phi) {
	if( do_phi ) {
		L[0] *= T(2.400000000e+01);
		L[0] = fmaf(M[20], D[20], L[0]);
		L[0] = fmaf(M[34], D[34], L[0]);
		L[0] = fmaf(M[30], D[30], L[0]);
		L[0] *= T(2.500000000e-01);
		L[0] = fmaf(M[21], D[21], L[0]);
		L[0] = fmaf(M[19], D[19], L[0]);
		L[0] = fmaf(M[22], D[22], L[0]);
		L[0] = fmaf(M[10], D[10], L[0]);
		L[0] = fmaf(M[26], D[26], L[0]);
		L[0] = fmaf(M[33], D[33], L[0]);
		L[0] = fmaf(M[29], D[29], L[0]);
		L[0] = fmaf(M[16], D[16], L[0]);
		L[0] = fmaf(M[31], D[31], L[0]);
		L[0] *= T(6.666666667e-01);
		L[0] = fmaf(M[32], D[32], L[0]);
		L[0] = fmaf(M[25], D[25], L[0]);
		L[0] = fmaf(M[23], D[23], L[0]);
		L[0] *= T(5.000000000e-01);
		L[0] = fmaf(M[15], D[15], L[0]);
		L[0] = fmaf(M[11], D[11], L[0]);
		L[0] = fmaf(M[12], D[12], L[0]);
		L[0] = fmaf(M[4], D[4], L[0]);
		L[0] = fmaf(M[24], D[24], L[0]);
		L[0] = fmaf(M[27], D[27], L[0]);
		L[0] = fmaf(M[13], D[13], L[0]);
		L[0] = fmaf(M[28], D[28], L[0]);
		L[0] = fmaf(M[17], D[17], L[0]);
		L[0] = fmaf(M[7], D[7], L[0]);
		L[0] = fmaf(M[18], D[18], L[0]);
		L[0] = fmaf(M[9], D[9], L[0]);
		L[0] *= T(5.000000000e-01);
		L[0] = fmaf(M[14], D[14], L[0]);
		L[0] = fmaf(M[5], D[5], L[0]);
		L[0] = fmaf(M[0], D[0], L[0]);
		L[0] = fmaf(M[6], D[6], L[0]);
		L[0] = fmaf(M[1], D[1], L[0]);
		L[0] = fmaf(M[8], D[8], L[0]);
		L[0] = fmaf(M[2], D[2], L[0]);
		L[0] = fmaf(M[3], D[3], L[0]);
	}
	L[1] *= T(2.400000000e+01);
	L[8] *= T(6.000000000e+00);
	L[1] = fmaf(M[20], D[35], L[1]);
	L[8] = fmaf(M[10], D[39], L[8]);
	L[1] = fmaf(M[34], D[49], L[1]);
	L[8] = fmaf(M[19], D[54], L[8]);
	L[1] = fmaf(M[30], D[45], L[1]);
	L[8] = fmaf(M[16], D[51], L[8]);
	L[1] *= T(2.500000000e-01);
	L[8] *= T(3.333333333e-01);
	L[1] = fmaf(M[21], D[36], L[1]);
	L[8] = fmaf(M[9], D[33], L[8]);
	L[1] = fmaf(M[19], D[29], L[1]);
	L[8] = fmaf(M[11], D[42], L[8]);
	L[1] = fmaf(M[22], D[37], L[1]);
	L[8] = fmaf(M[12], D[43], L[8]);
	L[1] = fmaf(M[10], D[20], L[1]);
	L[8] = fmaf(M[18], D[53], L[8]);
	L[1] = fmaf(M[26], D[41], L[1]);
	L[8] = fmaf(M[7], D[31], L[8]);
	L[1] = fmaf(M[33], D[48], L[1]);
	L[8] = fmaf(M[17], D[52], L[8]);
	L[1] = fmaf(M[29], D[44], L[1]);
	L[8] = fmaf(M[4], D[24], L[8]);
	L[1] = fmaf(M[16], D[26], L[1]);
	L[8] = fmaf(M[13], D[46], L[8]);
	L[1] = fmaf(M[31], D[46], L[1]);
	L[8] = fmaf(M[15], D[48], L[8]);
	L[1] *= T(6.666666667e-01);
	L[8] *= T(5.000000000e-01);
	L[1] = fmaf(M[32], D[47], L[1]);
	L[8] = fmaf(M[1], D[14], L[8]);
	L[1] = fmaf(M[25], D[40], L[1]);
	L[8] = fmaf(M[14], D[47], L[8]);
	L[1] = fmaf(M[23], D[38], L[1]);
	L[8] = fmaf(M[5], D[27], L[8]);
	L[1] *= T(5.000000000e-01);
	L[8] = fmaf(M[6], D[28], L[8]);
	L[1] = fmaf(M[15], D[25], L[1]);
	L[8] = fmaf(M[0], D[8], L[8]);
	L[1] = fmaf(M[11], D[21], L[1]);
	L[8] = fmaf(M[8], D[32], L[8]);
	L[1] = fmaf(M[12], D[22], L[1]);
	L[8] = fmaf(M[2], D[17], L[8]);
	L[1] = fmaf(M[4], D[10], L[1]);
	L[8] = fmaf(M[3], D[18], L[8]);
	L[1] = fmaf(M[24], D[39], L[1]);
	L[9] *= T(6.000000000e+00);
	L[1] = fmaf(M[27], D[42], L[1]);
	L[9] = fmaf(M[10], D[40], L[9]);
	L[1] = fmaf(M[13], D[23], L[1]);
	L[9] = fmaf(M[19], D[55], L[9]);
	L[1] = fmaf(M[28], D[43], L[1]);
	L[9] = fmaf(M[16], D[52], L[9]);
	L[1] = fmaf(M[17], D[27], L[1]);
	L[9] *= T(3.333333333e-01);
	L[1] = fmaf(M[7], D[13], L[1]);
	L[9] = fmaf(M[9], D[34], L[9]);
	L[1] = fmaf(M[18], D[28], L[1]);
	L[9] = fmaf(M[11], D[43], L[9]);
	L[1] = fmaf(M[9], D[15], L[1]);
	L[9] = fmaf(M[12], D[44], L[9]);
	L[1] *= T(5.000000000e-01);
	L[9] = fmaf(M[18], D[54], L[9]);
	L[1] = fmaf(M[14], D[24], L[1]);
	L[9] = fmaf(M[7], D[32], L[9]);
	L[1] = fmaf(M[5], D[11], L[1]);
	L[9] = fmaf(M[17], D[53], L[9]);
	L[1] = fmaf(M[0], D[1], L[1]);
	L[9] = fmaf(M[4], D[25], L[9]);
	L[1] = fmaf(M[6], D[12], L[1]);
	L[9] = fmaf(M[13], D[47], L[9]);
	L[1] = fmaf(M[1], D[4], L[1]);
	L[9] = fmaf(M[15], D[49], L[9]);
	L[1] = fmaf(M[8], D[14], L[1]);
	L[9] *= T(5.000000000e-01);
	L[1] = fmaf(M[2], D[5], L[1]);
	L[9] = fmaf(M[1], D[15], L[9]);
	L[1] = fmaf(M[3], D[6], L[1]);
	L[9] = fmaf(M[14], D[48], L[9]);
	L[2] *= T(2.400000000e+01);
	L[9] = fmaf(M[5], D[28], L[9]);
	L[2] = fmaf(M[20], D[36], L[2]);
	L[9] = fmaf(M[6], D[29], L[9]);
	L[2] = fmaf(M[34], D[54], L[2]);
	L[9] = fmaf(M[0], D[9], L[9]);
	L[2] = fmaf(M[30], D[50], L[2]);
	L[9] = fmaf(M[8], D[33], L[9]);
	L[2] *= T(2.500000000e-01);
	L[9] = fmaf(M[2], D[18], L[9]);
	L[2] = fmaf(M[21], D[38], L[2]);
	L[9] = fmaf(M[3], D[19], L[9]);
	L[2] = fmaf(M[19], D[33], L[2]);
	L[10] *= T(2.000000000e+00);
	L[2] = fmaf(M[22], D[39], L[2]);
	L[10] = fmaf(M[9], D[40], L[10]);
	L[2] = fmaf(M[10], D[21], L[2]);
	L[10] = fmaf(M[7], D[38], L[10]);
	L[2] = fmaf(M[26], D[45], L[2]);
	L[10] = fmaf(M[4], D[35], L[10]);
	L[2] = fmaf(M[33], D[53], L[2]);
	L[10] *= T(5.000000000e-01);
	L[2] = fmaf(M[29], D[48], L[2]);
	L[10] = fmaf(M[0], D[10], L[10]);
	L[2] = fmaf(M[16], D[30], L[2]);
	L[10] = fmaf(M[3], D[22], L[10]);
	L[2] = fmaf(M[31], D[51], L[2]);
	L[10] = fmaf(M[2], D[21], L[10]);
	L[2] *= T(6.666666667e-01);
	L[10] = fmaf(M[8], D[39], L[10]);
	L[2] = fmaf(M[32], D[52], L[2]);
	L[10] = fmaf(M[1], D[20], L[10]);
	L[2] = fmaf(M[25], D[43], L[2]);
	L[10] = fmaf(M[6], D[37], L[10]);
	L[2] = fmaf(M[23], D[41], L[2]);
	L[10] = fmaf(M[5], D[36], L[10]);
	L[2] *= T(5.000000000e-01);
	L[11] *= T(2.000000000e+00);
	L[2] = fmaf(M[15], D[28], L[2]);
	L[11] = fmaf(M[9], D[43], L[11]);
	L[2] = fmaf(M[11], D[23], L[2]);
	L[11] = fmaf(M[7], D[41], L[11]);
	L[2] = fmaf(M[12], D[24], L[2]);
	L[11] = fmaf(M[4], D[36], L[11]);
	L[2] = fmaf(M[4], D[11], L[2]);
	L[11] *= T(5.000000000e-01);
	L[2] = fmaf(M[24], D[42], L[2]);
	L[11] = fmaf(M[0], D[11], L[11]);
	L[2] = fmaf(M[27], D[46], L[2]);
	L[11] = fmaf(M[3], D[24], L[11]);
	L[2] = fmaf(M[13], D[26], L[2]);
	L[11] = fmaf(M[2], D[23], L[11]);
	L[2] = fmaf(M[28], D[47], L[2]);
	L[11] = fmaf(M[8], D[42], L[11]);
	L[2] = fmaf(M[17], D[31], L[2]);
	L[11] = fmaf(M[1], D[21], L[11]);
	L[2] = fmaf(M[7], D[16], L[2]);
	L[11] = fmaf(M[6], D[39], L[11]);
	L[2] = fmaf(M[18], D[32], L[2]);
	L[11] = fmaf(M[5], D[38], L[11]);
	L[2] = fmaf(M[9], D[18], L[2]);
	L[12] *= T(2.000000000e+00);
	L[2] *= T(5.000000000e-01);
	L[12] = fmaf(M[9], D[44], L[12]);
	L[2] = fmaf(M[14], D[27], L[2]);
	L[12] = fmaf(M[7], D[42], L[12]);
	L[2] = fmaf(M[5], D[13], L[2]);
	L[12] = fmaf(M[4], D[37], L[12]);
	L[2] = fmaf(M[0], D[2], L[2]);
	L[12] *= T(5.000000000e-01);
	L[2] = fmaf(M[6], D[14], L[2]);
	L[12] = fmaf(M[0], D[12], L[12]);
	L[2] = fmaf(M[1], D[5], L[2]);
	L[12] = fmaf(M[3], D[25], L[12]);
	L[2] = fmaf(M[8], D[17], L[2]);
	L[12] = fmaf(M[2], D[24], L[12]);
	L[2] = fmaf(M[2], D[7], L[2]);
	L[12] = fmaf(M[8], D[43], L[12]);
	L[2] = fmaf(M[3], D[8], L[2]);
	L[12] = fmaf(M[1], D[22], L[12]);
	L[3] *= T(2.400000000e+01);
	L[12] = fmaf(M[6], D[40], L[12]);
	L[3] = fmaf(M[20], D[37], L[3]);
	L[12] = fmaf(M[5], D[39], L[12]);
	L[3] = fmaf(M[34], D[55], L[3]);
	L[13] *= T(2.000000000e+00);
	L[3] = fmaf(M[30], D[51], L[3]);
	L[13] = fmaf(M[9], D[47], L[13]);
	L[3] *= T(2.500000000e-01);
	L[13] = fmaf(M[7], D[45], L[13]);
	L[3] = fmaf(M[21], D[39], L[3]);
	L[13] = fmaf(M[4], D[38], L[13]);
	L[3] = fmaf(M[19], D[34], L[3]);
	L[13] *= T(5.000000000e-01);
	L[3] = fmaf(M[22], D[40], L[3]);
	L[13] = fmaf(M[0], D[13], L[13]);
	L[3] = fmaf(M[10], D[22], L[3]);
	L[13] = fmaf(M[3], D[27], L[13]);
	L[3] = fmaf(M[26], D[46], L[3]);
	L[13] = fmaf(M[2], D[26], L[13]);
	L[3] = fmaf(M[33], D[54], L[3]);
	L[13] = fmaf(M[8], D[46], L[13]);
	L[3] = fmaf(M[29], D[49], L[3]);
	L[13] = fmaf(M[1], D[23], L[13]);
	L[3] = fmaf(M[16], D[31], L[3]);
	L[13] = fmaf(M[6], D[42], L[13]);
	L[3] = fmaf(M[31], D[52], L[3]);
	L[13] = fmaf(M[5], D[41], L[13]);
	L[3] *= T(6.666666667e-01);
	L[14] *= T(2.000000000e+00);
	L[3] = fmaf(M[32], D[53], L[3]);
	L[14] = fmaf(M[9], D[48], L[14]);
	L[3] = fmaf(M[25], D[44], L[3]);
	L[14] = fmaf(M[7], D[46], L[14]);
	L[3] = fmaf(M[23], D[42], L[3]);
	L[14] = fmaf(M[4], D[39], L[14]);
	L[3] *= T(5.000000000e-01);
	L[14] *= T(5.000000000e-01);
	L[3] = fmaf(M[15], D[29], L[3]);
	L[14] = fmaf(M[0], D[14], L[14]);
	L[3] = fmaf(M[11], D[24], L[3]);
	L[14] = fmaf(M[3], D[28], L[14]);
	L[3] = fmaf(M[12], D[25], L[3]);
	L[14] = fmaf(M[2], D[27], L[14]);
	L[3] = fmaf(M[4], D[12], L[3]);
	L[14] = fmaf(M[8], D[47], L[14]);
	L[3] = fmaf(M[24], D[43], L[3]);
	L[14] = fmaf(M[1], D[24], L[14]);
	L[3] = fmaf(M[27], D[47], L[3]);
	L[14] = fmaf(M[6], D[43], L[14]);
	L[3] = fmaf(M[13], D[27], L[3]);
	L[14] = fmaf(M[5], D[42], L[14]);
	L[3] = fmaf(M[28], D[48], L[3]);
	L[15] *= T(2.000000000e+00);
	L[3] = fmaf(M[17], D[32], L[3]);
	L[15] = fmaf(M[9], D[49], L[15]);
	L[3] = fmaf(M[7], D[17], L[3]);
	L[15] = fmaf(M[7], D[47], L[15]);
	L[3] = fmaf(M[18], D[33], L[3]);
	L[15] = fmaf(M[4], D[40], L[15]);
	L[3] = fmaf(M[9], D[19], L[3]);
	L[15] *= T(5.000000000e-01);
	L[3] *= T(5.000000000e-01);
	L[15] = fmaf(M[0], D[15], L[15]);
	L[3] = fmaf(M[14], D[28], L[3]);
	L[15] = fmaf(M[3], D[29], L[15]);
	L[3] = fmaf(M[5], D[14], L[3]);
	L[15] = fmaf(M[2], D[28], L[15]);
	L[3] = fmaf(M[0], D[3], L[3]);
	L[15] = fmaf(M[8], D[48], L[15]);
	L[3] = fmaf(M[6], D[15], L[3]);
	L[15] = fmaf(M[1], D[25], L[15]);
	L[3] = fmaf(M[1], D[6], L[3]);
	L[15] = fmaf(M[6], D[44], L[15]);
	L[3] = fmaf(M[8], D[18], L[3]);
	L[15] = fmaf(M[5], D[43], L[15]);
	L[3] = fmaf(M[2], D[8], L[3]);
	L[16] *= T(2.000000000e+00);
	L[3] = fmaf(M[3], D[9], L[3]);
	L[16] = fmaf(M[9], D[52], L[16]);
	L[4] *= T(6.000000000e+00);
	L[16] = fmaf(M[7], D[50], L[16]);
	L[4] = fmaf(M[10], D[35], L[4]);
	L[16] = fmaf(M[4], D[41], L[16]);
	L[4] = fmaf(M[19], D[44], L[4]);
	L[16] *= T(5.000000000e-01);
	L[4] = fmaf(M[16], D[41], L[4]);
	L[16] = fmaf(M[0], D[16], L[16]);
	L[4] *= T(3.333333333e-01);
	L[16] = fmaf(M[3], D[31], L[16]);
	L[4] = fmaf(M[9], D[25], L[4]);
	L[16] = fmaf(M[2], D[30], L[16]);
	L[4] = fmaf(M[11], D[36], L[4]);
	L[16] = fmaf(M[8], D[51], L[16]);
	L[4] = fmaf(M[12], D[37], L[4]);
	L[16] = fmaf(M[1], D[26], L[16]);
	L[4] = fmaf(M[18], D[43], L[4]);
	L[16] = fmaf(M[6], D[46], L[16]);
	L[4] = fmaf(M[7], D[23], L[4]);
	L[16] = fmaf(M[5], D[45], L[16]);
	L[4] = fmaf(M[17], D[42], L[4]);
	L[17] *= T(2.000000000e+00);
	L[4] = fmaf(M[4], D[20], L[4]);
	L[17] = fmaf(M[9], D[53], L[17]);
	L[4] = fmaf(M[13], D[38], L[4]);
	L[17] = fmaf(M[7], D[51], L[17]);
	L[4] = fmaf(M[15], D[40], L[4]);
	L[17] = fmaf(M[4], D[42], L[17]);
	L[4] *= T(5.000000000e-01);
	L[17] *= T(5.000000000e-01);
	L[4] = fmaf(M[1], D[10], L[4]);
	L[17] = fmaf(M[0], D[17], L[17]);
	L[4] = fmaf(M[14], D[39], L[4]);
	L[17] = fmaf(M[3], D[32], L[17]);
	L[4] = fmaf(M[5], D[21], L[4]);
	L[17] = fmaf(M[2], D[31], L[17]);
	L[4] = fmaf(M[6], D[22], L[4]);
	L[17] = fmaf(M[8], D[52], L[17]);
	L[4] = fmaf(M[0], D[4], L[4]);
	L[17] = fmaf(M[1], D[27], L[17]);
	L[4] = fmaf(M[8], D[24], L[4]);
	L[17] = fmaf(M[6], D[47], L[17]);
	L[4] = fmaf(M[2], D[11], L[4]);
	L[17] = fmaf(M[5], D[46], L[17]);
	L[4] = fmaf(M[3], D[12], L[4]);
	L[18] *= T(2.000000000e+00);
	L[5] *= T(6.000000000e+00);
	L[18] = fmaf(M[9], D[54], L[18]);
	L[5] = fmaf(M[10], D[36], L[5]);
	L[18] = fmaf(M[7], D[52], L[18]);
	L[5] = fmaf(M[19], D[48], L[5]);
	L[18] = fmaf(M[4], D[43], L[18]);
	L[5] = fmaf(M[16], D[45], L[5]);
	L[18] *= T(5.000000000e-01);
	L[5] *= T(3.333333333e-01);
	L[18] = fmaf(M[0], D[18], L[18]);
	L[5] = fmaf(M[9], D[28], L[5]);
	L[18] = fmaf(M[3], D[33], L[18]);
	L[5] = fmaf(M[11], D[38], L[5]);
	L[18] = fmaf(M[2], D[32], L[18]);
	L[5] = fmaf(M[12], D[39], L[5]);
	L[18] = fmaf(M[8], D[53], L[18]);
	L[5] = fmaf(M[18], D[47], L[5]);
	L[18] = fmaf(M[1], D[28], L[18]);
	L[5] = fmaf(M[7], D[26], L[5]);
	L[18] = fmaf(M[6], D[48], L[18]);
	L[5] = fmaf(M[17], D[46], L[5]);
	L[18] = fmaf(M[5], D[47], L[18]);
	L[5] = fmaf(M[4], D[21], L[5]);
	L[19] *= T(2.000000000e+00);
	L[5] = fmaf(M[13], D[41], L[5]);
	L[19] = fmaf(M[9], D[55], L[19]);
	L[5] = fmaf(M[15], D[43], L[5]);
	L[19] = fmaf(M[7], D[53], L[19]);
	L[5] *= T(5.000000000e-01);
	L[19] = fmaf(M[4], D[44], L[19]);
	L[5] = fmaf(M[1], D[11], L[5]);
	L[19] *= T(5.000000000e-01);
	L[5] = fmaf(M[14], D[42], L[5]);
	L[19] = fmaf(M[0], D[19], L[19]);
	L[5] = fmaf(M[5], D[23], L[5]);
	L[19] = fmaf(M[3], D[34], L[19]);
	L[5] = fmaf(M[6], D[24], L[5]);
	L[19] = fmaf(M[2], D[33], L[19]);
	L[5] = fmaf(M[0], D[5], L[5]);
	L[19] = fmaf(M[8], D[54], L[19]);
	L[5] = fmaf(M[8], D[27], L[5]);
	L[19] = fmaf(M[1], D[29], L[19]);
	L[5] = fmaf(M[2], D[13], L[5]);
	L[19] = fmaf(M[6], D[49], L[19]);
	L[5] = fmaf(M[3], D[14], L[5]);
	L[19] = fmaf(M[5], D[48], L[19]);
	L[6] *= T(6.000000000e+00);
	L[20] = fmaf(M[0], D[20], L[20]);
	L[6] = fmaf(M[10], D[37], L[6]);
	L[20] = fmaf(M[3], D[37], L[20]);
	L[6] = fmaf(M[19], D[49], L[6]);
	L[20] = fmaf(M[2], D[36], L[20]);
	L[6] = fmaf(M[16], D[46], L[6]);
	L[20] = fmaf(M[1], D[35], L[20]);
	L[6] *= T(3.333333333e-01);
	L[21] = fmaf(M[0], D[21], L[21]);
	L[6] = fmaf(M[9], D[29], L[6]);
	L[21] = fmaf(M[3], D[39], L[21]);
	L[6] = fmaf(M[11], D[39], L[6]);
	L[21] = fmaf(M[2], D[38], L[21]);
	L[6] = fmaf(M[12], D[40], L[6]);
	L[21] = fmaf(M[1], D[36], L[21]);
	L[6] = fmaf(M[18], D[48], L[6]);
	L[22] = fmaf(M[0], D[22], L[22]);
	L[6] = fmaf(M[7], D[27], L[6]);
	L[22] = fmaf(M[3], D[40], L[22]);
	L[6] = fmaf(M[17], D[47], L[6]);
	L[22] = fmaf(M[2], D[39], L[22]);
	L[6] = fmaf(M[4], D[22], L[6]);
	L[22] = fmaf(M[1], D[37], L[22]);
	L[6] = fmaf(M[13], D[42], L[6]);
	L[23] = fmaf(M[0], D[23], L[23]);
	L[6] = fmaf(M[15], D[44], L[6]);
	L[23] = fmaf(M[3], D[42], L[23]);
	L[6] *= T(5.000000000e-01);
	L[23] = fmaf(M[2], D[41], L[23]);
	L[6] = fmaf(M[1], D[12], L[6]);
	L[23] = fmaf(M[1], D[38], L[23]);
	L[6] = fmaf(M[14], D[43], L[6]);
	L[24] = fmaf(M[0], D[24], L[24]);
	L[6] = fmaf(M[5], D[24], L[6]);
	L[24] = fmaf(M[3], D[43], L[24]);
	L[6] = fmaf(M[6], D[25], L[6]);
	L[24] = fmaf(M[2], D[42], L[24]);
	L[6] = fmaf(M[0], D[6], L[6]);
	L[24] = fmaf(M[1], D[39], L[24]);
	L[6] = fmaf(M[8], D[28], L[6]);
	L[25] = fmaf(M[0], D[25], L[25]);
	L[6] = fmaf(M[2], D[14], L[6]);
	L[25] = fmaf(M[3], D[44], L[25]);
	L[6] = fmaf(M[3], D[15], L[6]);
	L[25] = fmaf(M[2], D[43], L[25]);
	L[7] *= T(6.000000000e+00);
	L[25] = fmaf(M[1], D[40], L[25]);
	L[7] = fmaf(M[10], D[38], L[7]);
	L[26] = fmaf(M[0], D[26], L[26]);
	L[7] = fmaf(M[19], D[53], L[7]);
	L[26] = fmaf(M[3], D[46], L[26]);
	L[7] = fmaf(M[16], D[50], L[7]);
	L[26] = fmaf(M[2], D[45], L[26]);
	L[7] *= T(3.333333333e-01);
	L[26] = fmaf(M[1], D[41], L[26]);
	L[7] = fmaf(M[9], D[32], L[7]);
	L[27] = fmaf(M[0], D[27], L[27]);
	L[7] = fmaf(M[11], D[41], L[7]);
	L[27] = fmaf(M[3], D[47], L[27]);
	L[7] = fmaf(M[12], D[42], L[7]);
	L[27] = fmaf(M[2], D[46], L[27]);
	L[7] = fmaf(M[18], D[52], L[7]);
	L[27] = fmaf(M[1], D[42], L[27]);
	L[7] = fmaf(M[7], D[30], L[7]);
	L[28] = fmaf(M[0], D[28], L[28]);
	L[7] = fmaf(M[17], D[51], L[7]);
	L[28] = fmaf(M[3], D[48], L[28]);
	L[7] = fmaf(M[4], D[23], L[7]);
	L[28] = fmaf(M[2], D[47], L[28]);
	L[7] = fmaf(M[13], D[45], L[7]);
	L[28] = fmaf(M[1], D[43], L[28]);
	L[7] = fmaf(M[15], D[47], L[7]);
	L[29] = fmaf(M[0], D[29], L[29]);
	L[7] *= T(5.000000000e-01);
	L[29] = fmaf(M[3], D[49], L[29]);
	L[7] = fmaf(M[1], D[13], L[7]);
	L[29] = fmaf(M[2], D[48], L[29]);
	L[7] = fmaf(M[14], D[46], L[7]);
	L[29] = fmaf(M[1], D[44], L[29]);
	L[7] = fmaf(M[5], D[26], L[7]);
	L[30] = fmaf(M[0], D[30], L[30]);
	L[7] = fmaf(M[6], D[27], L[7]);
	L[30] = fmaf(M[3], D[51], L[30]);
	L[7] = fmaf(M[0], D[7], L[7]);
	L[30] = fmaf(M[2], D[50], L[30]);
	L[7] = fmaf(M[8], D[31], L[7]);
	L[30] = fmaf(M[1], D[45], L[30]);
	L[7] = fmaf(M[2], D[16], L[7]);
	L[31] = fmaf(M[0], D[31], L[31]);
	L[7] = fmaf(M[3], D[17], L[7]);
	L[31] = fmaf(M[3], D[52], L[31]);
	L[31] = fmaf(M[2], D[51], L[31]);
	L[31] = fmaf(M[1], D[46], L[31]);
	L[32] = fmaf(M[0], D[32], L[32]);
	L[32] = fmaf(M[3], D[53], L[32]);
	L[32] = fmaf(M[2], D[52], L[32]);
	L[32] = fmaf(M[1], D[47], L[32]);
	L[33] = fmaf(M[0], D[33], L[33]);
	L[33] = fmaf(M[3], D[54], L[33]);
	L[33] = fmaf(M[2], D[53], L[33]);
	L[33] = fmaf(M[1], D[48], L[33]);
	L[34] = fmaf(M[0], D[34], L[34]);
	L[34] = fmaf(M[3], D[55], L[34]);
	L[34] = fmaf(M[2], D[54], L[34]);
	L[34] = fmaf(M[1], D[49], L[34]);
	L[35] = fmaf(M[0], D[35], L[35]);
	L[36] = fmaf(M[0], D[36], L[36]);
	L[37] = fmaf(M[0], D[37], L[37]);
	L[38] = fmaf(M[0], D[38], L[38]);
	L[39] = fmaf(M[0], D[39], L[39]);
	L[40] = fmaf(M[0], D[40], L[40]);
	L[41] = fmaf(M[0], D[41], L[41]);
	L[42] = fmaf(M[0], D[42], L[42]);
	L[43] = fmaf(M[0], D[43], L[43]);
	L[44] = fmaf(M[0], D[44], L[44]);
	L[45] = fmaf(M[0], D[45], L[45]);
	L[46] = fmaf(M[0], D[46], L[46]);
	L[47] = fmaf(M[0], D[47], L[47]);
	L[48] = fmaf(M[0], D[48], L[48]);
	L[49] = fmaf(M[0], D[49], L[49]);
	L[50] = fmaf(M[0], D[50], L[50]);
	L[51] = fmaf(M[0], D[51], L[51]);
	L[52] = fmaf(M[0], D[52], L[52]);
	L[53] = fmaf(M[0], D[53], L[53]);
	L[54] = fmaf(M[0], D[54], L[54]);
	L[55] = fmaf(M[0], D[55], L[55]);
	return 865 + do_phi * 75;
}


template<class T>
CUDA_EXPORT
tensor_sym<T, 5> P2M(array<T, NDIM>& X) {
	tensor_sym<T, 5> M;
	X[0] *= -T(1);
	X[1] *= -T(1);
	X[2] *= -T(1);
	M[0] = T(1);
	M[1] = X[0];
	M[2] = X[1];
	M[3] = X[2];
	M[9] = M[3] * M[3];
	M[8] = M[2] * M[3];
	M[7] = M[2] * M[2];
	M[6] = M[1] * M[3];
	M[5] = M[1] * M[2];
	M[4] = M[1] * M[1];
	M[19] = M[9] * M[3];
	M[18] = M[8] * M[3];
	M[17] = M[8] * M[2];
	M[16] = M[7] * M[2];
	M[15] = M[6] * M[3];
	M[14] = M[5] * M[3];
	M[13] = M[5] * M[2];
	M[12] = M[6] * M[1];
	M[11] = M[5] * M[1];
	M[10] = M[4] * M[1];
	M[34] = M[9] * M[9];
	M[33] = M[8] * M[9];
	M[32] = M[8] * M[8];
	M[31] = M[8] * M[7];
	M[30] = M[7] * M[7];
	M[29] = M[6] * M[9];
	M[28] = M[5] * M[9];
	M[27] = M[5] * M[8];
	M[26] = M[5] * M[7];
	M[25] = M[6] * M[6];
	M[24] = M[5] * M[6];
	M[23] = M[5] * M[5];
	M[22] = M[6] * M[4];
	M[21] = M[5] * M[4];
	M[20] = M[4] * M[4];
	return M;
}


template<class T>
CUDA_EXPORT
tensor_sym<T, 5> M2M(const tensor_sym<T,5>& Ma, array<T, NDIM>& X) {
	auto Mb = Ma;
	X[0] *= -T(1);
	X[1] *= -T(1);
	X[2] *= -T(1);
	T x[35];
	x[0] = T(1);
	x[1] = X[0];
	x[2] = X[1];
	x[3] = X[2];
	x[9] = x[3] * x[3];
	x[8] = x[2] * x[3];
	x[7] = x[2] * x[2];
	x[6] = x[1] * x[3];
	x[5] = x[1] * x[2];
	x[4] = x[1] * x[1];
	x[19] = x[9] * x[3];
	x[18] = x[8] * x[3];
	x[17] = x[8] * x[2];
	x[16] = x[7] * x[2];
	x[15] = x[6] * x[3];
	x[14] = x[5] * x[3];
	x[13] = x[5] * x[2];
	x[12] = x[6] * x[1];
	x[11] = x[5] * x[1];
	x[10] = x[4] * x[1];
	x[34] = x[9] * x[9];
	x[33] = x[8] * x[9];
	x[32] = x[8] * x[8];
	x[31] = x[8] * x[7];
	x[30] = x[7] * x[7];
	x[29] = x[6] * x[9];
	x[28] = x[5] * x[9];
	x[27] = x[5] * x[8];
	x[26] = x[5] * x[7];
	x[25] = x[6] * x[6];
	x[24] = x[5] * x[6];
	x[23] = x[5] * x[5];
	x[22] = x[6] * x[4];
	x[21] = x[5] * x[4];
	x[20] = x[4] * x[4];
	Mb[1] = fmaf( x[1], Ma[0], Mb[1]);
	Mb[2] = fmaf( x[2], Ma[0], Mb[2]);
	Mb[3] = fmaf( x[3], Ma[0], Mb[3]);
	Mb[4] *= T(5.000000000e-01);
	Mb[4] = fmaf( x[1], Ma[1], Mb[4]);
	Mb[4] *= T(2.000000000e+00);
	Mb[4] = fmaf( x[4], Ma[0], Mb[4]);
	Mb[5] = fmaf( x[5], Ma[0], Mb[5]);
	Mb[5] = fmaf( x[1], Ma[2], Mb[5]);
	Mb[5] = fmaf( x[2], Ma[1], Mb[5]);
	Mb[6] = fmaf( x[6], Ma[0], Mb[6]);
	Mb[6] = fmaf( x[1], Ma[3], Mb[6]);
	Mb[6] = fmaf( x[3], Ma[1], Mb[6]);
	Mb[7] *= T(5.000000000e-01);
	Mb[7] = fmaf( x[2], Ma[2], Mb[7]);
	Mb[7] *= T(2.000000000e+00);
	Mb[7] = fmaf( x[7], Ma[0], Mb[7]);
	Mb[8] = fmaf( x[8], Ma[0], Mb[8]);
	Mb[8] = fmaf( x[2], Ma[3], Mb[8]);
	Mb[8] = fmaf( x[3], Ma[2], Mb[8]);
	Mb[9] *= T(5.000000000e-01);
	Mb[9] = fmaf( x[3], Ma[3], Mb[9]);
	Mb[9] *= T(2.000000000e+00);
	Mb[9] = fmaf( x[9], Ma[0], Mb[9]);
	Mb[10] *= T(3.333333333e-01);
	Mb[10] = fmaf( x[4], Ma[1], Mb[10]);
	Mb[10] = fmaf( x[1], Ma[4], Mb[10]);
	Mb[10] *= T(3.000000000e+00);
	Mb[10] = fmaf( x[10], Ma[0], Mb[10]);
	Mb[11] *= T(5.000000000e-01);
	Mb[11] = fmaf( x[5], Ma[1], Mb[11]);
	Mb[11] = fmaf( x[1], Ma[5], Mb[11]);
	Mb[11] *= T(2.000000000e+00);
	Mb[11] = fmaf( x[11], Ma[0], Mb[11]);
	Mb[11] = fmaf( x[4], Ma[2], Mb[11]);
	Mb[11] = fmaf( x[2], Ma[4], Mb[11]);
	Mb[12] *= T(5.000000000e-01);
	Mb[12] = fmaf( x[6], Ma[1], Mb[12]);
	Mb[12] = fmaf( x[1], Ma[6], Mb[12]);
	Mb[12] *= T(2.000000000e+00);
	Mb[12] = fmaf( x[12], Ma[0], Mb[12]);
	Mb[12] = fmaf( x[4], Ma[3], Mb[12]);
	Mb[12] = fmaf( x[3], Ma[4], Mb[12]);
	Mb[13] *= T(5.000000000e-01);
	Mb[13] = fmaf( x[5], Ma[2], Mb[13]);
	Mb[13] = fmaf( x[2], Ma[5], Mb[13]);
	Mb[13] *= T(2.000000000e+00);
	Mb[13] = fmaf( x[13], Ma[0], Mb[13]);
	Mb[13] = fmaf( x[1], Ma[7], Mb[13]);
	Mb[13] = fmaf( x[7], Ma[1], Mb[13]);
	Mb[14] = fmaf( x[14], Ma[0], Mb[14]);
	Mb[14] = fmaf( x[5], Ma[3], Mb[14]);
	Mb[14] = fmaf( x[6], Ma[2], Mb[14]);
	Mb[14] = fmaf( x[1], Ma[8], Mb[14]);
	Mb[14] = fmaf( x[8], Ma[1], Mb[14]);
	Mb[14] = fmaf( x[2], Ma[6], Mb[14]);
	Mb[14] = fmaf( x[3], Ma[5], Mb[14]);
	Mb[15] *= T(5.000000000e-01);
	Mb[15] = fmaf( x[6], Ma[3], Mb[15]);
	Mb[15] = fmaf( x[3], Ma[6], Mb[15]);
	Mb[15] *= T(2.000000000e+00);
	Mb[15] = fmaf( x[15], Ma[0], Mb[15]);
	Mb[15] = fmaf( x[1], Ma[9], Mb[15]);
	Mb[15] = fmaf( x[9], Ma[1], Mb[15]);
	Mb[16] *= T(3.333333333e-01);
	Mb[16] = fmaf( x[7], Ma[2], Mb[16]);
	Mb[16] = fmaf( x[2], Ma[7], Mb[16]);
	Mb[16] *= T(3.000000000e+00);
	Mb[16] = fmaf( x[16], Ma[0], Mb[16]);
	Mb[17] *= T(5.000000000e-01);
	Mb[17] = fmaf( x[8], Ma[2], Mb[17]);
	Mb[17] = fmaf( x[2], Ma[8], Mb[17]);
	Mb[17] *= T(2.000000000e+00);
	Mb[17] = fmaf( x[17], Ma[0], Mb[17]);
	Mb[17] = fmaf( x[7], Ma[3], Mb[17]);
	Mb[17] = fmaf( x[3], Ma[7], Mb[17]);
	Mb[18] *= T(5.000000000e-01);
	Mb[18] = fmaf( x[8], Ma[3], Mb[18]);
	Mb[18] = fmaf( x[3], Ma[8], Mb[18]);
	Mb[18] *= T(2.000000000e+00);
	Mb[18] = fmaf( x[18], Ma[0], Mb[18]);
	Mb[18] = fmaf( x[2], Ma[9], Mb[18]);
	Mb[18] = fmaf( x[9], Ma[2], Mb[18]);
	Mb[19] *= T(3.333333333e-01);
	Mb[19] = fmaf( x[9], Ma[3], Mb[19]);
	Mb[19] = fmaf( x[3], Ma[9], Mb[19]);
	Mb[19] *= T(3.000000000e+00);
	Mb[19] = fmaf( x[19], Ma[0], Mb[19]);
	Mb[20] *= T(1.666666667e-01);
	Mb[20] = fmaf( x[4], Ma[4], Mb[20]);
	Mb[20] *= T(1.500000000e+00);
	Mb[20] = fmaf( x[10], Ma[1], Mb[20]);
	Mb[20] = fmaf( x[1], Ma[10], Mb[20]);
	Mb[20] *= T(4.000000000e+00);
	Mb[20] = fmaf( x[20], Ma[0], Mb[20]);
	Mb[21] *= T(3.333333333e-01);
	Mb[21] = fmaf( x[11], Ma[1], Mb[21]);
	Mb[21] = fmaf( x[4], Ma[5], Mb[21]);
	Mb[21] = fmaf( x[5], Ma[4], Mb[21]);
	Mb[21] = fmaf( x[1], Ma[11], Mb[21]);
	Mb[21] *= T(3.000000000e+00);
	Mb[21] = fmaf( x[21], Ma[0], Mb[21]);
	Mb[21] = fmaf( x[10], Ma[2], Mb[21]);
	Mb[21] = fmaf( x[2], Ma[10], Mb[21]);
	Mb[22] *= T(3.333333333e-01);
	Mb[22] = fmaf( x[12], Ma[1], Mb[22]);
	Mb[22] = fmaf( x[4], Ma[6], Mb[22]);
	Mb[22] = fmaf( x[6], Ma[4], Mb[22]);
	Mb[22] = fmaf( x[1], Ma[12], Mb[22]);
	Mb[22] *= T(3.000000000e+00);
	Mb[22] = fmaf( x[22], Ma[0], Mb[22]);
	Mb[22] = fmaf( x[10], Ma[3], Mb[22]);
	Mb[22] = fmaf( x[3], Ma[10], Mb[22]);
	Mb[23] *= T(2.500000000e-01);
	Mb[23] = fmaf( x[5], Ma[5], Mb[23]);
	Mb[23] *= T(2.000000000e+00);
	Mb[23] = fmaf( x[11], Ma[2], Mb[23]);
	Mb[23] = fmaf( x[13], Ma[1], Mb[23]);
	Mb[23] = fmaf( x[1], Ma[13], Mb[23]);
	Mb[23] = fmaf( x[2], Ma[11], Mb[23]);
	Mb[23] *= T(2.000000000e+00);
	Mb[23] = fmaf( x[23], Ma[0], Mb[23]);
	Mb[23] = fmaf( x[4], Ma[7], Mb[23]);
	Mb[23] = fmaf( x[7], Ma[4], Mb[23]);
	Mb[24] *= T(5.000000000e-01);
	Mb[24] = fmaf( x[14], Ma[1], Mb[24]);
	Mb[24] = fmaf( x[5], Ma[6], Mb[24]);
	Mb[24] = fmaf( x[6], Ma[5], Mb[24]);
	Mb[24] = fmaf( x[1], Ma[14], Mb[24]);
	Mb[24] *= T(2.000000000e+00);
	Mb[24] = fmaf( x[24], Ma[0], Mb[24]);
	Mb[24] = fmaf( x[11], Ma[3], Mb[24]);
	Mb[24] = fmaf( x[12], Ma[2], Mb[24]);
	Mb[24] = fmaf( x[4], Ma[8], Mb[24]);
	Mb[24] = fmaf( x[8], Ma[4], Mb[24]);
	Mb[24] = fmaf( x[2], Ma[12], Mb[24]);
	Mb[24] = fmaf( x[3], Ma[11], Mb[24]);
	Mb[25] *= T(2.500000000e-01);
	Mb[25] = fmaf( x[6], Ma[6], Mb[25]);
	Mb[25] *= T(2.000000000e+00);
	Mb[25] = fmaf( x[12], Ma[3], Mb[25]);
	Mb[25] = fmaf( x[15], Ma[1], Mb[25]);
	Mb[25] = fmaf( x[1], Ma[15], Mb[25]);
	Mb[25] = fmaf( x[3], Ma[12], Mb[25]);
	Mb[25] *= T(2.000000000e+00);
	Mb[25] = fmaf( x[25], Ma[0], Mb[25]);
	Mb[25] = fmaf( x[4], Ma[9], Mb[25]);
	Mb[25] = fmaf( x[9], Ma[4], Mb[25]);
	Mb[26] *= T(3.333333333e-01);
	Mb[26] = fmaf( x[13], Ma[2], Mb[26]);
	Mb[26] = fmaf( x[5], Ma[7], Mb[26]);
	Mb[26] = fmaf( x[7], Ma[5], Mb[26]);
	Mb[26] = fmaf( x[2], Ma[13], Mb[26]);
	Mb[26] *= T(3.000000000e+00);
	Mb[26] = fmaf( x[26], Ma[0], Mb[26]);
	Mb[26] = fmaf( x[1], Ma[16], Mb[26]);
	Mb[26] = fmaf( x[16], Ma[1], Mb[26]);
	Mb[27] *= T(5.000000000e-01);
	Mb[27] = fmaf( x[14], Ma[2], Mb[27]);
	Mb[27] = fmaf( x[5], Ma[8], Mb[27]);
	Mb[27] = fmaf( x[8], Ma[5], Mb[27]);
	Mb[27] = fmaf( x[2], Ma[14], Mb[27]);
	Mb[27] *= T(2.000000000e+00);
	Mb[27] = fmaf( x[27], Ma[0], Mb[27]);
	Mb[27] = fmaf( x[13], Ma[3], Mb[27]);
	Mb[27] = fmaf( x[6], Ma[7], Mb[27]);
	Mb[27] = fmaf( x[1], Ma[17], Mb[27]);
	Mb[27] = fmaf( x[17], Ma[1], Mb[27]);
	Mb[27] = fmaf( x[7], Ma[6], Mb[27]);
	Mb[27] = fmaf( x[3], Ma[13], Mb[27]);
	Mb[28] *= T(5.000000000e-01);
	Mb[28] = fmaf( x[14], Ma[3], Mb[28]);
	Mb[28] = fmaf( x[6], Ma[8], Mb[28]);
	Mb[28] = fmaf( x[8], Ma[6], Mb[28]);
	Mb[28] = fmaf( x[3], Ma[14], Mb[28]);
	Mb[28] *= T(2.000000000e+00);
	Mb[28] = fmaf( x[28], Ma[0], Mb[28]);
	Mb[28] = fmaf( x[5], Ma[9], Mb[28]);
	Mb[28] = fmaf( x[15], Ma[2], Mb[28]);
	Mb[28] = fmaf( x[1], Ma[18], Mb[28]);
	Mb[28] = fmaf( x[18], Ma[1], Mb[28]);
	Mb[28] = fmaf( x[2], Ma[15], Mb[28]);
	Mb[28] = fmaf( x[9], Ma[5], Mb[28]);
	Mb[29] *= T(3.333333333e-01);
	Mb[29] = fmaf( x[15], Ma[3], Mb[29]);
	Mb[29] = fmaf( x[6], Ma[9], Mb[29]);
	Mb[29] = fmaf( x[9], Ma[6], Mb[29]);
	Mb[29] = fmaf( x[3], Ma[15], Mb[29]);
	Mb[29] *= T(3.000000000e+00);
	Mb[29] = fmaf( x[29], Ma[0], Mb[29]);
	Mb[29] = fmaf( x[1], Ma[19], Mb[29]);
	Mb[29] = fmaf( x[19], Ma[1], Mb[29]);
	Mb[30] *= T(1.666666667e-01);
	Mb[30] = fmaf( x[7], Ma[7], Mb[30]);
	Mb[30] *= T(1.500000000e+00);
	Mb[30] = fmaf( x[16], Ma[2], Mb[30]);
	Mb[30] = fmaf( x[2], Ma[16], Mb[30]);
	Mb[30] *= T(4.000000000e+00);
	Mb[30] = fmaf( x[30], Ma[0], Mb[30]);
	Mb[31] *= T(3.333333333e-01);
	Mb[31] = fmaf( x[17], Ma[2], Mb[31]);
	Mb[31] = fmaf( x[7], Ma[8], Mb[31]);
	Mb[31] = fmaf( x[8], Ma[7], Mb[31]);
	Mb[31] = fmaf( x[2], Ma[17], Mb[31]);
	Mb[31] *= T(3.000000000e+00);
	Mb[31] = fmaf( x[31], Ma[0], Mb[31]);
	Mb[31] = fmaf( x[16], Ma[3], Mb[31]);
	Mb[31] = fmaf( x[3], Ma[16], Mb[31]);
	Mb[32] *= T(2.500000000e-01);
	Mb[32] = fmaf( x[8], Ma[8], Mb[32]);
	Mb[32] *= T(2.000000000e+00);
	Mb[32] = fmaf( x[17], Ma[3], Mb[32]);
	Mb[32] = fmaf( x[18], Ma[2], Mb[32]);
	Mb[32] = fmaf( x[2], Ma[18], Mb[32]);
	Mb[32] = fmaf( x[3], Ma[17], Mb[32]);
	Mb[32] *= T(2.000000000e+00);
	Mb[32] = fmaf( x[32], Ma[0], Mb[32]);
	Mb[32] = fmaf( x[7], Ma[9], Mb[32]);
	Mb[32] = fmaf( x[9], Ma[7], Mb[32]);
	Mb[33] *= T(3.333333333e-01);
	Mb[33] = fmaf( x[18], Ma[3], Mb[33]);
	Mb[33] = fmaf( x[8], Ma[9], Mb[33]);
	Mb[33] = fmaf( x[9], Ma[8], Mb[33]);
	Mb[33] = fmaf( x[3], Ma[18], Mb[33]);
	Mb[33] *= T(3.000000000e+00);
	Mb[33] = fmaf( x[33], Ma[0], Mb[33]);
	Mb[33] = fmaf( x[2], Ma[19], Mb[33]);
	Mb[33] = fmaf( x[19], Ma[2], Mb[33]);
	Mb[34] *= T(1.666666667e-01);
	Mb[34] = fmaf( x[9], Ma[9], Mb[34]);
	Mb[34] *= T(1.500000000e+00);
	Mb[34] = fmaf( x[19], Ma[3], Mb[34]);
	Mb[34] = fmaf( x[3], Ma[19], Mb[34]);
	Mb[34] *= T(4.000000000e+00);
	Mb[34] = fmaf( x[34], Ma[0], Mb[34]);
	return Mb;

}

template<class T>
CUDA_EXPORT
#ifdef __CUDACC__
__noinline__
#endif
tensor_sym<T, 6> L2L(const tensor_sym<T, 6>& La, array<T,NDIM> X, bool do_phi) {
	tensor_sym<T, 6> Lb;
	T x[56];
	x[0] = T(1);
	x[1] = X[0];
	x[2] = X[1];
	x[3] = X[2];
	x[9] = x[3] * x[3];
	x[8] = x[2] * x[3];
	x[7] = x[2] * x[2];
	x[6] = x[1] * x[3];
	x[5] = x[1] * x[2];
	x[4] = x[1] * x[1];
	x[19] = x[9] * x[3];
	x[18] = x[8] * x[3];
	x[17] = x[8] * x[2];
	x[16] = x[7] * x[2];
	x[15] = x[6] * x[3];
	x[14] = x[5] * x[3];
	x[13] = x[5] * x[2];
	x[12] = x[6] * x[1];
	x[11] = x[5] * x[1];
	x[10] = x[4] * x[1];
	x[34] = x[9] * x[9];
	x[33] = x[8] * x[9];
	x[32] = x[8] * x[8];
	x[31] = x[8] * x[7];
	x[30] = x[7] * x[7];
	x[29] = x[6] * x[9];
	x[28] = x[5] * x[9];
	x[27] = x[5] * x[8];
	x[26] = x[5] * x[7];
	x[25] = x[6] * x[6];
	x[24] = x[5] * x[6];
	x[23] = x[5] * x[5];
	x[22] = x[6] * x[4];
	x[21] = x[5] * x[4];
	x[20] = x[4] * x[4];
	x[55] = x[19] * x[9];
	x[54] = x[18] * x[9];
	x[53] = x[17] * x[9];
	x[52] = x[17] * x[8];
	x[51] = x[17] * x[7];
	x[50] = x[16] * x[7];
	x[49] = x[15] * x[9];
	x[48] = x[14] * x[9];
	x[47] = x[14] * x[8];
	x[46] = x[14] * x[7];
	x[45] = x[13] * x[7];
	x[44] = x[12] * x[9];
	x[43] = x[14] * x[6];
	x[42] = x[14] * x[5];
	x[41] = x[11] * x[7];
	x[40] = x[12] * x[6];
	x[39] = x[14] * x[4];
	x[38] = x[11] * x[5];
	x[37] = x[12] * x[4];
	x[36] = x[11] * x[4];
	x[35] = x[10] * x[4];
	Lb = La;
	if( do_phi ) {
		Lb[0] *= T(1.200000000e+02);
		Lb[0] = fmaf( x[35], La[35], Lb[0]);
		Lb[0] = fmaf( x[50], La[50], Lb[0]);
		Lb[0] = fmaf( x[55], La[55], Lb[0]);
		Lb[0] *= T(2.000000000e-01);
		Lb[0] = fmaf( x[36], La[36], Lb[0]);
		Lb[0] = fmaf( x[37], La[37], Lb[0]);
		Lb[0] = fmaf( x[20], La[20], Lb[0]);
		Lb[0] = fmaf( x[45], La[45], Lb[0]);
		Lb[0] = fmaf( x[54], La[54], Lb[0]);
		Lb[0] = fmaf( x[49], La[49], Lb[0]);
		Lb[0] = fmaf( x[34], La[34], Lb[0]);
		Lb[0] = fmaf( x[51], La[51], Lb[0]);
		Lb[0] = fmaf( x[30], La[30], Lb[0]);
		Lb[0] *= T(5.000000000e-01);
		Lb[0] = fmaf( x[40], La[40], Lb[0]);
		Lb[0] = fmaf( x[44], La[44], Lb[0]);
		Lb[0] = fmaf( x[41], La[41], Lb[0]);
		Lb[0] = fmaf( x[52], La[52], Lb[0]);
		Lb[0] = fmaf( x[53], La[53], Lb[0]);
		Lb[0] = fmaf( x[38], La[38], Lb[0]);
		Lb[0] *= T(5.000000000e-01);
		Lb[0] = fmaf( x[16], La[16], Lb[0]);
		Lb[0] = fmaf( x[19], La[19], Lb[0]);
		Lb[0] = fmaf( x[33], La[33], Lb[0]);
		Lb[0] = fmaf( x[46], La[46], Lb[0]);
		Lb[0] = fmaf( x[26], La[26], Lb[0]);
		Lb[0] = fmaf( x[48], La[48], Lb[0]);
		Lb[0] = fmaf( x[10], La[10], Lb[0]);
		Lb[0] = fmaf( x[39], La[39], Lb[0]);
		Lb[0] = fmaf( x[29], La[29], Lb[0]);
		Lb[0] = fmaf( x[22], La[22], Lb[0]);
		Lb[0] = fmaf( x[21], La[21], Lb[0]);
		Lb[0] = fmaf( x[31], La[31], Lb[0]);
		Lb[0] *= T(6.666666667e-01);
		Lb[0] = fmaf( x[42], La[42], Lb[0]);
		Lb[0] = fmaf( x[23], La[23], Lb[0]);
		Lb[0] = fmaf( x[43], La[43], Lb[0]);
		Lb[0] = fmaf( x[47], La[47], Lb[0]);
		Lb[0] = fmaf( x[32], La[32], Lb[0]);
		Lb[0] = fmaf( x[25], La[25], Lb[0]);
		Lb[0] *= T(5.000000000e-01);
		Lb[0] = fmaf( x[28], La[28], Lb[0]);
		Lb[0] = fmaf( x[24], La[24], Lb[0]);
		Lb[0] = fmaf( x[11], La[11], Lb[0]);
		Lb[0] = fmaf( x[12], La[12], Lb[0]);
		Lb[0] = fmaf( x[4], La[4], Lb[0]);
		Lb[0] = fmaf( x[27], La[27], Lb[0]);
		Lb[0] = fmaf( x[13], La[13], Lb[0]);
		Lb[0] = fmaf( x[15], La[15], Lb[0]);
		Lb[0] = fmaf( x[17], La[17], Lb[0]);
		Lb[0] = fmaf( x[7], La[7], Lb[0]);
		Lb[0] = fmaf( x[18], La[18], Lb[0]);
		Lb[0] = fmaf( x[9], La[9], Lb[0]);
		Lb[0] *= T(5.000000000e-01);
		Lb[0] = fmaf( x[3], La[3], Lb[0]);
		Lb[0] = fmaf( x[14], La[14], Lb[0]);
		Lb[0] = fmaf( x[5], La[5], Lb[0]);
		Lb[0] = fmaf( x[6], La[6], Lb[0]);
		Lb[0] = fmaf( x[1], La[1], Lb[0]);
		Lb[0] = fmaf( x[8], La[8], Lb[0]);
		Lb[0] = fmaf( x[2], La[2], Lb[0]);
	}
	Lb[1] *= T(2.400000000e+01);
	Lb[1] = fmaf( x[20], La[35], Lb[1]);
	Lb[1] = fmaf( x[34], La[49], Lb[1]);
	Lb[1] = fmaf( x[30], La[45], Lb[1]);
	Lb[1] *= T(2.500000000e-01);
	Lb[1] = fmaf( x[29], La[44], Lb[1]);
	Lb[1] = fmaf( x[21], La[36], Lb[1]);
	Lb[1] = fmaf( x[22], La[37], Lb[1]);
	Lb[1] = fmaf( x[10], La[20], Lb[1]);
	Lb[1] = fmaf( x[26], La[41], Lb[1]);
	Lb[1] = fmaf( x[31], La[46], Lb[1]);
	Lb[1] = fmaf( x[16], La[26], Lb[1]);
	Lb[1] = fmaf( x[19], La[29], Lb[1]);
	Lb[1] = fmaf( x[33], La[48], Lb[1]);
	Lb[1] *= T(6.666666667e-01);
	Lb[1] = fmaf( x[23], La[38], Lb[1]);
	Lb[1] = fmaf( x[25], La[40], Lb[1]);
	Lb[1] = fmaf( x[32], La[47], Lb[1]);
	Lb[1] *= T(5.000000000e-01);
	Lb[1] = fmaf( x[27], La[42], Lb[1]);
	Lb[1] = fmaf( x[9], La[15], Lb[1]);
	Lb[1] = fmaf( x[24], La[39], Lb[1]);
	Lb[1] = fmaf( x[11], La[21], Lb[1]);
	Lb[1] = fmaf( x[12], La[22], Lb[1]);
	Lb[1] = fmaf( x[4], La[10], Lb[1]);
	Lb[1] = fmaf( x[18], La[28], Lb[1]);
	Lb[1] = fmaf( x[13], La[23], Lb[1]);
	Lb[1] = fmaf( x[28], La[43], Lb[1]);
	Lb[1] = fmaf( x[15], La[25], Lb[1]);
	Lb[1] = fmaf( x[7], La[13], Lb[1]);
	Lb[1] = fmaf( x[17], La[27], Lb[1]);
	Lb[1] *= T(5.000000000e-01);
	Lb[1] = fmaf( x[14], La[24], Lb[1]);
	Lb[1] = fmaf( x[5], La[11], Lb[1]);
	Lb[1] = fmaf( x[3], La[6], Lb[1]);
	Lb[1] = fmaf( x[6], La[12], Lb[1]);
	Lb[1] = fmaf( x[1], La[4], Lb[1]);
	Lb[1] = fmaf( x[8], La[14], Lb[1]);
	Lb[1] = fmaf( x[2], La[5], Lb[1]);
	Lb[2] *= T(2.400000000e+01);
	Lb[2] = fmaf( x[20], La[36], Lb[2]);
	Lb[2] = fmaf( x[34], La[54], Lb[2]);
	Lb[2] = fmaf( x[30], La[50], Lb[2]);
	Lb[2] *= T(2.500000000e-01);
	Lb[2] = fmaf( x[29], La[48], Lb[2]);
	Lb[2] = fmaf( x[21], La[38], Lb[2]);
	Lb[2] = fmaf( x[22], La[39], Lb[2]);
	Lb[2] = fmaf( x[10], La[21], Lb[2]);
	Lb[2] = fmaf( x[26], La[45], Lb[2]);
	Lb[2] = fmaf( x[31], La[51], Lb[2]);
	Lb[2] = fmaf( x[16], La[30], Lb[2]);
	Lb[2] = fmaf( x[19], La[33], Lb[2]);
	Lb[2] = fmaf( x[33], La[53], Lb[2]);
	Lb[2] *= T(6.666666667e-01);
	Lb[2] = fmaf( x[23], La[41], Lb[2]);
	Lb[2] = fmaf( x[25], La[43], Lb[2]);
	Lb[2] = fmaf( x[32], La[52], Lb[2]);
	Lb[2] *= T(5.000000000e-01);
	Lb[2] = fmaf( x[27], La[46], Lb[2]);
	Lb[2] = fmaf( x[9], La[18], Lb[2]);
	Lb[2] = fmaf( x[24], La[42], Lb[2]);
	Lb[2] = fmaf( x[11], La[23], Lb[2]);
	Lb[2] = fmaf( x[12], La[24], Lb[2]);
	Lb[2] = fmaf( x[4], La[11], Lb[2]);
	Lb[2] = fmaf( x[18], La[32], Lb[2]);
	Lb[2] = fmaf( x[13], La[26], Lb[2]);
	Lb[2] = fmaf( x[28], La[47], Lb[2]);
	Lb[2] = fmaf( x[15], La[28], Lb[2]);
	Lb[2] = fmaf( x[7], La[16], Lb[2]);
	Lb[2] = fmaf( x[17], La[31], Lb[2]);
	Lb[2] *= T(5.000000000e-01);
	Lb[2] = fmaf( x[14], La[27], Lb[2]);
	Lb[2] = fmaf( x[5], La[13], Lb[2]);
	Lb[2] = fmaf( x[3], La[8], Lb[2]);
	Lb[2] = fmaf( x[6], La[14], Lb[2]);
	Lb[2] = fmaf( x[1], La[5], Lb[2]);
	Lb[2] = fmaf( x[8], La[17], Lb[2]);
	Lb[2] = fmaf( x[2], La[7], Lb[2]);
	Lb[3] *= T(2.400000000e+01);
	Lb[3] = fmaf( x[20], La[37], Lb[3]);
	Lb[3] = fmaf( x[34], La[55], Lb[3]);
	Lb[3] = fmaf( x[30], La[51], Lb[3]);
	Lb[3] *= T(2.500000000e-01);
	Lb[3] = fmaf( x[29], La[49], Lb[3]);
	Lb[3] = fmaf( x[21], La[39], Lb[3]);
	Lb[3] = fmaf( x[22], La[40], Lb[3]);
	Lb[3] = fmaf( x[10], La[22], Lb[3]);
	Lb[3] = fmaf( x[26], La[46], Lb[3]);
	Lb[3] = fmaf( x[31], La[52], Lb[3]);
	Lb[3] = fmaf( x[16], La[31], Lb[3]);
	Lb[3] = fmaf( x[19], La[34], Lb[3]);
	Lb[3] = fmaf( x[33], La[54], Lb[3]);
	Lb[3] *= T(6.666666667e-01);
	Lb[3] = fmaf( x[23], La[42], Lb[3]);
	Lb[3] = fmaf( x[25], La[44], Lb[3]);
	Lb[3] = fmaf( x[32], La[53], Lb[3]);
	Lb[3] *= T(5.000000000e-01);
	Lb[3] = fmaf( x[27], La[47], Lb[3]);
	Lb[3] = fmaf( x[9], La[19], Lb[3]);
	Lb[3] = fmaf( x[24], La[43], Lb[3]);
	Lb[3] = fmaf( x[11], La[24], Lb[3]);
	Lb[3] = fmaf( x[12], La[25], Lb[3]);
	Lb[3] = fmaf( x[4], La[12], Lb[3]);
	Lb[3] = fmaf( x[18], La[33], Lb[3]);
	Lb[3] = fmaf( x[13], La[27], Lb[3]);
	Lb[3] = fmaf( x[28], La[48], Lb[3]);
	Lb[3] = fmaf( x[15], La[29], Lb[3]);
	Lb[3] = fmaf( x[7], La[17], Lb[3]);
	Lb[3] = fmaf( x[17], La[32], Lb[3]);
	Lb[3] *= T(5.000000000e-01);
	Lb[3] = fmaf( x[14], La[28], Lb[3]);
	Lb[3] = fmaf( x[5], La[14], Lb[3]);
	Lb[3] = fmaf( x[3], La[9], Lb[3]);
	Lb[3] = fmaf( x[6], La[15], Lb[3]);
	Lb[3] = fmaf( x[1], La[6], Lb[3]);
	Lb[3] = fmaf( x[8], La[18], Lb[3]);
	Lb[3] = fmaf( x[2], La[8], Lb[3]);
	Lb[4] *= T(6.000000000e+00);
	Lb[4] = fmaf( x[10], La[35], Lb[4]);
	Lb[4] = fmaf( x[19], La[44], Lb[4]);
	Lb[4] = fmaf( x[16], La[41], Lb[4]);
	Lb[4] *= T(3.333333333e-01);
	Lb[4] = fmaf( x[9], La[25], Lb[4]);
	Lb[4] = fmaf( x[11], La[36], Lb[4]);
	Lb[4] = fmaf( x[12], La[37], Lb[4]);
	Lb[4] = fmaf( x[4], La[20], Lb[4]);
	Lb[4] = fmaf( x[13], La[38], Lb[4]);
	Lb[4] = fmaf( x[15], La[40], Lb[4]);
	Lb[4] = fmaf( x[17], La[42], Lb[4]);
	Lb[4] = fmaf( x[7], La[23], Lb[4]);
	Lb[4] = fmaf( x[18], La[43], Lb[4]);
	Lb[4] *= T(5.000000000e-01);
	Lb[4] = fmaf( x[1], La[10], Lb[4]);
	Lb[4] = fmaf( x[6], La[22], Lb[4]);
	Lb[4] = fmaf( x[5], La[21], Lb[4]);
	Lb[4] = fmaf( x[14], La[39], Lb[4]);
	Lb[4] = fmaf( x[8], La[24], Lb[4]);
	Lb[4] = fmaf( x[2], La[11], Lb[4]);
	Lb[4] = fmaf( x[3], La[12], Lb[4]);
	Lb[5] *= T(6.000000000e+00);
	Lb[5] = fmaf( x[10], La[36], Lb[5]);
	Lb[5] = fmaf( x[19], La[48], Lb[5]);
	Lb[5] = fmaf( x[16], La[45], Lb[5]);
	Lb[5] *= T(3.333333333e-01);
	Lb[5] = fmaf( x[9], La[28], Lb[5]);
	Lb[5] = fmaf( x[11], La[38], Lb[5]);
	Lb[5] = fmaf( x[12], La[39], Lb[5]);
	Lb[5] = fmaf( x[4], La[21], Lb[5]);
	Lb[5] = fmaf( x[13], La[41], Lb[5]);
	Lb[5] = fmaf( x[15], La[43], Lb[5]);
	Lb[5] = fmaf( x[17], La[46], Lb[5]);
	Lb[5] = fmaf( x[7], La[26], Lb[5]);
	Lb[5] = fmaf( x[18], La[47], Lb[5]);
	Lb[5] *= T(5.000000000e-01);
	Lb[5] = fmaf( x[1], La[11], Lb[5]);
	Lb[5] = fmaf( x[6], La[24], Lb[5]);
	Lb[5] = fmaf( x[5], La[23], Lb[5]);
	Lb[5] = fmaf( x[14], La[42], Lb[5]);
	Lb[5] = fmaf( x[8], La[27], Lb[5]);
	Lb[5] = fmaf( x[2], La[13], Lb[5]);
	Lb[5] = fmaf( x[3], La[14], Lb[5]);
	Lb[6] *= T(6.000000000e+00);
	Lb[6] = fmaf( x[10], La[37], Lb[6]);
	Lb[6] = fmaf( x[19], La[49], Lb[6]);
	Lb[6] = fmaf( x[16], La[46], Lb[6]);
	Lb[6] *= T(3.333333333e-01);
	Lb[6] = fmaf( x[9], La[29], Lb[6]);
	Lb[6] = fmaf( x[11], La[39], Lb[6]);
	Lb[6] = fmaf( x[12], La[40], Lb[6]);
	Lb[6] = fmaf( x[4], La[22], Lb[6]);
	Lb[6] = fmaf( x[13], La[42], Lb[6]);
	Lb[6] = fmaf( x[15], La[44], Lb[6]);
	Lb[6] = fmaf( x[17], La[47], Lb[6]);
	Lb[6] = fmaf( x[7], La[27], Lb[6]);
	Lb[6] = fmaf( x[18], La[48], Lb[6]);
	Lb[6] *= T(5.000000000e-01);
	Lb[6] = fmaf( x[1], La[12], Lb[6]);
	Lb[6] = fmaf( x[6], La[25], Lb[6]);
	Lb[6] = fmaf( x[5], La[24], Lb[6]);
	Lb[6] = fmaf( x[14], La[43], Lb[6]);
	Lb[6] = fmaf( x[8], La[28], Lb[6]);
	Lb[6] = fmaf( x[2], La[14], Lb[6]);
	Lb[6] = fmaf( x[3], La[15], Lb[6]);
	Lb[7] *= T(6.000000000e+00);
	Lb[7] = fmaf( x[10], La[38], Lb[7]);
	Lb[7] = fmaf( x[19], La[53], Lb[7]);
	Lb[7] = fmaf( x[16], La[50], Lb[7]);
	Lb[7] *= T(3.333333333e-01);
	Lb[7] = fmaf( x[9], La[32], Lb[7]);
	Lb[7] = fmaf( x[11], La[41], Lb[7]);
	Lb[7] = fmaf( x[12], La[42], Lb[7]);
	Lb[7] = fmaf( x[4], La[23], Lb[7]);
	Lb[7] = fmaf( x[13], La[45], Lb[7]);
	Lb[7] = fmaf( x[15], La[47], Lb[7]);
	Lb[7] = fmaf( x[17], La[51], Lb[7]);
	Lb[7] = fmaf( x[7], La[30], Lb[7]);
	Lb[7] = fmaf( x[18], La[52], Lb[7]);
	Lb[7] *= T(5.000000000e-01);
	Lb[7] = fmaf( x[1], La[13], Lb[7]);
	Lb[7] = fmaf( x[6], La[27], Lb[7]);
	Lb[7] = fmaf( x[5], La[26], Lb[7]);
	Lb[7] = fmaf( x[14], La[46], Lb[7]);
	Lb[7] = fmaf( x[8], La[31], Lb[7]);
	Lb[7] = fmaf( x[2], La[16], Lb[7]);
	Lb[7] = fmaf( x[3], La[17], Lb[7]);
	Lb[8] *= T(6.000000000e+00);
	Lb[8] = fmaf( x[10], La[39], Lb[8]);
	Lb[8] = fmaf( x[19], La[54], Lb[8]);
	Lb[8] = fmaf( x[16], La[51], Lb[8]);
	Lb[8] *= T(3.333333333e-01);
	Lb[8] = fmaf( x[9], La[33], Lb[8]);
	Lb[8] = fmaf( x[11], La[42], Lb[8]);
	Lb[8] = fmaf( x[12], La[43], Lb[8]);
	Lb[8] = fmaf( x[4], La[24], Lb[8]);
	Lb[8] = fmaf( x[13], La[46], Lb[8]);
	Lb[8] = fmaf( x[15], La[48], Lb[8]);
	Lb[8] = fmaf( x[17], La[52], Lb[8]);
	Lb[8] = fmaf( x[7], La[31], Lb[8]);
	Lb[8] = fmaf( x[18], La[53], Lb[8]);
	Lb[8] *= T(5.000000000e-01);
	Lb[8] = fmaf( x[1], La[14], Lb[8]);
	Lb[8] = fmaf( x[6], La[28], Lb[8]);
	Lb[8] = fmaf( x[5], La[27], Lb[8]);
	Lb[8] = fmaf( x[14], La[47], Lb[8]);
	Lb[8] = fmaf( x[8], La[32], Lb[8]);
	Lb[8] = fmaf( x[2], La[17], Lb[8]);
	Lb[8] = fmaf( x[3], La[18], Lb[8]);
	Lb[9] *= T(6.000000000e+00);
	Lb[9] = fmaf( x[10], La[40], Lb[9]);
	Lb[9] = fmaf( x[19], La[55], Lb[9]);
	Lb[9] = fmaf( x[16], La[52], Lb[9]);
	Lb[9] *= T(3.333333333e-01);
	Lb[9] = fmaf( x[9], La[34], Lb[9]);
	Lb[9] = fmaf( x[11], La[43], Lb[9]);
	Lb[9] = fmaf( x[12], La[44], Lb[9]);
	Lb[9] = fmaf( x[4], La[25], Lb[9]);
	Lb[9] = fmaf( x[13], La[47], Lb[9]);
	Lb[9] = fmaf( x[15], La[49], Lb[9]);
	Lb[9] = fmaf( x[17], La[53], Lb[9]);
	Lb[9] = fmaf( x[7], La[32], Lb[9]);
	Lb[9] = fmaf( x[18], La[54], Lb[9]);
	Lb[9] *= T(5.000000000e-01);
	Lb[9] = fmaf( x[1], La[15], Lb[9]);
	Lb[9] = fmaf( x[6], La[29], Lb[9]);
	Lb[9] = fmaf( x[5], La[28], Lb[9]);
	Lb[9] = fmaf( x[14], La[48], Lb[9]);
	Lb[9] = fmaf( x[8], La[33], Lb[9]);
	Lb[9] = fmaf( x[2], La[18], Lb[9]);
	Lb[9] = fmaf( x[3], La[19], Lb[9]);
	Lb[10] *= T(2.000000000e+00);
	Lb[10] = fmaf( x[9], La[40], Lb[10]);
	Lb[10] = fmaf( x[7], La[38], Lb[10]);
	Lb[10] = fmaf( x[4], La[35], Lb[10]);
	Lb[10] *= T(5.000000000e-01);
	Lb[10] = fmaf( x[3], La[22], Lb[10]);
	Lb[10] = fmaf( x[2], La[21], Lb[10]);
	Lb[10] = fmaf( x[8], La[39], Lb[10]);
	Lb[10] = fmaf( x[1], La[20], Lb[10]);
	Lb[10] = fmaf( x[6], La[37], Lb[10]);
	Lb[10] = fmaf( x[5], La[36], Lb[10]);
	Lb[11] *= T(2.000000000e+00);
	Lb[11] = fmaf( x[9], La[43], Lb[11]);
	Lb[11] = fmaf( x[7], La[41], Lb[11]);
	Lb[11] = fmaf( x[4], La[36], Lb[11]);
	Lb[11] *= T(5.000000000e-01);
	Lb[11] = fmaf( x[3], La[24], Lb[11]);
	Lb[11] = fmaf( x[2], La[23], Lb[11]);
	Lb[11] = fmaf( x[8], La[42], Lb[11]);
	Lb[11] = fmaf( x[1], La[21], Lb[11]);
	Lb[11] = fmaf( x[6], La[39], Lb[11]);
	Lb[11] = fmaf( x[5], La[38], Lb[11]);
	Lb[12] *= T(2.000000000e+00);
	Lb[12] = fmaf( x[9], La[44], Lb[12]);
	Lb[12] = fmaf( x[7], La[42], Lb[12]);
	Lb[12] = fmaf( x[4], La[37], Lb[12]);
	Lb[12] *= T(5.000000000e-01);
	Lb[12] = fmaf( x[3], La[25], Lb[12]);
	Lb[12] = fmaf( x[2], La[24], Lb[12]);
	Lb[12] = fmaf( x[8], La[43], Lb[12]);
	Lb[12] = fmaf( x[1], La[22], Lb[12]);
	Lb[12] = fmaf( x[6], La[40], Lb[12]);
	Lb[12] = fmaf( x[5], La[39], Lb[12]);
	Lb[13] *= T(2.000000000e+00);
	Lb[13] = fmaf( x[9], La[47], Lb[13]);
	Lb[13] = fmaf( x[7], La[45], Lb[13]);
	Lb[13] = fmaf( x[4], La[38], Lb[13]);
	Lb[13] *= T(5.000000000e-01);
	Lb[13] = fmaf( x[3], La[27], Lb[13]);
	Lb[13] = fmaf( x[2], La[26], Lb[13]);
	Lb[13] = fmaf( x[8], La[46], Lb[13]);
	Lb[13] = fmaf( x[1], La[23], Lb[13]);
	Lb[13] = fmaf( x[6], La[42], Lb[13]);
	Lb[13] = fmaf( x[5], La[41], Lb[13]);
	Lb[14] *= T(2.000000000e+00);
	Lb[14] = fmaf( x[9], La[48], Lb[14]);
	Lb[14] = fmaf( x[7], La[46], Lb[14]);
	Lb[14] = fmaf( x[4], La[39], Lb[14]);
	Lb[14] *= T(5.000000000e-01);
	Lb[14] = fmaf( x[3], La[28], Lb[14]);
	Lb[14] = fmaf( x[2], La[27], Lb[14]);
	Lb[14] = fmaf( x[8], La[47], Lb[14]);
	Lb[14] = fmaf( x[1], La[24], Lb[14]);
	Lb[14] = fmaf( x[6], La[43], Lb[14]);
	Lb[14] = fmaf( x[5], La[42], Lb[14]);
	Lb[15] *= T(2.000000000e+00);
	Lb[15] = fmaf( x[9], La[49], Lb[15]);
	Lb[15] = fmaf( x[7], La[47], Lb[15]);
	Lb[15] = fmaf( x[4], La[40], Lb[15]);
	Lb[15] *= T(5.000000000e-01);
	Lb[15] = fmaf( x[3], La[29], Lb[15]);
	Lb[15] = fmaf( x[2], La[28], Lb[15]);
	Lb[15] = fmaf( x[8], La[48], Lb[15]);
	Lb[15] = fmaf( x[1], La[25], Lb[15]);
	Lb[15] = fmaf( x[6], La[44], Lb[15]);
	Lb[15] = fmaf( x[5], La[43], Lb[15]);
	Lb[16] *= T(2.000000000e+00);
	Lb[16] = fmaf( x[9], La[52], Lb[16]);
	Lb[16] = fmaf( x[7], La[50], Lb[16]);
	Lb[16] = fmaf( x[4], La[41], Lb[16]);
	Lb[16] *= T(5.000000000e-01);
	Lb[16] = fmaf( x[3], La[31], Lb[16]);
	Lb[16] = fmaf( x[2], La[30], Lb[16]);
	Lb[16] = fmaf( x[8], La[51], Lb[16]);
	Lb[16] = fmaf( x[1], La[26], Lb[16]);
	Lb[16] = fmaf( x[6], La[46], Lb[16]);
	Lb[16] = fmaf( x[5], La[45], Lb[16]);
	Lb[17] *= T(2.000000000e+00);
	Lb[17] = fmaf( x[9], La[53], Lb[17]);
	Lb[17] = fmaf( x[7], La[51], Lb[17]);
	Lb[17] = fmaf( x[4], La[42], Lb[17]);
	Lb[17] *= T(5.000000000e-01);
	Lb[17] = fmaf( x[3], La[32], Lb[17]);
	Lb[17] = fmaf( x[2], La[31], Lb[17]);
	Lb[17] = fmaf( x[8], La[52], Lb[17]);
	Lb[17] = fmaf( x[1], La[27], Lb[17]);
	Lb[17] = fmaf( x[6], La[47], Lb[17]);
	Lb[17] = fmaf( x[5], La[46], Lb[17]);
	Lb[18] *= T(2.000000000e+00);
	Lb[18] = fmaf( x[9], La[54], Lb[18]);
	Lb[18] = fmaf( x[7], La[52], Lb[18]);
	Lb[18] = fmaf( x[4], La[43], Lb[18]);
	Lb[18] *= T(5.000000000e-01);
	Lb[18] = fmaf( x[3], La[33], Lb[18]);
	Lb[18] = fmaf( x[2], La[32], Lb[18]);
	Lb[18] = fmaf( x[8], La[53], Lb[18]);
	Lb[18] = fmaf( x[1], La[28], Lb[18]);
	Lb[18] = fmaf( x[6], La[48], Lb[18]);
	Lb[18] = fmaf( x[5], La[47], Lb[18]);
	Lb[19] *= T(2.000000000e+00);
	Lb[19] = fmaf( x[9], La[55], Lb[19]);
	Lb[19] = fmaf( x[7], La[53], Lb[19]);
	Lb[19] = fmaf( x[4], La[44], Lb[19]);
	Lb[19] *= T(5.000000000e-01);
	Lb[19] = fmaf( x[3], La[34], Lb[19]);
	Lb[19] = fmaf( x[2], La[33], Lb[19]);
	Lb[19] = fmaf( x[8], La[54], Lb[19]);
	Lb[19] = fmaf( x[1], La[29], Lb[19]);
	Lb[19] = fmaf( x[6], La[49], Lb[19]);
	Lb[19] = fmaf( x[5], La[48], Lb[19]);
	Lb[20] = fmaf( x[3], La[37], Lb[20]);
	Lb[20] = fmaf( x[2], La[36], Lb[20]);
	Lb[20] = fmaf( x[1], La[35], Lb[20]);
	Lb[21] = fmaf( x[3], La[39], Lb[21]);
	Lb[21] = fmaf( x[2], La[38], Lb[21]);
	Lb[21] = fmaf( x[1], La[36], Lb[21]);
	Lb[22] = fmaf( x[3], La[40], Lb[22]);
	Lb[22] = fmaf( x[2], La[39], Lb[22]);
	Lb[22] = fmaf( x[1], La[37], Lb[22]);
	Lb[23] = fmaf( x[3], La[42], Lb[23]);
	Lb[23] = fmaf( x[2], La[41], Lb[23]);
	Lb[23] = fmaf( x[1], La[38], Lb[23]);
	Lb[24] = fmaf( x[3], La[43], Lb[24]);
	Lb[24] = fmaf( x[2], La[42], Lb[24]);
	Lb[24] = fmaf( x[1], La[39], Lb[24]);
	Lb[25] = fmaf( x[3], La[44], Lb[25]);
	Lb[25] = fmaf( x[2], La[43], Lb[25]);
	Lb[25] = fmaf( x[1], La[40], Lb[25]);
	Lb[26] = fmaf( x[3], La[46], Lb[26]);
	Lb[26] = fmaf( x[2], La[45], Lb[26]);
	Lb[26] = fmaf( x[1], La[41], Lb[26]);
	Lb[27] = fmaf( x[3], La[47], Lb[27]);
	Lb[27] = fmaf( x[2], La[46], Lb[27]);
	Lb[27] = fmaf( x[1], La[42], Lb[27]);
	Lb[28] = fmaf( x[3], La[48], Lb[28]);
	Lb[28] = fmaf( x[2], La[47], Lb[28]);
	Lb[28] = fmaf( x[1], La[43], Lb[28]);
	Lb[29] = fmaf( x[3], La[49], Lb[29]);
	Lb[29] = fmaf( x[2], La[48], Lb[29]);
	Lb[29] = fmaf( x[1], La[44], Lb[29]);
	Lb[30] = fmaf( x[3], La[51], Lb[30]);
	Lb[30] = fmaf( x[2], La[50], Lb[30]);
	Lb[30] = fmaf( x[1], La[45], Lb[30]);
	Lb[31] = fmaf( x[3], La[52], Lb[31]);
	Lb[31] = fmaf( x[2], La[51], Lb[31]);
	Lb[31] = fmaf( x[1], La[46], Lb[31]);
	Lb[32] = fmaf( x[3], La[53], Lb[32]);
	Lb[32] = fmaf( x[2], La[52], Lb[32]);
	Lb[32] = fmaf( x[1], La[47], Lb[32]);
	Lb[33] = fmaf( x[3], La[54], Lb[33]);
	Lb[33] = fmaf( x[2], La[53], Lb[33]);
	Lb[33] = fmaf( x[1], La[48], Lb[33]);
	Lb[34] = fmaf( x[3], La[55], Lb[34]);
	Lb[34] = fmaf( x[2], La[54], Lb[34]);
	Lb[34] = fmaf( x[1], La[49], Lb[34]);
	return Lb;
/* FLOPS = 810 + do_phi * 118*/
}

template<class T>
CUDA_EXPORT
#ifdef __CUDACC__
__noinline__
#endif
tensor_sym<T, 2> L2P(const tensor_sym<T, 6>& La, array<T,NDIM> X, bool do_phi) {
	tensor_sym<T, 2> Lb;
	T x[56];
	x[0] = T(1);
	x[1] = X[0];
	x[2] = X[1];
	x[3] = X[2];
	x[9] = x[3] * x[3];
	x[8] = x[2] * x[3];
	x[7] = x[2] * x[2];
	x[6] = x[1] * x[3];
	x[5] = x[1] * x[2];
	x[4] = x[1] * x[1];
	x[19] = x[9] * x[3];
	x[18] = x[8] * x[3];
	x[17] = x[8] * x[2];
	x[16] = x[7] * x[2];
	x[15] = x[6] * x[3];
	x[14] = x[5] * x[3];
	x[13] = x[5] * x[2];
	x[12] = x[6] * x[1];
	x[11] = x[5] * x[1];
	x[10] = x[4] * x[1];
	x[34] = x[9] * x[9];
	x[33] = x[8] * x[9];
	x[32] = x[8] * x[8];
	x[31] = x[8] * x[7];
	x[30] = x[7] * x[7];
	x[29] = x[6] * x[9];
	x[28] = x[5] * x[9];
	x[27] = x[5] * x[8];
	x[26] = x[5] * x[7];
	x[25] = x[6] * x[6];
	x[24] = x[5] * x[6];
	x[23] = x[5] * x[5];
	x[22] = x[6] * x[4];
	x[21] = x[5] * x[4];
	x[20] = x[4] * x[4];
	x[55] = x[19] * x[9];
	x[54] = x[18] * x[9];
	x[53] = x[17] * x[9];
	x[52] = x[17] * x[8];
	x[51] = x[17] * x[7];
	x[50] = x[16] * x[7];
	x[49] = x[15] * x[9];
	x[48] = x[14] * x[9];
	x[47] = x[14] * x[8];
	x[46] = x[14] * x[7];
	x[45] = x[13] * x[7];
	x[44] = x[12] * x[9];
	x[43] = x[14] * x[6];
	x[42] = x[14] * x[5];
	x[41] = x[11] * x[7];
	x[40] = x[12] * x[6];
	x[39] = x[14] * x[4];
	x[38] = x[11] * x[5];
	x[37] = x[12] * x[4];
	x[36] = x[11] * x[4];
	x[35] = x[10] * x[4];
	Lb[0] = La[0];
	Lb[1] = La[1];
	Lb[2] = La[2];
	Lb[3] = La[3];
	if( do_phi ) {
		Lb[0] *= T(1.200000000e+02);
		Lb[0] = fmaf( x[35], La[35], Lb[0]);
		Lb[0] = fmaf( x[50], La[50], Lb[0]);
		Lb[0] = fmaf( x[55], La[55], Lb[0]);
		Lb[0] *= T(2.000000000e-01);
		Lb[0] = fmaf( x[36], La[36], Lb[0]);
		Lb[0] = fmaf( x[37], La[37], Lb[0]);
		Lb[0] = fmaf( x[20], La[20], Lb[0]);
		Lb[0] = fmaf( x[45], La[45], Lb[0]);
		Lb[0] = fmaf( x[54], La[54], Lb[0]);
		Lb[0] = fmaf( x[49], La[49], Lb[0]);
		Lb[0] = fmaf( x[34], La[34], Lb[0]);
		Lb[0] = fmaf( x[51], La[51], Lb[0]);
		Lb[0] = fmaf( x[30], La[30], Lb[0]);
		Lb[0] *= T(5.000000000e-01);
		Lb[0] = fmaf( x[40], La[40], Lb[0]);
		Lb[0] = fmaf( x[44], La[44], Lb[0]);
		Lb[0] = fmaf( x[41], La[41], Lb[0]);
		Lb[0] = fmaf( x[52], La[52], Lb[0]);
		Lb[0] = fmaf( x[53], La[53], Lb[0]);
		Lb[0] = fmaf( x[38], La[38], Lb[0]);
		Lb[0] *= T(5.000000000e-01);
		Lb[0] = fmaf( x[16], La[16], Lb[0]);
		Lb[0] = fmaf( x[19], La[19], Lb[0]);
		Lb[0] = fmaf( x[33], La[33], Lb[0]);
		Lb[0] = fmaf( x[46], La[46], Lb[0]);
		Lb[0] = fmaf( x[26], La[26], Lb[0]);
		Lb[0] = fmaf( x[48], La[48], Lb[0]);
		Lb[0] = fmaf( x[10], La[10], Lb[0]);
		Lb[0] = fmaf( x[39], La[39], Lb[0]);
		Lb[0] = fmaf( x[29], La[29], Lb[0]);
		Lb[0] = fmaf( x[22], La[22], Lb[0]);
		Lb[0] = fmaf( x[21], La[21], Lb[0]);
		Lb[0] = fmaf( x[31], La[31], Lb[0]);
		Lb[0] *= T(6.666666667e-01);
		Lb[0] = fmaf( x[42], La[42], Lb[0]);
		Lb[0] = fmaf( x[23], La[23], Lb[0]);
		Lb[0] = fmaf( x[43], La[43], Lb[0]);
		Lb[0] = fmaf( x[47], La[47], Lb[0]);
		Lb[0] = fmaf( x[32], La[32], Lb[0]);
		Lb[0] = fmaf( x[25], La[25], Lb[0]);
		Lb[0] *= T(5.000000000e-01);
		Lb[0] = fmaf( x[28], La[28], Lb[0]);
		Lb[0] = fmaf( x[24], La[24], Lb[0]);
		Lb[0] = fmaf( x[11], La[11], Lb[0]);
		Lb[0] = fmaf( x[12], La[12], Lb[0]);
		Lb[0] = fmaf( x[4], La[4], Lb[0]);
		Lb[0] = fmaf( x[27], La[27], Lb[0]);
		Lb[0] = fmaf( x[13], La[13], Lb[0]);
		Lb[0] = fmaf( x[15], La[15], Lb[0]);
		Lb[0] = fmaf( x[17], La[17], Lb[0]);
		Lb[0] = fmaf( x[7], La[7], Lb[0]);
		Lb[0] = fmaf( x[18], La[18], Lb[0]);
		Lb[0] = fmaf( x[9], La[9], Lb[0]);
		Lb[0] *= T(5.000000000e-01);
		Lb[0] = fmaf( x[3], La[3], Lb[0]);
		Lb[0] = fmaf( x[14], La[14], Lb[0]);
		Lb[0] = fmaf( x[5], La[5], Lb[0]);
		Lb[0] = fmaf( x[6], La[6], Lb[0]);
		Lb[0] = fmaf( x[1], La[1], Lb[0]);
		Lb[0] = fmaf( x[8], La[8], Lb[0]);
		Lb[0] = fmaf( x[2], La[2], Lb[0]);
	}
	Lb[1] *= T(2.400000000e+01);
	Lb[1] = fmaf( x[20], La[35], Lb[1]);
	Lb[1] = fmaf( x[34], La[49], Lb[1]);
	Lb[1] = fmaf( x[30], La[45], Lb[1]);
	Lb[1] *= T(2.500000000e-01);
	Lb[1] = fmaf( x[29], La[44], Lb[1]);
	Lb[1] = fmaf( x[21], La[36], Lb[1]);
	Lb[1] = fmaf( x[22], La[37], Lb[1]);
	Lb[1] = fmaf( x[10], La[20], Lb[1]);
	Lb[1] = fmaf( x[26], La[41], Lb[1]);
	Lb[1] = fmaf( x[31], La[46], Lb[1]);
	Lb[1] = fmaf( x[16], La[26], Lb[1]);
	Lb[1] = fmaf( x[19], La[29], Lb[1]);
	Lb[1] = fmaf( x[33], La[48], Lb[1]);
	Lb[1] *= T(6.666666667e-01);
	Lb[1] = fmaf( x[23], La[38], Lb[1]);
	Lb[1] = fmaf( x[25], La[40], Lb[1]);
	Lb[1] = fmaf( x[32], La[47], Lb[1]);
	Lb[1] *= T(5.000000000e-01);
	Lb[1] = fmaf( x[27], La[42], Lb[1]);
	Lb[1] = fmaf( x[9], La[15], Lb[1]);
	Lb[1] = fmaf( x[24], La[39], Lb[1]);
	Lb[1] = fmaf( x[11], La[21], Lb[1]);
	Lb[1] = fmaf( x[12], La[22], Lb[1]);
	Lb[1] = fmaf( x[4], La[10], Lb[1]);
	Lb[1] = fmaf( x[18], La[28], Lb[1]);
	Lb[1] = fmaf( x[13], La[23], Lb[1]);
	Lb[1] = fmaf( x[28], La[43], Lb[1]);
	Lb[1] = fmaf( x[15], La[25], Lb[1]);
	Lb[1] = fmaf( x[7], La[13], Lb[1]);
	Lb[1] = fmaf( x[17], La[27], Lb[1]);
	Lb[1] *= T(5.000000000e-01);
	Lb[1] = fmaf( x[14], La[24], Lb[1]);
	Lb[1] = fmaf( x[5], La[11], Lb[1]);
	Lb[1] = fmaf( x[3], La[6], Lb[1]);
	Lb[1] = fmaf( x[6], La[12], Lb[1]);
	Lb[1] = fmaf( x[1], La[4], Lb[1]);
	Lb[1] = fmaf( x[8], La[14], Lb[1]);
	Lb[1] = fmaf( x[2], La[5], Lb[1]);
	Lb[2] *= T(2.400000000e+01);
	Lb[2] = fmaf( x[20], La[36], Lb[2]);
	Lb[2] = fmaf( x[34], La[54], Lb[2]);
	Lb[2] = fmaf( x[30], La[50], Lb[2]);
	Lb[2] *= T(2.500000000e-01);
	Lb[2] = fmaf( x[29], La[48], Lb[2]);
	Lb[2] = fmaf( x[21], La[38], Lb[2]);
	Lb[2] = fmaf( x[22], La[39], Lb[2]);
	Lb[2] = fmaf( x[10], La[21], Lb[2]);
	Lb[2] = fmaf( x[26], La[45], Lb[2]);
	Lb[2] = fmaf( x[31], La[51], Lb[2]);
	Lb[2] = fmaf( x[16], La[30], Lb[2]);
	Lb[2] = fmaf( x[19], La[33], Lb[2]);
	Lb[2] = fmaf( x[33], La[53], Lb[2]);
	Lb[2] *= T(6.666666667e-01);
	Lb[2] = fmaf( x[23], La[41], Lb[2]);
	Lb[2] = fmaf( x[25], La[43], Lb[2]);
	Lb[2] = fmaf( x[32], La[52], Lb[2]);
	Lb[2] *= T(5.000000000e-01);
	Lb[2] = fmaf( x[27], La[46], Lb[2]);
	Lb[2] = fmaf( x[9], La[18], Lb[2]);
	Lb[2] = fmaf( x[24], La[42], Lb[2]);
	Lb[2] = fmaf( x[11], La[23], Lb[2]);
	Lb[2] = fmaf( x[12], La[24], Lb[2]);
	Lb[2] = fmaf( x[4], La[11], Lb[2]);
	Lb[2] = fmaf( x[18], La[32], Lb[2]);
	Lb[2] = fmaf( x[13], La[26], Lb[2]);
	Lb[2] = fmaf( x[28], La[47], Lb[2]);
	Lb[2] = fmaf( x[15], La[28], Lb[2]);
	Lb[2] = fmaf( x[7], La[16], Lb[2]);
	Lb[2] = fmaf( x[17], La[31], Lb[2]);
	Lb[2] *= T(5.000000000e-01);
	Lb[2] = fmaf( x[14], La[27], Lb[2]);
	Lb[2] = fmaf( x[5], La[13], Lb[2]);
	Lb[2] = fmaf( x[3], La[8], Lb[2]);
	Lb[2] = fmaf( x[6], La[14], Lb[2]);
	Lb[2] = fmaf( x[1], La[5], Lb[2]);
	Lb[2] = fmaf( x[8], La[17], Lb[2]);
	Lb[2] = fmaf( x[2], La[7], Lb[2]);
	Lb[3] *= T(2.400000000e+01);
	Lb[3] = fmaf( x[20], La[37], Lb[3]);
	Lb[3] = fmaf( x[34], La[55], Lb[3]);
	Lb[3] = fmaf( x[30], La[51], Lb[3]);
	Lb[3] *= T(2.500000000e-01);
	Lb[3] = fmaf( x[29], La[49], Lb[3]);
	Lb[3] = fmaf( x[21], La[39], Lb[3]);
	Lb[3] = fmaf( x[22], La[40], Lb[3]);
	Lb[3] = fmaf( x[10], La[22], Lb[3]);
	Lb[3] = fmaf( x[26], La[46], Lb[3]);
	Lb[3] = fmaf( x[31], La[52], Lb[3]);
	Lb[3] = fmaf( x[16], La[31], Lb[3]);
	Lb[3] = fmaf( x[19], La[34], Lb[3]);
	Lb[3] = fmaf( x[33], La[54], Lb[3]);
	Lb[3] *= T(6.666666667e-01);
	Lb[3] = fmaf( x[23], La[42], Lb[3]);
	Lb[3] = fmaf( x[25], La[44], Lb[3]);
	Lb[3] = fmaf( x[32], La[53], Lb[3]);
	Lb[3] *= T(5.000000000e-01);
	Lb[3] = fmaf( x[27], La[47], Lb[3]);
	Lb[3] = fmaf( x[9], La[19], Lb[3]);
	Lb[3] = fmaf( x[24], La[43], Lb[3]);
	Lb[3] = fmaf( x[11], La[24], Lb[3]);
	Lb[3] = fmaf( x[12], La[25], Lb[3]);
	Lb[3] = fmaf( x[4], La[12], Lb[3]);
	Lb[3] = fmaf( x[18], La[33], Lb[3]);
	Lb[3] = fmaf( x[13], La[27], Lb[3]);
	Lb[3] = fmaf( x[28], La[48], Lb[3]);
	Lb[3] = fmaf( x[15], La[29], Lb[3]);
	Lb[3] = fmaf( x[7], La[17], Lb[3]);
	Lb[3] = fmaf( x[17], La[32], Lb[3]);
	Lb[3] *= T(5.000000000e-01);
	Lb[3] = fmaf( x[14], La[28], Lb[3]);
	Lb[3] = fmaf( x[5], La[14], Lb[3]);
	Lb[3] = fmaf( x[3], La[9], Lb[3]);
	Lb[3] = fmaf( x[6], La[15], Lb[3]);
	Lb[3] = fmaf( x[1], La[6], Lb[3]);
	Lb[3] = fmaf( x[8], La[18], Lb[3]);
	Lb[3] = fmaf( x[2], La[8], Lb[3]);
	return Lb;
/* FLOPS = 274 + do_phi * 118*/
}
static __device__ char Ldest1[351] = { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,20,20,20,21,21,21,22,22,22,23,23,23,24,24,24,25,25,25,26,26,26,27,27,27,28,28,28,29,29,29,30,30,30,31,31,31,32,32,32,33,33,33,34,34,34};
static __constant__ float factor1[351] = { float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(5.000000000e-01),float(1.000000000e+00),float(1.000000000e+00),float(5.000000000e-01),float(1.000000000e+00),float(5.000000000e-01),float(1.666666716e-01),float(5.000000000e-01),float(5.000000000e-01),float(5.000000000e-01),float(1.000000000e+00),float(5.000000000e-01),float(1.666666716e-01),float(5.000000000e-01),float(5.000000000e-01),float(1.666666716e-01),float(4.166666791e-02),float(1.666666716e-01),float(1.666666716e-01),float(2.500000000e-01),float(5.000000000e-01),float(2.500000000e-01),float(1.666666716e-01),float(5.000000000e-01),float(5.000000000e-01),float(1.666666716e-01),float(4.166666791e-02),float(1.666666716e-01),float(2.500000000e-01),float(1.666666716e-01),float(4.166666791e-02),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(5.000000000e-01),float(1.000000000e+00),float(1.000000000e+00),float(5.000000000e-01),float(1.000000000e+00),float(5.000000000e-01),float(1.666666716e-01),float(5.000000000e-01),float(5.000000000e-01),float(5.000000000e-01),float(1.000000000e+00),float(5.000000000e-01),float(1.666666716e-01),float(5.000000000e-01),float(5.000000000e-01),float(1.666666716e-01),float(4.166666791e-02),float(1.666666716e-01),float(1.666666716e-01),float(2.500000000e-01),float(5.000000000e-01),float(2.500000000e-01),float(1.666666716e-01),float(5.000000000e-01),float(5.000000000e-01),float(1.666666716e-01),float(4.166666791e-02),float(1.666666716e-01),float(2.500000000e-01),float(1.666666716e-01),float(4.166666791e-02),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(5.000000000e-01),float(1.000000000e+00),float(1.000000000e+00),float(5.000000000e-01),float(1.000000000e+00),float(5.000000000e-01),float(1.666666716e-01),float(5.000000000e-01),float(5.000000000e-01),float(5.000000000e-01),float(1.000000000e+00),float(5.000000000e-01),float(1.666666716e-01),float(5.000000000e-01),float(5.000000000e-01),float(1.666666716e-01),float(4.166666791e-02),float(1.666666716e-01),float(1.666666716e-01),float(2.500000000e-01),float(5.000000000e-01),float(2.500000000e-01),float(1.666666716e-01),float(5.000000000e-01),float(5.000000000e-01),float(1.666666716e-01),float(4.166666791e-02),float(1.666666716e-01),float(2.500000000e-01),float(1.666666716e-01),float(4.166666791e-02),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(5.000000000e-01),float(1.000000000e+00),float(1.000000000e+00),float(5.000000000e-01),float(1.000000000e+00),float(5.000000000e-01),float(1.666666716e-01),float(5.000000000e-01),float(5.000000000e-01),float(5.000000000e-01),float(1.000000000e+00),float(5.000000000e-01),float(1.666666716e-01),float(5.000000000e-01),float(5.000000000e-01),float(1.666666716e-01),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(5.000000000e-01),float(1.000000000e+00),float(1.000000000e+00),float(5.000000000e-01),float(1.000000000e+00),float(5.000000000e-01),float(1.666666716e-01),float(5.000000000e-01),float(5.000000000e-01),float(5.000000000e-01),float(1.000000000e+00),float(5.000000000e-01),float(1.666666716e-01),float(5.000000000e-01),float(5.000000000e-01),float(1.666666716e-01),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(5.000000000e-01),float(1.000000000e+00),float(1.000000000e+00),float(5.000000000e-01),float(1.000000000e+00),float(5.000000000e-01),float(1.666666716e-01),float(5.000000000e-01),float(5.000000000e-01),float(5.000000000e-01),float(1.000000000e+00),float(5.000000000e-01),float(1.666666716e-01),float(5.000000000e-01),float(5.000000000e-01),float(1.666666716e-01),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(5.000000000e-01),float(1.000000000e+00),float(1.000000000e+00),float(5.000000000e-01),float(1.000000000e+00),float(5.000000000e-01),float(1.666666716e-01),float(5.000000000e-01),float(5.000000000e-01),float(5.000000000e-01),float(1.000000000e+00),float(5.000000000e-01),float(1.666666716e-01),float(5.000000000e-01),float(5.000000000e-01),float(1.666666716e-01),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(5.000000000e-01),float(1.000000000e+00),float(1.000000000e+00),float(5.000000000e-01),float(1.000000000e+00),float(5.000000000e-01),float(1.666666716e-01),float(5.000000000e-01),float(5.000000000e-01),float(5.000000000e-01),float(1.000000000e+00),float(5.000000000e-01),float(1.666666716e-01),float(5.000000000e-01),float(5.000000000e-01),float(1.666666716e-01),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(5.000000000e-01),float(1.000000000e+00),float(1.000000000e+00),float(5.000000000e-01),float(1.000000000e+00),float(5.000000000e-01),float(1.666666716e-01),float(5.000000000e-01),float(5.000000000e-01),float(5.000000000e-01),float(1.000000000e+00),float(5.000000000e-01),float(1.666666716e-01),float(5.000000000e-01),float(5.000000000e-01),float(1.666666716e-01),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(5.000000000e-01),float(1.000000000e+00),float(1.000000000e+00),float(5.000000000e-01),float(1.000000000e+00),float(5.000000000e-01),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(5.000000000e-01),float(1.000000000e+00),float(1.000000000e+00),float(5.000000000e-01),float(1.000000000e+00),float(5.000000000e-01),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(5.000000000e-01),float(1.000000000e+00),float(1.000000000e+00),float(5.000000000e-01),float(1.000000000e+00),float(5.000000000e-01),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(5.000000000e-01),float(1.000000000e+00),float(1.000000000e+00),float(5.000000000e-01),float(1.000000000e+00),float(5.000000000e-01),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(5.000000000e-01),float(1.000000000e+00),float(1.000000000e+00),float(5.000000000e-01),float(1.000000000e+00),float(5.000000000e-01),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(5.000000000e-01),float(1.000000000e+00),float(1.000000000e+00),float(5.000000000e-01),float(1.000000000e+00),float(5.000000000e-01),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(5.000000000e-01),float(1.000000000e+00),float(1.000000000e+00),float(5.000000000e-01),float(1.000000000e+00),float(5.000000000e-01),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(5.000000000e-01),float(1.000000000e+00),float(1.000000000e+00),float(5.000000000e-01),float(1.000000000e+00),float(5.000000000e-01),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(5.000000000e-01),float(1.000000000e+00),float(1.000000000e+00),float(5.000000000e-01),float(1.000000000e+00),float(5.000000000e-01),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(5.000000000e-01),float(1.000000000e+00),float(1.000000000e+00),float(5.000000000e-01),float(1.000000000e+00),float(5.000000000e-01),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00),float(1.000000000e+00)};
static __constant__ char xsrc1[351] = { 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3};
static __constant__ char Lsrc1[351] = { 4,5,6,10,11,12,13,14,15,20,21,22,23,24,25,26,27,28,29,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,5,7,8,11,13,14,16,17,18,21,23,24,26,27,28,30,31,32,33,36,38,39,41,42,43,45,46,47,48,50,51,52,53,54,6,8,9,12,14,15,17,18,19,22,24,25,27,28,29,31,32,33,34,37,39,40,42,43,44,46,47,48,49,51,52,53,54,55,10,11,12,20,21,22,23,24,25,35,36,37,38,39,40,41,42,43,44,11,13,14,21,23,24,26,27,28,36,38,39,41,42,43,45,46,47,48,12,14,15,22,24,25,27,28,29,37,39,40,42,43,44,46,47,48,49,13,16,17,23,26,27,30,31,32,38,41,42,45,46,47,50,51,52,53,14,17,18,24,27,28,31,32,33,39,42,43,46,47,48,51,52,53,54,15,18,19,25,28,29,32,33,34,40,43,44,47,48,49,52,53,54,55,20,21,22,35,36,37,38,39,40,21,23,24,36,38,39,41,42,43,22,24,25,37,39,40,42,43,44,23,26,27,38,41,42,45,46,47,24,27,28,39,42,43,46,47,48,25,28,29,40,43,44,47,48,49,26,30,31,41,45,46,50,51,52,27,31,32,42,46,47,51,52,53,28,32,33,43,47,48,52,53,54,29,33,34,44,48,49,53,54,55,35,36,37,36,38,39,37,39,40,38,41,42,39,42,43,40,43,44,41,45,46,42,46,47,43,47,48,44,48,49,45,50,51,46,51,52,47,52,53,48,53,54,49,54,55};
static __constant__ float phi_factor[55] = { float(1.000000000e+00),float(5.000000000e-01),float(1.666666716e-01),float(4.166666791e-02),float(8.333333768e-03),float(1.000000000e+00),float(1.000000000e+00),float(5.000000000e-01),float(1.666666716e-01),float(4.166666791e-02),float(5.000000000e-01),float(5.000000000e-01),float(2.500000000e-01),float(8.333333582e-02),float(1.666666716e-01),float(1.666666716e-01),float(8.333333582e-02),float(4.166666791e-02),float(4.166666791e-02),float(8.333333768e-03),float(1.000000000e+00),float(1.000000000e+00),float(5.000000000e-01),float(1.666666716e-01),float(4.166666791e-02),float(1.000000000e+00),float(1.000000000e+00),float(5.000000000e-01),float(1.666666716e-01),float(5.000000000e-01),float(5.000000000e-01),float(2.500000000e-01),float(1.666666716e-01),float(1.666666716e-01),float(4.166666791e-02),float(5.000000000e-01),float(5.000000000e-01),float(2.500000000e-01),float(8.333333582e-02),float(5.000000000e-01),float(5.000000000e-01),float(2.500000000e-01),float(2.500000000e-01),float(2.500000000e-01),float(8.333333582e-02),float(1.666666716e-01),float(1.666666716e-01),float(8.333333582e-02),float(1.666666716e-01),float(1.666666716e-01),float(8.333333582e-02),float(4.166666791e-02),float(4.166666791e-02),float(4.166666791e-02),float(8.333333768e-03)};
static __constant__ char phi_Lsrc[55] = { 3,9,19,34,55,2,8,18,33,54,7,17,32,53,16,31,52,30,51,50,1,6,15,29,49,5,14,28,48,13,27,47,26,46,45,4,12,25,44,11,24,43,23,42,41,10,22,40,21,39,38,20,37,36,35};
#ifdef __CUDACC__
template<class T>
__device__
tensor_sym<T, 6> L2L_cuda(const tensor_sym<T, 6>& La, array<T,NDIM> X, bool do_phi) {
	const int tid = threadIdx.x;
	tensor_sym<T, 6> Lb;
	for( int i = 0; i < EXPANSION_SIZE; i ++ ) {
		Lb[i] = 0.0f;
	}
	for( int i = tid; i < EXPANSION_SIZE; i += WARP_SIZE ) {
		Lb[i] = La[i];
	}
	tensor_sym<T,6> dx;
	dx[0] = T(1);
	dx[1] = X[0];
	dx[2] = X[1];
	dx[3] = X[2];
	dx[9]= dx[3] * dx[3];
	dx[8]= dx[2] * dx[3];
	dx[7]= dx[2] * dx[2];
	dx[6]= dx[1] * dx[3];
	dx[5]= dx[1] * dx[2];
	dx[4]= dx[1] * dx[1];
	dx[19]= dx[9] * dx[3];
	dx[18]= dx[8] * dx[3];
	dx[17]= dx[8] * dx[2];
	dx[16]= dx[7] * dx[2];
	dx[15]= dx[6] * dx[3];
	dx[14]= dx[5] * dx[3];
	dx[13]= dx[5] * dx[2];
	dx[12]= dx[6] * dx[1];
	dx[11]= dx[5] * dx[1];
	dx[10]= dx[4] * dx[1];
	dx[34]= dx[9] * dx[9];
	dx[33]= dx[8] * dx[9];
	dx[32]= dx[8] * dx[8];
	dx[31]= dx[8] * dx[7];
	dx[30]= dx[7] * dx[7];
	dx[29]= dx[6] * dx[9];
	dx[28]= dx[5] * dx[9];
	dx[27]= dx[5] * dx[8];
	dx[26]= dx[5] * dx[7];
	dx[25]= dx[6] * dx[6];
	dx[24]= dx[5] * dx[6];
	dx[23]= dx[5] * dx[5];
	dx[22]= dx[6] * dx[4];
	dx[21]= dx[5] * dx[4];
	dx[20]= dx[4] * dx[4];
	dx[55]= dx[19] * dx[9];
	dx[54]= dx[18] * dx[9];
	dx[53]= dx[17] * dx[9];
	dx[52]= dx[17] * dx[8];
	dx[51]= dx[17] * dx[7];
	dx[50]= dx[16] * dx[7];
	dx[49]= dx[15] * dx[9];
	dx[48]= dx[14] * dx[9];
	dx[47]= dx[14] * dx[8];
	dx[46]= dx[14] * dx[7];
	dx[45]= dx[13] * dx[7];
	dx[44]= dx[12] * dx[9];
	dx[43]= dx[14] * dx[6];
	dx[42]= dx[14] * dx[5];
	dx[41]= dx[11] * dx[7];
	dx[40]= dx[12] * dx[6];
	dx[39]= dx[14] * dx[4];
	dx[38]= dx[11] * dx[5];
	dx[37]= dx[12] * dx[4];
	dx[36]= dx[11] * dx[4];
	dx[35]= dx[10] * dx[4];
	for( int i = tid; i < 351; i+=WARP_SIZE) {
		Lb[Ldest1[i]] = fmaf(factor1[i] * dx[xsrc1[i]], La[Lsrc1[i]], Lb[Ldest1[i]]);
	}
	if( do_phi ) {
		for( int i = tid; i < 55; i+=WARP_SIZE) {
			Lb[0] = fmaf(phi_factor[i] * dx[phi_Lsrc[i]], La[phi_Lsrc[i]], Lb[0]);
		}
	}
	for (int P = warpSize / 2; P >= 1; P /= 2) {
		for (int i = 0; i < EXPANSION_SIZE; i++) {
			Lb[i] += __shfl_xor_sync(0xffffffff, Lb[i], P);
		}
	}
	return Lb;
/* FLOPS = 55 + do_phi * 220*/
}
#endif
