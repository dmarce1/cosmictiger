/*
CosmicTiger - A cosmological N-Body code
Copyright (C) 2021  Dominic C. Marcello

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/
#pragma once
#include <cosmictiger/tensor.hpp>
#include <cosmictiger/cuda.hpp>
#include <cosmictiger/ewald_indices.hpp>
#include <cosmictiger/math.hpp>
#include <cosmictiger/float2double.hpp>
template<class T>
using expansion = tensor_trless_sym<T,6>;
template<class T>
using expansion2 = tensor_trless_sym<T,2>;
template<class T>
using multipole = tensor_trless_sym<T,5>;
#define EXPANSION_SIZE 37
#define MULTIPOLE_SIZE 26
template<class T>
using pm_expansion = tensor_trless_sym<T,7>;
template<class T>
using pm_multipole = tensor_trless_sym<T,6>;
#define PM_EXPANSION_SIZE 50
#define PM_MULTIPOLE_SIZE 37
#define SCALE_FACTOR 1.000000e+00f
#define SCALE_FACTOR0 1.000000e+00f
#define SCALE_FACTOR_INV0 1.000000e+00f
#define SCALE_FACTOR1 1.000000e+00f
#define SCALE_FACTOR_INV1 1.000000e+00f
#define SCALE_FACTOR2 1.000000e+00f
#define SCALE_FACTOR_INV2 1.000000e+00f
#define SCALE_FACTOR3 1.000000e+00f
#define SCALE_FACTOR_INV3 1.000000e+00f
#define SCALE_FACTOR4 1.000000e+00f
#define SCALE_FACTOR_INV4 1.000000e+00f
#define SCALE_FACTOR5 1.000000e+00f
#define SCALE_FACTOR_INV5 1.000000e+00f
#define SCALE_FACTOR6 1.000000e+00f
#define SCALE_FACTOR_INV6 1.000000e+00f
template<class T>
CUDA_EXPORT
inline int greens_function(tensor_trless_sym<T, 6>& D, array<T, NDIM> X, bool scale = true) {
	if( scale ) {
		X[0] *= T(SCALE_FACTOR);
		X[1] *= T(SCALE_FACTOR);
		X[2] *= T(SCALE_FACTOR);
	}
	auto r2 = sqr(X[0], X[1], X[2]);
	r2 = sqr(X[0], X[1], X[2]);
	const T r = sqrt(r2);
	const T rinv1 = -(r > T(0)) / f_max(r, T(1e-20));
	const T rinv2 = -rinv1 * rinv1;
	const T rinv3 = -rinv2 * rinv1;
	const T rinv4 = -rinv2 * rinv2;
	const T rinv5 = -rinv3 * rinv2;
	const T rinv6 = -rinv3 * rinv3;
	X[0] *= rinv1;
	X[1] *= rinv1;
	X[2] *= rinv1;
	T x[37];
	x[0] = T(1);
	x[1] = X[0];
	x[2] = X[1];
	x[21] = X[2];
	x[36] = x[21] * x[21]; // 0 0 2 | 0 0 1 | 0 0 1
	x[23] = x[2] * x[21]; // 0 1 1 | 0 0 1 | 0 1 0
	x[5] = x[2] * x[2]; // 0 2 0 | 0 1 0 | 0 1 0
	x[22] = x[1] * x[21]; // 1 0 1 | 0 0 1 | 1 0 0
	x[4] = x[1] * x[2]; // 1 1 0 | 0 1 0 | 1 0 0
	x[3] = x[1] * x[1]; // 2 0 0 | 1 0 0 | 1 0 0
	x[26] = x[23] * x[2]; // 0 2 1 | 0 1 0 | 0 1 1
	x[9] = x[5] * x[2]; // 0 3 0 | 0 1 0 | 0 2 0
	x[25] = x[4] * x[21]; // 1 1 1 | 0 0 1 | 1 1 0
	x[8] = x[4] * x[2]; // 1 2 0 | 0 1 0 | 1 1 0
	x[24] = x[22] * x[1]; // 2 0 1 | 1 0 0 | 1 0 1
	x[7] = x[4] * x[1]; // 2 1 0 | 1 0 0 | 1 1 0
	x[6] = x[3] * x[1]; // 3 0 0 | 1 0 0 | 2 0 0
	x[30] = x[23] * x[5]; // 0 3 1 | 0 2 0 | 0 1 1
	x[14] = x[5] * x[5]; // 0 4 0 | 0 2 0 | 0 2 0
	x[29] = x[4] * x[23]; // 1 2 1 | 0 1 1 | 1 1 0
	x[13] = x[4] * x[5]; // 1 3 0 | 0 2 0 | 1 1 0
	x[28] = x[4] * x[22]; // 2 1 1 | 1 0 1 | 1 1 0
	x[12] = x[4] * x[4]; // 2 2 0 | 1 1 0 | 1 1 0
	x[27] = x[22] * x[3]; // 3 0 1 | 2 0 0 | 1 0 1
	x[11] = x[4] * x[3]; // 3 1 0 | 2 0 0 | 1 1 0
	x[10] = x[3] * x[3]; // 4 0 0 | 2 0 0 | 2 0 0
	x[35] = x[26] * x[5]; // 0 4 1 | 0 2 0 | 0 2 1
	x[20] = x[9] * x[5]; // 0 5 0 | 0 2 0 | 0 3 0
	x[34] = x[25] * x[5]; // 1 3 1 | 0 2 0 | 1 1 1
	x[19] = x[8] * x[5]; // 1 4 0 | 0 2 0 | 1 2 0
	x[33] = x[25] * x[4]; // 2 2 1 | 1 1 0 | 1 1 1
	x[18] = x[7] * x[5]; // 2 3 0 | 0 2 0 | 2 1 0
	x[32] = x[25] * x[3]; // 3 1 1 | 2 0 0 | 1 1 1
	x[17] = x[7] * x[4]; // 3 2 0 | 1 1 0 | 2 1 0
	x[31] = x[24] * x[3]; // 4 0 1 | 2 0 0 | 2 0 1
	x[16] = x[7] * x[3]; // 4 1 0 | 2 0 0 | 2 1 0
	x[15] = x[6] * x[3]; // 5 0 0 | 2 0 0 | 3 0 0
	D[0] = x[0];
	D[21] = x[21];
	D[36] = T(3.0000000000000000e+00) * x[36];
	D[2] = x[2];
	D[23] = T(3.0000000000000000e+00) * x[23];
	D[5] = T(3.0000000000000000e+00) * x[5];
	D[26] = T(1.5000000000000000e+01) * x[26];
	D[9] = T(1.5000000000000000e+01) * x[9];
	D[30] = T(1.0500000000000000e+02) * x[30];
	D[14] = T(1.0500000000000000e+02) * x[14];
	D[35] = T(9.4500000000000000e+02) * x[35];
	D[20] = T(9.4500000000000000e+02) * x[20];
	D[1] = x[1];
	D[22] = T(3.0000000000000000e+00) * x[22];
	D[4] = T(3.0000000000000000e+00) * x[4];
	D[25] = T(1.5000000000000000e+01) * x[25];
	D[8] = T(1.5000000000000000e+01) * x[8];
	D[29] = T(1.0500000000000000e+02) * x[29];
	D[13] = T(1.0500000000000000e+02) * x[13];
	D[34] = T(9.4500000000000000e+02) * x[34];
	D[19] = T(9.4500000000000000e+02) * x[19];
	D[3] = T(3.0000000000000000e+00) * x[3];
	D[24] = T(1.5000000000000000e+01) * x[24];
	D[7] = T(1.5000000000000000e+01) * x[7];
	D[28] = T(1.0500000000000000e+02) * x[28];
	D[12] = T(1.0500000000000000e+02) * x[12];
	D[33] = T(9.4500000000000000e+02) * x[33];
	D[18] = T(9.4500000000000000e+02) * x[18];
	D[6] = T(1.5000000000000000e+01) * x[6];
	D[27] = T(1.0500000000000000e+02) * x[27];
	D[11] = T(1.0500000000000000e+02) * x[11];
	D[32] = T(9.4500000000000000e+02) * x[32];
	D[17] = T(9.4500000000000000e+02) * x[17];
	D[10] = T(1.0500000000000000e+02) * x[10];
	D[31] = T(9.4500000000000000e+02) * x[31];
	D[16] = T(9.4500000000000000e+02) * x[16];
	D[15] = T(9.4500000000000000e+02) * x[15];
	D[36] -= x[0];
	D[12] = fmaf(T(3.0000000000000000e+00), x[0], D[12]);
	D[5] -= x[0];
	D[33] = fmaf(T(-1.0500000000000000e+02), x[24], D[33]);
	D[26] = fmaf(T(-3.0000000000000000e+00), x[21], D[26]);
	D[33] = fmaf(T(-1.0500000000000000e+02), x[26], D[33]);
	D[9] = fmaf(T(-9.0000000000000000e+00), x[2], D[9]);
	D[33] = fmaf(T(1.5000000000000000e+01), x[21], D[33]);
	D[30] = fmaf(T(-4.5000000000000000e+01), x[23], D[30]);
	D[18] = fmaf(T(-3.1500000000000000e+02), x[7], D[18]);
	D[14] = fmaf(T(-9.0000000000000000e+01), x[5], D[14]);
	D[18] = fmaf(T(-1.0500000000000000e+02), x[9], D[18]);
	D[14] = fmaf(T(9.0000000000000000e+00), x[0], D[14]);
	D[18] = fmaf(T(4.5000000000000000e+01), x[2], D[18]);
	D[35] = fmaf(T(-6.3000000000000000e+02), x[26], D[35]);
	D[6] = fmaf(T(-9.0000000000000000e+00), x[1], D[6]);
	D[35] = fmaf(T(4.5000000000000000e+01), x[21], D[35]);
	D[27] = fmaf(T(-4.5000000000000000e+01), x[22], D[27]);
	D[20] = fmaf(T(-1.0500000000000000e+03), x[9], D[20]);
	D[11] = fmaf(T(-4.5000000000000000e+01), x[4], D[11]);
	D[20] = fmaf(T(2.2500000000000000e+02), x[2], D[20]);
	D[32] = fmaf(T(-3.1500000000000000e+02), x[25], D[32]);
	D[8] = fmaf(T(-3.0000000000000000e+00), x[1], D[8]);
	D[17] = fmaf(T(-1.0500000000000000e+02), x[6], D[17]);
	D[29] = fmaf(T(-1.5000000000000000e+01), x[22], D[29]);
	D[17] = fmaf(T(-3.1500000000000000e+02), x[8], D[17]);
	D[13] = fmaf(T(-4.5000000000000000e+01), x[4], D[13]);
	D[17] = fmaf(T(4.5000000000000000e+01), x[1], D[17]);
	D[34] = fmaf(T(-3.1500000000000000e+02), x[25], D[34]);
	D[10] = fmaf(T(-9.0000000000000000e+01), x[3], D[10]);
	D[19] = fmaf(T(-6.3000000000000000e+02), x[8], D[19]);
	D[10] = fmaf(T(9.0000000000000000e+00), x[0], D[10]);
	D[19] = fmaf(T(4.5000000000000000e+01), x[1], D[19]);
	D[31] = fmaf(T(-6.3000000000000000e+02), x[24], D[31]);
	D[3] -= x[0];
	D[31] = fmaf(T(4.5000000000000000e+01), x[21], D[31]);
	D[24] = fmaf(T(-3.0000000000000000e+00), x[21], D[24]);
	D[16] = fmaf(T(-6.3000000000000000e+02), x[7], D[16]);
	D[7] = fmaf(T(-3.0000000000000000e+00), x[2], D[7]);
	D[16] = fmaf(T(4.5000000000000000e+01), x[2], D[16]);
	D[28] = fmaf(T(-1.5000000000000000e+01), x[23], D[28]);
	D[15] = fmaf(T(-1.0500000000000000e+03), x[6], D[15]);
	D[12] = fmaf(T(-1.5000000000000000e+01), x[3], D[12]);
	D[15] = fmaf(T(2.2500000000000000e+02), x[1], D[15]);
	D[12] = fmaf(T(-1.5000000000000000e+01), x[5], D[12]);
	D[0] *= rinv1;
	D[21] *= rinv2;
	D[36] *= rinv3;
	D[2] *= rinv2;
	D[23] *= rinv3;
	D[5] *= rinv3;
	D[26] *= rinv4;
	D[9] *= rinv4;
	D[30] *= rinv5;
	D[14] *= rinv5;
	D[35] *= rinv6;
	D[20] *= rinv6;
	D[1] *= rinv2;
	D[22] *= rinv3;
	D[4] *= rinv3;
	D[25] *= rinv4;
	D[8] *= rinv4;
	D[29] *= rinv5;
	D[13] *= rinv5;
	D[34] *= rinv6;
	D[19] *= rinv6;
	D[3] *= rinv3;
	D[24] *= rinv4;
	D[7] *= rinv4;
	D[28] *= rinv5;
	D[12] *= rinv5;
	D[33] *= rinv6;
	D[18] *= rinv6;
	D[6] *= rinv4;
	D[27] *= rinv5;
	D[11] *= rinv5;
	D[32] *= rinv6;
	D[17] *= rinv6;
	D[10] *= rinv5;
	D[31] *= rinv6;
	D[16] *= rinv6;
	D[15] *= rinv6;
	return 181 + scale * NDIM;
}
#include <cosmictiger/flops.hpp>
template<class T>
CUDA_EXPORT int ewald_greens_function(tensor_trless_sym<T,6> &D, array<T, NDIM> X) {
	X[0] *= T(SCALE_FACTOR);
	X[1] *= T(SCALE_FACTOR);
	X[2] *= T(SCALE_FACTOR);
	ewald_const econst;
	flop_counter<int> flops = 7;
	T r = sqrt(fmaf(X[0], X[0], fmaf(X[1], X[1], sqr(X[2]))));
	const T fouroversqrtpi = T(2.2567583341910251e+00);
	tensor_sym<T, 6> Dreal;
	tensor_trless_sym<T,6> Dfour;
	Dreal = 0.0f;
	Dfour = 0.0f;
	D = 0.0f;
	const auto realsz = econst.nreal();
	const T zero_mask = r > T(0.0);
	int icnt = 0;
	array<T, NDIM> dx;
	dx = X;
	{
		T r2 = fmaf(dx[0], dx[0], fmaf(dx[1], dx[1], sqr(dx[2])));
		icnt++;
		const T r = sqrt(r2);
		const T n8r = T(-8*SCALE_FACTOR_INV2) * r;
		const T rinv = (r > T(0)) / f_max(r, 1.0e-20);
		T exp0 = expnearzero( -T(4*SCALE_FACTOR_INV2) * r2 );
		T erf0 = erfnearzero(T(2*SCALE_FACTOR_INV1) * r);
		const T expfactor = T(2.256758334191025*SCALE_FACTOR_INV1) * exp0;
		T e0 = expfactor * rinv;
		const T rinv0 = T(1);
		const T rinv1 = rinv;
		const T rinv2 = rinv1 * rinv1;
		const T d0 = erf0 * rinv;
		const T d1 = fmaf(T(-1) * d0, rinv, e0);
		e0 *= n8r;
		const T d2 = fmaf(T(-3) * d1, rinv, e0);
		e0 *= n8r;
		const T d3 = fmaf(T(-5) * d2, rinv, e0);
		e0 *= n8r;
		const T d4 = fmaf(T(-7) * d3, rinv, e0);
		e0 *= n8r;
		const T d5 = fmaf(T(-9) * d4, rinv, e0);
		const T Drinvpow_0_0 = d0 * rinv0;
		const T Drinvpow_1_0 = d1 * rinv0;
		const T Drinvpow_1_1 = d1 * rinv1;
		const T Drinvpow_2_0 = d2 * rinv0;
		const T Drinvpow_2_1 = d2 * rinv1;
		const T Drinvpow_2_2 = d2 * rinv2;
		const T Drinvpow_3_0 = d3 * rinv0;
		const T Drinvpow_3_1 = d3 * rinv1;
		const T Drinvpow_3_2 = d3 * rinv2;
		const T Drinvpow_4_0 = d4 * rinv0;
		const T Drinvpow_4_1 = d4 * rinv1;
		const T Drinvpow_5_0 = d5 * rinv0;
		array<T,NDIM> dxrinv;
		dxrinv[0] = dx[0] * rinv;
		dxrinv[1] = dx[1] * rinv;
		dxrinv[2] = dx[2] * rinv;
		T x[56];
		x[0] = T(1);
		x[1] = dxrinv[0];
		x[2] = dxrinv[1];
		x[3] = dxrinv[2];
		x[9] = x[3] * x[3]; // 0 0 2 | 0 0 1 | 0 0 1
		x[8] = x[2] * x[3]; // 0 1 1 | 0 0 1 | 0 1 0
		x[7] = x[2] * x[2]; // 0 2 0 | 0 1 0 | 0 1 0
		x[6] = x[1] * x[3]; // 1 0 1 | 0 0 1 | 1 0 0
		x[5] = x[1] * x[2]; // 1 1 0 | 0 1 0 | 1 0 0
		x[4] = x[1] * x[1]; // 2 0 0 | 1 0 0 | 1 0 0
		x[19] = x[9] * x[3]; // 0 0 3 | 0 0 1 | 0 0 2
		x[18] = x[8] * x[3]; // 0 1 2 | 0 0 1 | 0 1 1
		x[17] = x[8] * x[2]; // 0 2 1 | 0 1 0 | 0 1 1
		x[16] = x[7] * x[2]; // 0 3 0 | 0 1 0 | 0 2 0
		x[15] = x[6] * x[3]; // 1 0 2 | 0 0 1 | 1 0 1
		x[14] = x[5] * x[3]; // 1 1 1 | 0 0 1 | 1 1 0
		x[13] = x[5] * x[2]; // 1 2 0 | 0 1 0 | 1 1 0
		x[12] = x[6] * x[1]; // 2 0 1 | 1 0 0 | 1 0 1
		x[11] = x[5] * x[1]; // 2 1 0 | 1 0 0 | 1 1 0
		x[10] = x[4] * x[1]; // 3 0 0 | 1 0 0 | 2 0 0
		x[34] = x[9] * x[9]; // 0 0 4 | 0 0 2 | 0 0 2
		x[33] = x[8] * x[9]; // 0 1 3 | 0 0 2 | 0 1 1
		x[32] = x[8] * x[8]; // 0 2 2 | 0 1 1 | 0 1 1
		x[31] = x[8] * x[7]; // 0 3 1 | 0 2 0 | 0 1 1
		x[30] = x[7] * x[7]; // 0 4 0 | 0 2 0 | 0 2 0
		x[29] = x[6] * x[9]; // 1 0 3 | 0 0 2 | 1 0 1
		x[28] = x[5] * x[9]; // 1 1 2 | 0 0 2 | 1 1 0
		x[27] = x[5] * x[8]; // 1 2 1 | 0 1 1 | 1 1 0
		x[26] = x[5] * x[7]; // 1 3 0 | 0 2 0 | 1 1 0
		x[25] = x[6] * x[6]; // 2 0 2 | 1 0 1 | 1 0 1
		x[24] = x[5] * x[6]; // 2 1 1 | 1 0 1 | 1 1 0
		x[23] = x[5] * x[5]; // 2 2 0 | 1 1 0 | 1 1 0
		x[22] = x[6] * x[4]; // 3 0 1 | 2 0 0 | 1 0 1
		x[21] = x[5] * x[4]; // 3 1 0 | 2 0 0 | 1 1 0
		x[20] = x[4] * x[4]; // 4 0 0 | 2 0 0 | 2 0 0
		x[55] = x[19] * x[9]; // 0 0 5 | 0 0 2 | 0 0 3
		x[54] = x[18] * x[9]; // 0 1 4 | 0 0 2 | 0 1 2
		x[53] = x[17] * x[9]; // 0 2 3 | 0 0 2 | 0 2 1
		x[52] = x[17] * x[8]; // 0 3 2 | 0 1 1 | 0 2 1
		x[51] = x[17] * x[7]; // 0 4 1 | 0 2 0 | 0 2 1
		x[50] = x[16] * x[7]; // 0 5 0 | 0 2 0 | 0 3 0
		x[49] = x[15] * x[9]; // 1 0 4 | 0 0 2 | 1 0 2
		x[48] = x[14] * x[9]; // 1 1 3 | 0 0 2 | 1 1 1
		x[47] = x[14] * x[8]; // 1 2 2 | 0 1 1 | 1 1 1
		x[46] = x[14] * x[7]; // 1 3 1 | 0 2 0 | 1 1 1
		x[45] = x[13] * x[7]; // 1 4 0 | 0 2 0 | 1 2 0
		x[44] = x[12] * x[9]; // 2 0 3 | 0 0 2 | 2 0 1
		x[43] = x[14] * x[6]; // 2 1 2 | 1 0 1 | 1 1 1
		x[42] = x[14] * x[5]; // 2 2 1 | 1 1 0 | 1 1 1
		x[41] = x[11] * x[7]; // 2 3 0 | 0 2 0 | 2 1 0
		x[40] = x[12] * x[6]; // 3 0 2 | 1 0 1 | 2 0 1
		x[39] = x[14] * x[4]; // 3 1 1 | 2 0 0 | 1 1 1
		x[38] = x[11] * x[5]; // 3 2 0 | 1 1 0 | 2 1 0
		x[37] = x[12] * x[4]; // 4 0 1 | 2 0 0 | 2 0 1
		x[36] = x[11] * x[4]; // 4 1 0 | 2 0 0 | 2 1 0
		x[35] = x[10] * x[4]; // 5 0 0 | 2 0 0 | 3 0 0
		Dreal[0] = fmaf(x[0], Drinvpow_0_0, Dreal[0]);
		Dreal[3] = fmaf(x[3], Drinvpow_1_0, Dreal[3]);
		Dreal[9] = fmaf(x[9], Drinvpow_2_0, Dreal[9]);
		Dreal[9] = fmaf(x[0], Drinvpow_1_1, Dreal[9]);
		Dreal[19] = fmaf(x[19], Drinvpow_3_0, Dreal[19]);
		Dreal[19] = fmaf(T(3.0000000000000000e+00), x[3]*Drinvpow_2_1, Dreal[19]);
		Dreal[34] = fmaf(x[34], Drinvpow_4_0, Dreal[34]);
		Dreal[34] = fmaf(T(6.0000000000000000e+00), x[9]*Drinvpow_3_1, Dreal[34]);
		Dreal[34] = fmaf(T(3.0000000000000000e+00), x[0]*Drinvpow_2_2, Dreal[34]);
		Dreal[55] = fmaf(x[55], Drinvpow_5_0, Dreal[55]);
		Dreal[55] = fmaf(T(1.0000000000000000e+01), x[19]*Drinvpow_4_1, Dreal[55]);
		Dreal[55] = fmaf(T(1.5000000000000000e+01), x[3]*Drinvpow_3_2, Dreal[55]);
		Dreal[2] = fmaf(x[2], Drinvpow_1_0, Dreal[2]);
		Dreal[8] = fmaf(x[8], Drinvpow_2_0, Dreal[8]);
		Dreal[18] = fmaf(x[18], Drinvpow_3_0, Dreal[18]);
		Dreal[18] = fmaf(x[2], Drinvpow_2_1, Dreal[18]);
		Dreal[33] = fmaf(x[33], Drinvpow_4_0, Dreal[33]);
		Dreal[33] = fmaf(T(3.0000000000000000e+00), x[8]*Drinvpow_3_1, Dreal[33]);
		Dreal[54] = fmaf(x[54], Drinvpow_5_0, Dreal[54]);
		Dreal[54] = fmaf(T(6.0000000000000000e+00), x[18]*Drinvpow_4_1, Dreal[54]);
		Dreal[54] = fmaf(T(3.0000000000000000e+00), x[2]*Drinvpow_3_2, Dreal[54]);
		Dreal[7] = fmaf(x[7], Drinvpow_2_0, Dreal[7]);
		Dreal[7] = fmaf(x[0], Drinvpow_1_1, Dreal[7]);
		Dreal[17] = fmaf(x[17], Drinvpow_3_0, Dreal[17]);
		Dreal[17] = fmaf(x[3], Drinvpow_2_1, Dreal[17]);
		Dreal[32] = fmaf(x[32], Drinvpow_4_0, Dreal[32]);
		Dreal[32] = fmaf(x[7], Drinvpow_3_1, Dreal[32]);
		Dreal[32] = fmaf(x[9], Drinvpow_3_1, Dreal[32]);
		Dreal[32] = fmaf(x[0], Drinvpow_2_2, Dreal[32]);
		Dreal[53] = fmaf(x[53], Drinvpow_5_0, Dreal[53]);
		Dreal[53] = fmaf(T(3.0000000000000000e+00), x[17]*Drinvpow_4_1, Dreal[53]);
		Dreal[53] = fmaf(x[19], Drinvpow_4_1, Dreal[53]);
		Dreal[53] = fmaf(T(3.0000000000000000e+00), x[3]*Drinvpow_3_2, Dreal[53]);
		Dreal[16] = fmaf(x[16], Drinvpow_3_0, Dreal[16]);
		Dreal[16] = fmaf(T(3.0000000000000000e+00), x[2]*Drinvpow_2_1, Dreal[16]);
		Dreal[31] = fmaf(x[31], Drinvpow_4_0, Dreal[31]);
		Dreal[31] = fmaf(T(3.0000000000000000e+00), x[8]*Drinvpow_3_1, Dreal[31]);
		Dreal[52] = fmaf(x[52], Drinvpow_5_0, Dreal[52]);
		Dreal[52] = fmaf(x[16], Drinvpow_4_1, Dreal[52]);
		Dreal[52] = fmaf(T(3.0000000000000000e+00), x[18]*Drinvpow_4_1, Dreal[52]);
		Dreal[52] = fmaf(T(3.0000000000000000e+00), x[2]*Drinvpow_3_2, Dreal[52]);
		Dreal[30] = fmaf(x[30], Drinvpow_4_0, Dreal[30]);
		Dreal[30] = fmaf(T(6.0000000000000000e+00), x[7]*Drinvpow_3_1, Dreal[30]);
		Dreal[30] = fmaf(T(3.0000000000000000e+00), x[0]*Drinvpow_2_2, Dreal[30]);
		Dreal[51] = fmaf(x[51], Drinvpow_5_0, Dreal[51]);
		Dreal[51] = fmaf(T(6.0000000000000000e+00), x[17]*Drinvpow_4_1, Dreal[51]);
		Dreal[51] = fmaf(T(3.0000000000000000e+00), x[3]*Drinvpow_3_2, Dreal[51]);
		Dreal[50] = fmaf(x[50], Drinvpow_5_0, Dreal[50]);
		Dreal[50] = fmaf(T(1.0000000000000000e+01), x[16]*Drinvpow_4_1, Dreal[50]);
		Dreal[50] = fmaf(T(1.5000000000000000e+01), x[2]*Drinvpow_3_2, Dreal[50]);
		Dreal[1] = fmaf(x[1], Drinvpow_1_0, Dreal[1]);
		Dreal[6] = fmaf(x[6], Drinvpow_2_0, Dreal[6]);
		Dreal[15] = fmaf(x[15], Drinvpow_3_0, Dreal[15]);
		Dreal[15] = fmaf(x[1], Drinvpow_2_1, Dreal[15]);
		Dreal[29] = fmaf(x[29], Drinvpow_4_0, Dreal[29]);
		Dreal[29] = fmaf(T(3.0000000000000000e+00), x[6]*Drinvpow_3_1, Dreal[29]);
		Dreal[49] = fmaf(x[49], Drinvpow_5_0, Dreal[49]);
		Dreal[49] = fmaf(T(6.0000000000000000e+00), x[15]*Drinvpow_4_1, Dreal[49]);
		Dreal[49] = fmaf(T(3.0000000000000000e+00), x[1]*Drinvpow_3_2, Dreal[49]);
		Dreal[5] = fmaf(x[5], Drinvpow_2_0, Dreal[5]);
		Dreal[14] = fmaf(x[14], Drinvpow_3_0, Dreal[14]);
		Dreal[28] = fmaf(x[28], Drinvpow_4_0, Dreal[28]);
		Dreal[28] = fmaf(x[5], Drinvpow_3_1, Dreal[28]);
		Dreal[48] = fmaf(x[48], Drinvpow_5_0, Dreal[48]);
		Dreal[48] = fmaf(T(3.0000000000000000e+00), x[14]*Drinvpow_4_1, Dreal[48]);
		Dreal[13] = fmaf(x[13], Drinvpow_3_0, Dreal[13]);
		Dreal[13] = fmaf(x[1], Drinvpow_2_1, Dreal[13]);
		Dreal[27] = fmaf(x[27], Drinvpow_4_0, Dreal[27]);
		Dreal[27] = fmaf(x[6], Drinvpow_3_1, Dreal[27]);
		Dreal[47] = fmaf(x[47], Drinvpow_5_0, Dreal[47]);
		Dreal[47] = fmaf(x[13], Drinvpow_4_1, Dreal[47]);
		Dreal[47] = fmaf(x[15], Drinvpow_4_1, Dreal[47]);
		Dreal[47] = fmaf(x[1], Drinvpow_3_2, Dreal[47]);
		Dreal[26] = fmaf(x[26], Drinvpow_4_0, Dreal[26]);
		Dreal[26] = fmaf(T(3.0000000000000000e+00), x[5]*Drinvpow_3_1, Dreal[26]);
		Dreal[46] = fmaf(x[46], Drinvpow_5_0, Dreal[46]);
		Dreal[46] = fmaf(T(3.0000000000000000e+00), x[14]*Drinvpow_4_1, Dreal[46]);
		Dreal[45] = fmaf(x[45], Drinvpow_5_0, Dreal[45]);
		Dreal[45] = fmaf(T(6.0000000000000000e+00), x[13]*Drinvpow_4_1, Dreal[45]);
		Dreal[45] = fmaf(T(3.0000000000000000e+00), x[1]*Drinvpow_3_2, Dreal[45]);
		Dreal[4] = fmaf(x[4], Drinvpow_2_0, Dreal[4]);
		Dreal[4] = fmaf(x[0], Drinvpow_1_1, Dreal[4]);
		Dreal[12] = fmaf(x[12], Drinvpow_3_0, Dreal[12]);
		Dreal[12] = fmaf(x[3], Drinvpow_2_1, Dreal[12]);
		Dreal[25] = fmaf(x[25], Drinvpow_4_0, Dreal[25]);
		Dreal[25] = fmaf(x[4], Drinvpow_3_1, Dreal[25]);
		Dreal[25] = fmaf(x[9], Drinvpow_3_1, Dreal[25]);
		Dreal[25] = fmaf(x[0], Drinvpow_2_2, Dreal[25]);
		Dreal[44] = fmaf(x[44], Drinvpow_5_0, Dreal[44]);
		Dreal[44] = fmaf(T(3.0000000000000000e+00), x[12]*Drinvpow_4_1, Dreal[44]);
		Dreal[44] = fmaf(x[19], Drinvpow_4_1, Dreal[44]);
		Dreal[44] = fmaf(T(3.0000000000000000e+00), x[3]*Drinvpow_3_2, Dreal[44]);
		Dreal[11] = fmaf(x[11], Drinvpow_3_0, Dreal[11]);
		Dreal[11] = fmaf(x[2], Drinvpow_2_1, Dreal[11]);
		Dreal[24] = fmaf(x[24], Drinvpow_4_0, Dreal[24]);
		Dreal[24] = fmaf(x[8], Drinvpow_3_1, Dreal[24]);
		Dreal[43] = fmaf(x[43], Drinvpow_5_0, Dreal[43]);
		Dreal[43] = fmaf(x[11], Drinvpow_4_1, Dreal[43]);
		Dreal[43] = fmaf(x[18], Drinvpow_4_1, Dreal[43]);
		Dreal[43] = fmaf(x[2], Drinvpow_3_2, Dreal[43]);
		Dreal[23] = fmaf(x[23], Drinvpow_4_0, Dreal[23]);
		Dreal[23] = fmaf(x[4], Drinvpow_3_1, Dreal[23]);
		Dreal[23] = fmaf(x[7], Drinvpow_3_1, Dreal[23]);
		Dreal[23] = fmaf(x[0], Drinvpow_2_2, Dreal[23]);
		Dreal[42] = fmaf(x[42], Drinvpow_5_0, Dreal[42]);
		Dreal[42] = fmaf(x[12], Drinvpow_4_1, Dreal[42]);
		Dreal[42] = fmaf(x[17], Drinvpow_4_1, Dreal[42]);
		Dreal[42] = fmaf(x[3], Drinvpow_3_2, Dreal[42]);
		Dreal[41] = fmaf(x[41], Drinvpow_5_0, Dreal[41]);
		Dreal[41] = fmaf(T(3.0000000000000000e+00), x[11]*Drinvpow_4_1, Dreal[41]);
		Dreal[41] = fmaf(x[16], Drinvpow_4_1, Dreal[41]);
		Dreal[41] = fmaf(T(3.0000000000000000e+00), x[2]*Drinvpow_3_2, Dreal[41]);
		Dreal[10] = fmaf(x[10], Drinvpow_3_0, Dreal[10]);
		Dreal[10] = fmaf(T(3.0000000000000000e+00), x[1]*Drinvpow_2_1, Dreal[10]);
		Dreal[22] = fmaf(x[22], Drinvpow_4_0, Dreal[22]);
		Dreal[22] = fmaf(T(3.0000000000000000e+00), x[6]*Drinvpow_3_1, Dreal[22]);
		Dreal[40] = fmaf(x[40], Drinvpow_5_0, Dreal[40]);
		Dreal[40] = fmaf(x[10], Drinvpow_4_1, Dreal[40]);
		Dreal[40] = fmaf(T(3.0000000000000000e+00), x[15]*Drinvpow_4_1, Dreal[40]);
		Dreal[40] = fmaf(T(3.0000000000000000e+00), x[1]*Drinvpow_3_2, Dreal[40]);
		Dreal[21] = fmaf(x[21], Drinvpow_4_0, Dreal[21]);
		Dreal[21] = fmaf(T(3.0000000000000000e+00), x[5]*Drinvpow_3_1, Dreal[21]);
		Dreal[39] = fmaf(x[39], Drinvpow_5_0, Dreal[39]);
		Dreal[39] = fmaf(T(3.0000000000000000e+00), x[14]*Drinvpow_4_1, Dreal[39]);
		Dreal[38] = fmaf(x[38], Drinvpow_5_0, Dreal[38]);
		Dreal[38] = fmaf(x[10], Drinvpow_4_1, Dreal[38]);
		Dreal[38] = fmaf(T(3.0000000000000000e+00), x[13]*Drinvpow_4_1, Dreal[38]);
		Dreal[38] = fmaf(T(3.0000000000000000e+00), x[1]*Drinvpow_3_2, Dreal[38]);
		Dreal[20] = fmaf(x[20], Drinvpow_4_0, Dreal[20]);
		Dreal[20] = fmaf(T(6.0000000000000000e+00), x[4]*Drinvpow_3_1, Dreal[20]);
		Dreal[20] = fmaf(T(3.0000000000000000e+00), x[0]*Drinvpow_2_2, Dreal[20]);
		Dreal[37] = fmaf(x[37], Drinvpow_5_0, Dreal[37]);
		Dreal[37] = fmaf(T(6.0000000000000000e+00), x[12]*Drinvpow_4_1, Dreal[37]);
		Dreal[37] = fmaf(T(3.0000000000000000e+00), x[3]*Drinvpow_3_2, Dreal[37]);
		Dreal[36] = fmaf(x[36], Drinvpow_5_0, Dreal[36]);
		Dreal[36] = fmaf(T(6.0000000000000000e+00), x[11]*Drinvpow_4_1, Dreal[36]);
		Dreal[36] = fmaf(T(3.0000000000000000e+00), x[2]*Drinvpow_3_2, Dreal[36]);
		Dreal[35] = fmaf(x[35], Drinvpow_5_0, Dreal[35]);
		Dreal[35] = fmaf(T(1.0000000000000000e+01), x[10]*Drinvpow_4_1, Dreal[35]);
		Dreal[35] = fmaf(T(1.5000000000000000e+01), x[1]*Drinvpow_3_2, Dreal[35]);
		const auto Drz = econst.D0();
		for( int i = 0; i < 56; i++) {
			Dreal[i] *= zero_mask;
			Dreal[i] -= (T(1) - zero_mask) * Drz[i];
		}
	}
	flops += icnt * 486;
	for (int i = 0; i < realsz; i++) {
		const auto n = econst.real_index(i);
		array<T, NDIM> dx;
		for (int dim = 0; dim < NDIM; dim++) {
			dx[dim] = X[dim] - T(SCALE_FACTOR) * n[dim];
		}
		T r2 = fmaf(dx[0], dx[0], fmaf(dx[1], dx[1], sqr(dx[2])));
		if (anytrue(r2 < T(SCALE_FACTOR2*EWALD_REAL_CUTOFF2))) {
			icnt++;
			const T r = sqrt(r2);
			const T n8r = T(-8 * SCALE_FACTOR_INV2) * r;
			const T rinv = (r > T(0)) / f_max(r, 1.0e-20);
			T exp0;
			T erfc0;
			erfcexp(T(2.*SCALE_FACTOR_INV1) * r, &erfc0, &exp0);
			const T expfactor = fouroversqrtpi  * T(SCALE_FACTOR_INV1) * exp0;
			T e0 = expfactor * rinv;
			const T rinv0 = T(1);
			const T rinv1 = rinv;
			const T rinv2 = rinv1 * rinv1;
			const T d0 = -erfc0 * rinv;
			const T d1 = fmaf(T(-1) * d0, rinv, e0);
			e0 *= n8r;
			const T d2 = fmaf(T(-3) * d1, rinv, e0);
			e0 *= n8r;
			const T d3 = fmaf(T(-5) * d2, rinv, e0);
			e0 *= n8r;
			const T d4 = fmaf(T(-7) * d3, rinv, e0);
			e0 *= n8r;
			const T d5 = fmaf(T(-9) * d4, rinv, e0);
			const T Drinvpow_0_0 = d0 * rinv0;
			const T Drinvpow_1_0 = d1 * rinv0;
			const T Drinvpow_1_1 = d1 * rinv1;
			const T Drinvpow_2_0 = d2 * rinv0;
			const T Drinvpow_2_1 = d2 * rinv1;
			const T Drinvpow_2_2 = d2 * rinv2;
			const T Drinvpow_3_0 = d3 * rinv0;
			const T Drinvpow_3_1 = d3 * rinv1;
			const T Drinvpow_3_2 = d3 * rinv2;
			const T Drinvpow_4_0 = d4 * rinv0;
			const T Drinvpow_4_1 = d4 * rinv1;
			const T Drinvpow_5_0 = d5 * rinv0;
			array<T,NDIM> dxrinv;
			dxrinv[0] = dx[0] * rinv;
			dxrinv[1] = dx[1] * rinv;
			dxrinv[2] = dx[2] * rinv;
			T x[56];
			x[0] = T(1);
			x[1] = dxrinv[0];
			x[2] = dxrinv[1];
			x[3] = dxrinv[2];
			x[9] = x[3] * x[3]; // 0 0 2 | 0 0 1 | 0 0 1
			x[8] = x[2] * x[3]; // 0 1 1 | 0 0 1 | 0 1 0
			x[7] = x[2] * x[2]; // 0 2 0 | 0 1 0 | 0 1 0
			x[6] = x[1] * x[3]; // 1 0 1 | 0 0 1 | 1 0 0
			x[5] = x[1] * x[2]; // 1 1 0 | 0 1 0 | 1 0 0
			x[4] = x[1] * x[1]; // 2 0 0 | 1 0 0 | 1 0 0
			x[19] = x[9] * x[3]; // 0 0 3 | 0 0 1 | 0 0 2
			x[18] = x[8] * x[3]; // 0 1 2 | 0 0 1 | 0 1 1
			x[17] = x[8] * x[2]; // 0 2 1 | 0 1 0 | 0 1 1
			x[16] = x[7] * x[2]; // 0 3 0 | 0 1 0 | 0 2 0
			x[15] = x[6] * x[3]; // 1 0 2 | 0 0 1 | 1 0 1
			x[14] = x[5] * x[3]; // 1 1 1 | 0 0 1 | 1 1 0
			x[13] = x[5] * x[2]; // 1 2 0 | 0 1 0 | 1 1 0
			x[12] = x[6] * x[1]; // 2 0 1 | 1 0 0 | 1 0 1
			x[11] = x[5] * x[1]; // 2 1 0 | 1 0 0 | 1 1 0
			x[10] = x[4] * x[1]; // 3 0 0 | 1 0 0 | 2 0 0
			x[34] = x[9] * x[9]; // 0 0 4 | 0 0 2 | 0 0 2
			x[33] = x[8] * x[9]; // 0 1 3 | 0 0 2 | 0 1 1
			x[32] = x[8] * x[8]; // 0 2 2 | 0 1 1 | 0 1 1
			x[31] = x[8] * x[7]; // 0 3 1 | 0 2 0 | 0 1 1
			x[30] = x[7] * x[7]; // 0 4 0 | 0 2 0 | 0 2 0
			x[29] = x[6] * x[9]; // 1 0 3 | 0 0 2 | 1 0 1
			x[28] = x[5] * x[9]; // 1 1 2 | 0 0 2 | 1 1 0
			x[27] = x[5] * x[8]; // 1 2 1 | 0 1 1 | 1 1 0
			x[26] = x[5] * x[7]; // 1 3 0 | 0 2 0 | 1 1 0
			x[25] = x[6] * x[6]; // 2 0 2 | 1 0 1 | 1 0 1
			x[24] = x[5] * x[6]; // 2 1 1 | 1 0 1 | 1 1 0
			x[23] = x[5] * x[5]; // 2 2 0 | 1 1 0 | 1 1 0
			x[22] = x[6] * x[4]; // 3 0 1 | 2 0 0 | 1 0 1
			x[21] = x[5] * x[4]; // 3 1 0 | 2 0 0 | 1 1 0
			x[20] = x[4] * x[4]; // 4 0 0 | 2 0 0 | 2 0 0
			x[55] = x[19] * x[9]; // 0 0 5 | 0 0 2 | 0 0 3
			x[54] = x[18] * x[9]; // 0 1 4 | 0 0 2 | 0 1 2
			x[53] = x[17] * x[9]; // 0 2 3 | 0 0 2 | 0 2 1
			x[52] = x[17] * x[8]; // 0 3 2 | 0 1 1 | 0 2 1
			x[51] = x[17] * x[7]; // 0 4 1 | 0 2 0 | 0 2 1
			x[50] = x[16] * x[7]; // 0 5 0 | 0 2 0 | 0 3 0
			x[49] = x[15] * x[9]; // 1 0 4 | 0 0 2 | 1 0 2
			x[48] = x[14] * x[9]; // 1 1 3 | 0 0 2 | 1 1 1
			x[47] = x[14] * x[8]; // 1 2 2 | 0 1 1 | 1 1 1
			x[46] = x[14] * x[7]; // 1 3 1 | 0 2 0 | 1 1 1
			x[45] = x[13] * x[7]; // 1 4 0 | 0 2 0 | 1 2 0
			x[44] = x[12] * x[9]; // 2 0 3 | 0 0 2 | 2 0 1
			x[43] = x[14] * x[6]; // 2 1 2 | 1 0 1 | 1 1 1
			x[42] = x[14] * x[5]; // 2 2 1 | 1 1 0 | 1 1 1
			x[41] = x[11] * x[7]; // 2 3 0 | 0 2 0 | 2 1 0
			x[40] = x[12] * x[6]; // 3 0 2 | 1 0 1 | 2 0 1
			x[39] = x[14] * x[4]; // 3 1 1 | 2 0 0 | 1 1 1
			x[38] = x[11] * x[5]; // 3 2 0 | 1 1 0 | 2 1 0
			x[37] = x[12] * x[4]; // 4 0 1 | 2 0 0 | 2 0 1
			x[36] = x[11] * x[4]; // 4 1 0 | 2 0 0 | 2 1 0
			x[35] = x[10] * x[4]; // 5 0 0 | 2 0 0 | 3 0 0
			Dreal[0] = fmaf(x[0], Drinvpow_0_0, Dreal[0]);
			Dreal[3] = fmaf(x[3], Drinvpow_1_0, Dreal[3]);
			Dreal[9] = fmaf(x[9], Drinvpow_2_0, Dreal[9]);
			Dreal[9] = fmaf(x[0], Drinvpow_1_1, Dreal[9]);
			Dreal[19] = fmaf(x[19], Drinvpow_3_0, Dreal[19]);
			Dreal[19] = fmaf(T(3.0000000000000000e+00), x[3]*Drinvpow_2_1, Dreal[19]);
			Dreal[34] = fmaf(x[34], Drinvpow_4_0, Dreal[34]);
			Dreal[34] = fmaf(T(6.0000000000000000e+00), x[9]*Drinvpow_3_1, Dreal[34]);
			Dreal[34] = fmaf(T(3.0000000000000000e+00), x[0]*Drinvpow_2_2, Dreal[34]);
			Dreal[55] = fmaf(x[55], Drinvpow_5_0, Dreal[55]);
			Dreal[55] = fmaf(T(1.0000000000000000e+01), x[19]*Drinvpow_4_1, Dreal[55]);
			Dreal[55] = fmaf(T(1.5000000000000000e+01), x[3]*Drinvpow_3_2, Dreal[55]);
			Dreal[2] = fmaf(x[2], Drinvpow_1_0, Dreal[2]);
			Dreal[8] = fmaf(x[8], Drinvpow_2_0, Dreal[8]);
			Dreal[18] = fmaf(x[18], Drinvpow_3_0, Dreal[18]);
			Dreal[18] = fmaf(x[2], Drinvpow_2_1, Dreal[18]);
			Dreal[33] = fmaf(x[33], Drinvpow_4_0, Dreal[33]);
			Dreal[33] = fmaf(T(3.0000000000000000e+00), x[8]*Drinvpow_3_1, Dreal[33]);
			Dreal[54] = fmaf(x[54], Drinvpow_5_0, Dreal[54]);
			Dreal[54] = fmaf(T(6.0000000000000000e+00), x[18]*Drinvpow_4_1, Dreal[54]);
			Dreal[54] = fmaf(T(3.0000000000000000e+00), x[2]*Drinvpow_3_2, Dreal[54]);
			Dreal[7] = fmaf(x[7], Drinvpow_2_0, Dreal[7]);
			Dreal[7] = fmaf(x[0], Drinvpow_1_1, Dreal[7]);
			Dreal[17] = fmaf(x[17], Drinvpow_3_0, Dreal[17]);
			Dreal[17] = fmaf(x[3], Drinvpow_2_1, Dreal[17]);
			Dreal[32] = fmaf(x[32], Drinvpow_4_0, Dreal[32]);
			Dreal[32] = fmaf(x[7], Drinvpow_3_1, Dreal[32]);
			Dreal[32] = fmaf(x[9], Drinvpow_3_1, Dreal[32]);
			Dreal[32] = fmaf(x[0], Drinvpow_2_2, Dreal[32]);
			Dreal[53] = fmaf(x[53], Drinvpow_5_0, Dreal[53]);
			Dreal[53] = fmaf(T(3.0000000000000000e+00), x[17]*Drinvpow_4_1, Dreal[53]);
			Dreal[53] = fmaf(x[19], Drinvpow_4_1, Dreal[53]);
			Dreal[53] = fmaf(T(3.0000000000000000e+00), x[3]*Drinvpow_3_2, Dreal[53]);
			Dreal[16] = fmaf(x[16], Drinvpow_3_0, Dreal[16]);
			Dreal[16] = fmaf(T(3.0000000000000000e+00), x[2]*Drinvpow_2_1, Dreal[16]);
			Dreal[31] = fmaf(x[31], Drinvpow_4_0, Dreal[31]);
			Dreal[31] = fmaf(T(3.0000000000000000e+00), x[8]*Drinvpow_3_1, Dreal[31]);
			Dreal[52] = fmaf(x[52], Drinvpow_5_0, Dreal[52]);
			Dreal[52] = fmaf(x[16], Drinvpow_4_1, Dreal[52]);
			Dreal[52] = fmaf(T(3.0000000000000000e+00), x[18]*Drinvpow_4_1, Dreal[52]);
			Dreal[52] = fmaf(T(3.0000000000000000e+00), x[2]*Drinvpow_3_2, Dreal[52]);
			Dreal[30] = fmaf(x[30], Drinvpow_4_0, Dreal[30]);
			Dreal[30] = fmaf(T(6.0000000000000000e+00), x[7]*Drinvpow_3_1, Dreal[30]);
			Dreal[30] = fmaf(T(3.0000000000000000e+00), x[0]*Drinvpow_2_2, Dreal[30]);
			Dreal[51] = fmaf(x[51], Drinvpow_5_0, Dreal[51]);
			Dreal[51] = fmaf(T(6.0000000000000000e+00), x[17]*Drinvpow_4_1, Dreal[51]);
			Dreal[51] = fmaf(T(3.0000000000000000e+00), x[3]*Drinvpow_3_2, Dreal[51]);
			Dreal[50] = fmaf(x[50], Drinvpow_5_0, Dreal[50]);
			Dreal[50] = fmaf(T(1.0000000000000000e+01), x[16]*Drinvpow_4_1, Dreal[50]);
			Dreal[50] = fmaf(T(1.5000000000000000e+01), x[2]*Drinvpow_3_2, Dreal[50]);
			Dreal[1] = fmaf(x[1], Drinvpow_1_0, Dreal[1]);
			Dreal[6] = fmaf(x[6], Drinvpow_2_0, Dreal[6]);
			Dreal[15] = fmaf(x[15], Drinvpow_3_0, Dreal[15]);
			Dreal[15] = fmaf(x[1], Drinvpow_2_1, Dreal[15]);
			Dreal[29] = fmaf(x[29], Drinvpow_4_0, Dreal[29]);
			Dreal[29] = fmaf(T(3.0000000000000000e+00), x[6]*Drinvpow_3_1, Dreal[29]);
			Dreal[49] = fmaf(x[49], Drinvpow_5_0, Dreal[49]);
			Dreal[49] = fmaf(T(6.0000000000000000e+00), x[15]*Drinvpow_4_1, Dreal[49]);
			Dreal[49] = fmaf(T(3.0000000000000000e+00), x[1]*Drinvpow_3_2, Dreal[49]);
			Dreal[5] = fmaf(x[5], Drinvpow_2_0, Dreal[5]);
			Dreal[14] = fmaf(x[14], Drinvpow_3_0, Dreal[14]);
			Dreal[28] = fmaf(x[28], Drinvpow_4_0, Dreal[28]);
			Dreal[28] = fmaf(x[5], Drinvpow_3_1, Dreal[28]);
			Dreal[48] = fmaf(x[48], Drinvpow_5_0, Dreal[48]);
			Dreal[48] = fmaf(T(3.0000000000000000e+00), x[14]*Drinvpow_4_1, Dreal[48]);
			Dreal[13] = fmaf(x[13], Drinvpow_3_0, Dreal[13]);
			Dreal[13] = fmaf(x[1], Drinvpow_2_1, Dreal[13]);
			Dreal[27] = fmaf(x[27], Drinvpow_4_0, Dreal[27]);
			Dreal[27] = fmaf(x[6], Drinvpow_3_1, Dreal[27]);
			Dreal[47] = fmaf(x[47], Drinvpow_5_0, Dreal[47]);
			Dreal[47] = fmaf(x[13], Drinvpow_4_1, Dreal[47]);
			Dreal[47] = fmaf(x[15], Drinvpow_4_1, Dreal[47]);
			Dreal[47] = fmaf(x[1], Drinvpow_3_2, Dreal[47]);
			Dreal[26] = fmaf(x[26], Drinvpow_4_0, Dreal[26]);
			Dreal[26] = fmaf(T(3.0000000000000000e+00), x[5]*Drinvpow_3_1, Dreal[26]);
			Dreal[46] = fmaf(x[46], Drinvpow_5_0, Dreal[46]);
			Dreal[46] = fmaf(T(3.0000000000000000e+00), x[14]*Drinvpow_4_1, Dreal[46]);
			Dreal[45] = fmaf(x[45], Drinvpow_5_0, Dreal[45]);
			Dreal[45] = fmaf(T(6.0000000000000000e+00), x[13]*Drinvpow_4_1, Dreal[45]);
			Dreal[45] = fmaf(T(3.0000000000000000e+00), x[1]*Drinvpow_3_2, Dreal[45]);
			Dreal[4] = fmaf(x[4], Drinvpow_2_0, Dreal[4]);
			Dreal[4] = fmaf(x[0], Drinvpow_1_1, Dreal[4]);
			Dreal[12] = fmaf(x[12], Drinvpow_3_0, Dreal[12]);
			Dreal[12] = fmaf(x[3], Drinvpow_2_1, Dreal[12]);
			Dreal[25] = fmaf(x[25], Drinvpow_4_0, Dreal[25]);
			Dreal[25] = fmaf(x[4], Drinvpow_3_1, Dreal[25]);
			Dreal[25] = fmaf(x[9], Drinvpow_3_1, Dreal[25]);
			Dreal[25] = fmaf(x[0], Drinvpow_2_2, Dreal[25]);
			Dreal[44] = fmaf(x[44], Drinvpow_5_0, Dreal[44]);
			Dreal[44] = fmaf(T(3.0000000000000000e+00), x[12]*Drinvpow_4_1, Dreal[44]);
			Dreal[44] = fmaf(x[19], Drinvpow_4_1, Dreal[44]);
			Dreal[44] = fmaf(T(3.0000000000000000e+00), x[3]*Drinvpow_3_2, Dreal[44]);
			Dreal[11] = fmaf(x[11], Drinvpow_3_0, Dreal[11]);
			Dreal[11] = fmaf(x[2], Drinvpow_2_1, Dreal[11]);
			Dreal[24] = fmaf(x[24], Drinvpow_4_0, Dreal[24]);
			Dreal[24] = fmaf(x[8], Drinvpow_3_1, Dreal[24]);
			Dreal[43] = fmaf(x[43], Drinvpow_5_0, Dreal[43]);
			Dreal[43] = fmaf(x[11], Drinvpow_4_1, Dreal[43]);
			Dreal[43] = fmaf(x[18], Drinvpow_4_1, Dreal[43]);
			Dreal[43] = fmaf(x[2], Drinvpow_3_2, Dreal[43]);
			Dreal[23] = fmaf(x[23], Drinvpow_4_0, Dreal[23]);
			Dreal[23] = fmaf(x[4], Drinvpow_3_1, Dreal[23]);
			Dreal[23] = fmaf(x[7], Drinvpow_3_1, Dreal[23]);
			Dreal[23] = fmaf(x[0], Drinvpow_2_2, Dreal[23]);
			Dreal[42] = fmaf(x[42], Drinvpow_5_0, Dreal[42]);
			Dreal[42] = fmaf(x[12], Drinvpow_4_1, Dreal[42]);
			Dreal[42] = fmaf(x[17], Drinvpow_4_1, Dreal[42]);
			Dreal[42] = fmaf(x[3], Drinvpow_3_2, Dreal[42]);
			Dreal[41] = fmaf(x[41], Drinvpow_5_0, Dreal[41]);
			Dreal[41] = fmaf(T(3.0000000000000000e+00), x[11]*Drinvpow_4_1, Dreal[41]);
			Dreal[41] = fmaf(x[16], Drinvpow_4_1, Dreal[41]);
			Dreal[41] = fmaf(T(3.0000000000000000e+00), x[2]*Drinvpow_3_2, Dreal[41]);
			Dreal[10] = fmaf(x[10], Drinvpow_3_0, Dreal[10]);
			Dreal[10] = fmaf(T(3.0000000000000000e+00), x[1]*Drinvpow_2_1, Dreal[10]);
			Dreal[22] = fmaf(x[22], Drinvpow_4_0, Dreal[22]);
			Dreal[22] = fmaf(T(3.0000000000000000e+00), x[6]*Drinvpow_3_1, Dreal[22]);
			Dreal[40] = fmaf(x[40], Drinvpow_5_0, Dreal[40]);
			Dreal[40] = fmaf(x[10], Drinvpow_4_1, Dreal[40]);
			Dreal[40] = fmaf(T(3.0000000000000000e+00), x[15]*Drinvpow_4_1, Dreal[40]);
			Dreal[40] = fmaf(T(3.0000000000000000e+00), x[1]*Drinvpow_3_2, Dreal[40]);
			Dreal[21] = fmaf(x[21], Drinvpow_4_0, Dreal[21]);
			Dreal[21] = fmaf(T(3.0000000000000000e+00), x[5]*Drinvpow_3_1, Dreal[21]);
			Dreal[39] = fmaf(x[39], Drinvpow_5_0, Dreal[39]);
			Dreal[39] = fmaf(T(3.0000000000000000e+00), x[14]*Drinvpow_4_1, Dreal[39]);
			Dreal[38] = fmaf(x[38], Drinvpow_5_0, Dreal[38]);
			Dreal[38] = fmaf(x[10], Drinvpow_4_1, Dreal[38]);
			Dreal[38] = fmaf(T(3.0000000000000000e+00), x[13]*Drinvpow_4_1, Dreal[38]);
			Dreal[38] = fmaf(T(3.0000000000000000e+00), x[1]*Drinvpow_3_2, Dreal[38]);
			Dreal[20] = fmaf(x[20], Drinvpow_4_0, Dreal[20]);
			Dreal[20] = fmaf(T(6.0000000000000000e+00), x[4]*Drinvpow_3_1, Dreal[20]);
			Dreal[20] = fmaf(T(3.0000000000000000e+00), x[0]*Drinvpow_2_2, Dreal[20]);
			Dreal[37] = fmaf(x[37], Drinvpow_5_0, Dreal[37]);
			Dreal[37] = fmaf(T(6.0000000000000000e+00), x[12]*Drinvpow_4_1, Dreal[37]);
			Dreal[37] = fmaf(T(3.0000000000000000e+00), x[3]*Drinvpow_3_2, Dreal[37]);
			Dreal[36] = fmaf(x[36], Drinvpow_5_0, Dreal[36]);
			Dreal[36] = fmaf(T(6.0000000000000000e+00), x[11]*Drinvpow_4_1, Dreal[36]);
			Dreal[36] = fmaf(T(3.0000000000000000e+00), x[2]*Drinvpow_3_2, Dreal[36]);
			Dreal[35] = fmaf(x[35], Drinvpow_5_0, Dreal[35]);
			Dreal[35] = fmaf(T(1.0000000000000000e+01), x[10]*Drinvpow_4_1, Dreal[35]);
			Dreal[35] = fmaf(T(1.5000000000000000e+01), x[1]*Drinvpow_3_2, Dreal[35]);
		}
	}
	const auto foursz = econst.nfour();
	for (int i = 0; i < foursz; i++) {
		const auto &h = econst.four_index(i);
		const auto& D0 = econst.four_expansion(i);
		const T hdotx = fmaf(h[0], X[0], fmaf(h[1], X[1], h[2] * X[2]));
		T cn, sn;
		sincos(T(2.0 * M_PI * SCALE_FACTOR_INV1) * hdotx, &sn, &cn);
		Dfour[0] = fmaf(cn, D0[0], Dfour[0]);
		Dfour[1] = fmaf(sn, D0[1], Dfour[1]);
		Dfour[2] = fmaf(sn, D0[2], Dfour[2]);
		Dfour[3] = fmaf(cn, D0[3], Dfour[3]);
		Dfour[4] = fmaf(cn, D0[4], Dfour[4]);
		Dfour[5] = fmaf(cn, D0[5], Dfour[5]);
		Dfour[6] = fmaf(sn, D0[6], Dfour[6]);
		Dfour[7] = fmaf(sn, D0[7], Dfour[7]);
		Dfour[8] = fmaf(sn, D0[8], Dfour[8]);
		Dfour[9] = fmaf(sn, D0[9], Dfour[9]);
		Dfour[10] = fmaf(cn, D0[10], Dfour[10]);
		Dfour[11] = fmaf(cn, D0[11], Dfour[11]);
		Dfour[12] = fmaf(cn, D0[12], Dfour[12]);
		Dfour[13] = fmaf(cn, D0[13], Dfour[13]);
		Dfour[14] = fmaf(cn, D0[14], Dfour[14]);
		Dfour[15] = fmaf(sn, D0[15], Dfour[15]);
		Dfour[16] = fmaf(sn, D0[16], Dfour[16]);
		Dfour[17] = fmaf(sn, D0[17], Dfour[17]);
		Dfour[18] = fmaf(sn, D0[18], Dfour[18]);
		Dfour[19] = fmaf(sn, D0[19], Dfour[19]);
		Dfour[20] = fmaf(sn, D0[20], Dfour[20]);
		Dfour[21] = fmaf(sn, D0[21], Dfour[21]);
		Dfour[22] = fmaf(cn, D0[22], Dfour[22]);
		Dfour[23] = fmaf(cn, D0[23], Dfour[23]);
		Dfour[24] = fmaf(sn, D0[24], Dfour[24]);
		Dfour[25] = fmaf(sn, D0[25], Dfour[25]);
		Dfour[26] = fmaf(sn, D0[26], Dfour[26]);
		Dfour[27] = fmaf(cn, D0[27], Dfour[27]);
		Dfour[28] = fmaf(cn, D0[28], Dfour[28]);
		Dfour[29] = fmaf(cn, D0[29], Dfour[29]);
		Dfour[30] = fmaf(cn, D0[30], Dfour[30]);
		Dfour[31] = fmaf(sn, D0[31], Dfour[31]);
		Dfour[32] = fmaf(sn, D0[32], Dfour[32]);
		Dfour[33] = fmaf(sn, D0[33], Dfour[33]);
		Dfour[34] = fmaf(sn, D0[34], Dfour[34]);
		Dfour[35] = fmaf(sn, D0[35], Dfour[35]);
		Dfour[36] = fmaf(cn, D0[36], Dfour[36]);
	}
	T Dreal_2_1_000 = Dreal[9];
	T Dreal_3_1_001 = Dreal[19];
	T Dreal_4_1_002 = Dreal[34];
	T Dreal_5_1_003 = Dreal[55];
	T Dreal_3_1_010 = Dreal[18];
	T Dreal_4_1_011 = Dreal[33];
	T Dreal_5_1_012 = Dreal[54];
	T Dreal_4_1_020 = Dreal[32];
	T Dreal_5_1_021 = Dreal[53];
	T Dreal_5_1_030 = Dreal[52];
	T Dreal_3_1_100 = Dreal[15];
	T Dreal_4_1_101 = Dreal[29];
	T Dreal_5_1_102 = Dreal[49];
	T Dreal_4_1_110 = Dreal[28];
	T Dreal_5_1_111 = Dreal[48];
	T Dreal_5_1_120 = Dreal[47];
	T Dreal_4_1_200 = Dreal[25];
	T Dreal_5_1_201 = Dreal[44];
	T Dreal_5_1_210 = Dreal[43];
	T Dreal_5_1_300 = Dreal[40];
	T Dreal_4_2_000 = Dreal[34];
	T Dreal_5_2_001 = Dreal[55];
	T Dreal_5_2_010 = Dreal[54];
	T Dreal_5_2_100 = Dreal[49];
	Dreal_2_1_000 += Dreal[7];
	Dreal_5_1_120 += Dreal[45];
	Dreal_2_1_000 += Dreal[4];
	Dreal_5_1_120 += Dreal[38];
	Dreal_3_1_001 += Dreal[17];
	Dreal_4_1_200 += Dreal[23];
	Dreal_3_1_001 += Dreal[12];
	Dreal_4_1_200 += Dreal[20];
	Dreal_4_1_002 += Dreal[32];
	Dreal_5_1_201 += Dreal[42];
	Dreal_4_1_002 += Dreal[25];
	Dreal_5_1_201 += Dreal[37];
	Dreal_5_1_003 += Dreal[53];
	Dreal_5_1_210 += Dreal[41];
	Dreal_5_1_003 += Dreal[44];
	Dreal_5_1_210 += Dreal[36];
	Dreal_3_1_010 += Dreal[16];
	Dreal_5_1_300 += Dreal[38];
	Dreal_3_1_010 += Dreal[11];
	Dreal_5_1_300 += Dreal[35];
	Dreal_4_1_011 += Dreal[31];
	Dreal_4_2_000 = fmaf(T(2.0000000000000000e+00), Dreal[32], Dreal_4_2_000);
	Dreal_4_1_011 += Dreal[24];
	Dreal_4_2_000 += Dreal[30];
	Dreal_5_1_012 += Dreal[52];
	Dreal_4_2_000 = fmaf(T(2.0000000000000000e+00), Dreal[25], Dreal_4_2_000);
	Dreal_5_1_012 += Dreal[43];
	Dreal_4_2_000 = fmaf(T(2.0000000000000000e+00), Dreal[23], Dreal_4_2_000);
	Dreal_4_1_020 += Dreal[30];
	Dreal_4_2_000 += Dreal[20];
	Dreal_4_1_020 += Dreal[23];
	Dreal_5_2_001 = fmaf(T(2.0000000000000000e+00), Dreal[53], Dreal_5_2_001);
	Dreal_5_1_021 += Dreal[51];
	Dreal_5_2_001 += Dreal[51];
	Dreal_5_1_021 += Dreal[42];
	Dreal_5_2_001 = fmaf(T(2.0000000000000000e+00), Dreal[44], Dreal_5_2_001);
	Dreal_5_1_030 += Dreal[50];
	Dreal_5_2_001 = fmaf(T(2.0000000000000000e+00), Dreal[42], Dreal_5_2_001);
	Dreal_5_1_030 += Dreal[41];
	Dreal_5_2_001 += Dreal[37];
	Dreal_3_1_100 += Dreal[13];
	Dreal_5_2_010 = fmaf(T(2.0000000000000000e+00), Dreal[52], Dreal_5_2_010);
	Dreal_3_1_100 += Dreal[10];
	Dreal_5_2_010 += Dreal[50];
	Dreal_4_1_101 += Dreal[27];
	Dreal_5_2_010 = fmaf(T(2.0000000000000000e+00), Dreal[43], Dreal_5_2_010);
	Dreal_4_1_101 += Dreal[22];
	Dreal_5_2_010 = fmaf(T(2.0000000000000000e+00), Dreal[41], Dreal_5_2_010);
	Dreal_5_1_102 += Dreal[47];
	Dreal_5_2_010 += Dreal[36];
	Dreal_5_1_102 += Dreal[40];
	Dreal_5_2_100 = fmaf(T(2.0000000000000000e+00), Dreal[47], Dreal_5_2_100);
	Dreal_4_1_110 += Dreal[26];
	Dreal_5_2_100 += Dreal[45];
	Dreal_4_1_110 += Dreal[21];
	Dreal_5_2_100 = fmaf(T(2.0000000000000000e+00), Dreal[40], Dreal_5_2_100);
	Dreal_5_1_111 += Dreal[46];
	Dreal_5_2_100 = fmaf(T(2.0000000000000000e+00), Dreal[38], Dreal_5_2_100);
	Dreal_5_1_111 += Dreal[39];
	Dreal_5_2_100 += Dreal[35];
	D[0] = Dreal[0];
	D[21] = Dreal[3];
	D[36] = Dreal[9];
	D[2] = Dreal[2];
	D[23] = Dreal[8];
	D[5] = Dreal[7];
	D[26] = Dreal[17];
	D[9] = Dreal[16];
	D[30] = Dreal[31];
	D[14] = Dreal[30];
	D[35] = Dreal[51];
	D[20] = Dreal[50];
	D[1] = Dreal[1];
	D[22] = Dreal[6];
	D[4] = Dreal[5];
	D[25] = Dreal[14];
	D[8] = Dreal[13];
	D[29] = Dreal[27];
	D[13] = Dreal[26];
	D[34] = Dreal[46];
	D[19] = Dreal[45];
	D[3] = Dreal[4];
	D[24] = Dreal[12];
	D[7] = Dreal[11];
	D[28] = Dreal[24];
	D[12] = Dreal[23];
	D[33] = Dreal[42];
	D[18] = Dreal[41];
	D[6] = Dreal[10];
	D[27] = Dreal[22];
	D[11] = Dreal[21];
	D[32] = Dreal[39];
	D[17] = Dreal[38];
	D[10] = Dreal[20];
	D[31] = Dreal[37];
	D[16] = Dreal[36];
	D[15] = Dreal[35];
	D[26] = fmaf(T(-2.0000000000000001e-01), Dreal_3_1_001, D[26]);
	D[33] = fmaf(T(-1.1111111111111112e-01), Dreal_5_1_201, D[33]);
	D[9] = fmaf(T(-5.9999999999999998e-01), Dreal_3_1_010, D[9]);
	D[33] = fmaf(T(-1.1111111111111112e-01), Dreal_5_1_021, D[33]);
	D[30] = fmaf(T(-4.2857142857142860e-01), Dreal_4_1_011, D[30]);
	D[33] = fmaf(T(1.5873015873015876e-02), Dreal_5_2_001, D[33]);
	D[14] = fmaf(T(-8.5714285714285721e-01), Dreal_4_1_020, D[14]);
	D[18] = fmaf(T(-3.3333333333333337e-01), Dreal_5_1_210, D[18]);
	D[14] = fmaf(T(8.5714285714285715e-02), Dreal_4_2_000, D[14]);
	D[18] = fmaf(T(-1.1111111111111112e-01), Dreal_5_1_030, D[18]);
	D[35] = fmaf(T(-6.6666666666666674e-01), Dreal_5_1_021, D[35]);
	D[18] = fmaf(T(4.7619047619047623e-02), Dreal_5_2_010, D[18]);
	D[35] = fmaf(T(4.7619047619047623e-02), Dreal_5_2_001, D[35]);
	D[6] = fmaf(T(-5.9999999999999998e-01), Dreal_3_1_100, D[6]);
	D[20] = fmaf(T(-1.1111111111111112e+00), Dreal_5_1_030, D[20]);
	D[27] = fmaf(T(-4.2857142857142860e-01), Dreal_4_1_101, D[27]);
	D[20] = fmaf(T(2.3809523809523811e-01), Dreal_5_2_010, D[20]);
	D[11] = fmaf(T(-4.2857142857142860e-01), Dreal_4_1_110, D[11]);
	D[8] = fmaf(T(-2.0000000000000001e-01), Dreal_3_1_100, D[8]);
	D[32] = fmaf(T(-3.3333333333333337e-01), Dreal_5_1_111, D[32]);
	D[29] = fmaf(T(-1.4285714285714288e-01), Dreal_4_1_101, D[29]);
	D[17] = fmaf(T(-1.1111111111111112e-01), Dreal_5_1_300, D[17]);
	D[13] = fmaf(T(-4.2857142857142860e-01), Dreal_4_1_110, D[13]);
	D[17] = fmaf(T(-3.3333333333333337e-01), Dreal_5_1_120, D[17]);
	D[34] = fmaf(T(-3.3333333333333337e-01), Dreal_5_1_111, D[34]);
	D[17] = fmaf(T(4.7619047619047623e-02), Dreal_5_2_100, D[17]);
	D[19] = fmaf(T(-6.6666666666666674e-01), Dreal_5_1_120, D[19]);
	D[10] = fmaf(T(-8.5714285714285721e-01), Dreal_4_1_200, D[10]);
	D[19] = fmaf(T(4.7619047619047623e-02), Dreal_5_2_100, D[19]);
	D[10] = fmaf(T(8.5714285714285715e-02), Dreal_4_2_000, D[10]);
	D[24] = fmaf(T(-2.0000000000000001e-01), Dreal_3_1_001, D[24]);
	D[31] = fmaf(T(-6.6666666666666674e-01), Dreal_5_1_201, D[31]);
	D[7] = fmaf(T(-2.0000000000000001e-01), Dreal_3_1_010, D[7]);
	D[31] = fmaf(T(4.7619047619047623e-02), Dreal_5_2_001, D[31]);
	D[28] = fmaf(T(-1.4285714285714288e-01), Dreal_4_1_011, D[28]);
	D[16] = fmaf(T(-6.6666666666666674e-01), Dreal_5_1_210, D[16]);
	D[12] = fmaf(T(-1.4285714285714288e-01), Dreal_4_1_200, D[12]);
	D[16] = fmaf(T(4.7619047619047623e-02), Dreal_5_2_010, D[16]);
	D[12] = fmaf(T(-1.4285714285714288e-01), Dreal_4_1_020, D[12]);
	D[15] = fmaf(T(-1.1111111111111112e+00), Dreal_5_1_300, D[15]);
	D[12] = fmaf(T(2.8571428571428574e-02), Dreal_4_2_000, D[12]);
	D[15] = fmaf(T(2.3809523809523811e-01), Dreal_5_2_100, D[15]);
	flops += 114 * foursz + 320;
	D = D + Dfour;
	D[0] = T(7.8539816339744828e-01 * SCALE_FACTOR_INV1) + D[0]; 
	return flops;
}


template<class T>
CUDA_EXPORT
inline int M2L(tensor_trless_sym<T, 2>& L, const tensor_trless_sym<T, 5>& M, const tensor_trless_sym<T, 6>& D, bool do_phi) {
	const T M000 =  (M[0]);
	const T M001 =  (M[15]);
	const T M002 =  (M[25]);
	const T M003 = -(M[18]+(M[20]));
	const T M004 =  (M[10]+fmaf(T(2),M[12],(M[14])));
	const T M010 =  (M[2]);
	const T M011 =  (M[17]);
	const T M012 = -(M[7]+(M[9]));
	const T M013 = -(M[22]+(M[24]));
	const T M020 =  (M[5]);
	const T M021 =  (M[20]);
	const T M022 = -(M[12]+(M[14]));
	const T M030 =  (M[9]);
	const T M031 =  (M[24]);
	const T M040 =  (M[14]);
	const T M100 =  (M[1]);
	const T M101 =  (M[16]);
	const T M102 = -(M[6]+(M[8]));
	const T M103 = -(M[21]+(M[23]));
	const T M110 =  (M[4]);
	const T M111 =  (M[19]);
	const T M112 = -(M[11]+(M[13]));
	const T M120 =  (M[8]);
	const T M121 =  (M[23]);
	const T M130 =  (M[13]);
	const T M200 =  (M[3]);
	const T M201 =  (M[18]);
	const T M202 = -(M[10]+(M[12]));
	const T M210 =  (M[7]);
	const T M211 =  (M[22]);
	const T M220 =  (M[12]);
	const T M300 =  (M[6]);
	const T M301 =  (M[21]);
	const T M310 =  (M[11]);
	const T M400 =  (M[10]);
	const T D000 =  (D[0]);
	const T D001 =  (D[21]);
	const T D002 =  (D[36]);
	const T D003 = -(D[24]+(D[26]));
	const T D004 =  (D[10]+fmaf(T(2),D[12],(D[14])));
	const T D005 =  (D[31]+fmaf(T(2),D[33],(D[35])));
	const T D010 =  (D[2]);
	const T D011 =  (D[23]);
	const T D012 = -(D[7]+(D[9]));
	const T D013 = -(D[28]+(D[30]));
	const T D014 =  (D[16]+fmaf(T(2),D[18],(D[20])));
	const T D020 =  (D[5]);
	const T D021 =  (D[26]);
	const T D022 = -(D[12]+(D[14]));
	const T D023 = -(D[33]+(D[35]));
	const T D030 =  (D[9]);
	const T D031 =  (D[30]);
	const T D032 = -(D[18]+(D[20]));
	const T D040 =  (D[14]);
	const T D041 =  (D[35]);
	const T D050 =  (D[20]);
	const T D100 =  (D[1]);
	const T D101 =  (D[22]);
	const T D102 = -(D[6]+(D[8]));
	const T D103 = -(D[27]+(D[29]));
	const T D104 =  (D[15]+fmaf(T(2),D[17],(D[19])));
	const T D110 =  (D[4]);
	const T D111 =  (D[25]);
	const T D112 = -(D[11]+(D[13]));
	const T D113 = -(D[32]+(D[34]));
	const T D120 =  (D[8]);
	const T D121 =  (D[29]);
	const T D122 = -(D[17]+(D[19]));
	const T D130 =  (D[13]);
	const T D131 =  (D[34]);
	const T D140 =  (D[19]);
	const T D200 =  (D[3]);
	const T D201 =  (D[24]);
	const T D202 = -(D[10]+(D[12]));
	const T D203 = -(D[31]+(D[33]));
	const T D210 =  (D[7]);
	const T D211 =  (D[28]);
	const T D212 = -(D[16]+(D[18]));
	const T D220 =  (D[12]);
	const T D221 =  (D[33]);
	const T D230 =  (D[18]);
	const T D300 =  (D[6]);
	const T D301 =  (D[27]);
	const T D302 = -(D[15]+(D[17]));
	const T D310 =  (D[11]);
	const T D311 =  (D[32]);
	const T D320 =  (D[17]);
	const T D400 =  (D[10]);
	const T D401 =  (D[31]);
	const T D410 =  (D[16]);
	const T D500 =  (D[15]);
	if( do_phi ) {
		L[0] *= T(2.4000000000000000e+01);
		L[0] = fmaf(M400, D400, L[0]);
		L[0] = fmaf(M004, D004, L[0]);
		L[0] = fmaf(M040, D040, L[0]);
		L[0] *= T(2.5000000000000000e-01);
		L[0] = fmaf(M310, D310, L[0]);
		L[0] = fmaf(M003, D003, L[0]);
		L[0] = fmaf(M301, D301, L[0]);
		L[0] = fmaf(M300, D300, L[0]);
		L[0] = fmaf(M130, D130, L[0]);
		L[0] = fmaf(M013, D013, L[0]);
		L[0] = fmaf(M103, D103, L[0]);
		L[0] = fmaf(M030, D030, L[0]);
		L[0] = fmaf(M031, D031, L[0]);
		L[0] *= T(6.6666666666666663e-01);
		L[0] = fmaf(M022, D022, L[0]);
		L[0] = fmaf(M202, D202, L[0]);
		L[0] = fmaf(M220, D220, L[0]);
		L[0] *= T(5.0000000000000000e-01);
		L[0] = fmaf(M102, D102, L[0]);
		L[0] = fmaf(M210, D210, L[0]);
		L[0] = fmaf(M201, D201, L[0]);
		L[0] = fmaf(M200, D200, L[0]);
		L[0] = fmaf(M211, D211, L[0]);
		L[0] = fmaf(M121, D121, L[0]);
		L[0] = fmaf(M120, D120, L[0]);
		L[0] = fmaf(M112, D112, L[0]);
		L[0] = fmaf(M021, D021, L[0]);
		L[0] = fmaf(M020, D020, L[0]);
		L[0] = fmaf(M012, D012, L[0]);
		L[0] = fmaf(M002, D002, L[0]);
		L[0] *= T(5.0000000000000000e-01);
		L[0] = fmaf(M111, D111, L[0]);
		L[0] = fmaf(M110, D110, L[0]);
		L[0] = fmaf(M000, D000, L[0]);
		L[0] = fmaf(M101, D101, L[0]);
		L[0] = fmaf(M100, D100, L[0]);
		L[0] = fmaf(M011, D011, L[0]);
		L[0] = fmaf(M010, D010, L[0]);
		L[0] = fmaf(M001, D001, L[0]);
	}
	L[1] *= T(2.4000000000000000e+01);
	L[2] *= T(2.4000000000000000e+01);
	L[1] = fmaf(M400, D500, L[1]);
	L[2] = fmaf(M400, D410, L[2]);
	L[1] = fmaf(M004, D104, L[1]);
	L[2] = fmaf(M004, D014, L[2]);
	L[1] = fmaf(M040, D140, L[1]);
	L[2] = fmaf(M040, D050, L[2]);
	L[1] *= T(2.5000000000000000e-01);
	L[2] *= T(2.5000000000000000e-01);
	L[1] = fmaf(M310, D410, L[1]);
	L[2] = fmaf(M310, D320, L[2]);
	L[1] = fmaf(M003, D103, L[1]);
	L[2] = fmaf(M003, D013, L[2]);
	L[1] = fmaf(M301, D401, L[1]);
	L[2] = fmaf(M301, D311, L[2]);
	L[1] = fmaf(M300, D400, L[1]);
	L[2] = fmaf(M300, D310, L[2]);
	L[1] = fmaf(M130, D230, L[1]);
	L[2] = fmaf(M130, D140, L[2]);
	L[1] = fmaf(M013, D113, L[1]);
	L[2] = fmaf(M013, D023, L[2]);
	L[1] = fmaf(M103, D203, L[1]);
	L[2] = fmaf(M103, D113, L[2]);
	L[1] = fmaf(M030, D130, L[1]);
	L[2] = fmaf(M030, D040, L[2]);
	L[1] = fmaf(M031, D131, L[1]);
	L[2] = fmaf(M031, D041, L[2]);
	L[1] *= T(6.6666666666666663e-01);
	L[2] *= T(6.6666666666666663e-01);
	L[1] = fmaf(M022, D122, L[1]);
	L[2] = fmaf(M022, D032, L[2]);
	L[1] = fmaf(M202, D302, L[1]);
	L[2] = fmaf(M202, D212, L[2]);
	L[1] = fmaf(M220, D320, L[1]);
	L[2] = fmaf(M220, D230, L[2]);
	L[1] *= T(5.0000000000000000e-01);
	L[2] *= T(5.0000000000000000e-01);
	L[1] = fmaf(M102, D202, L[1]);
	L[2] = fmaf(M102, D112, L[2]);
	L[1] = fmaf(M210, D310, L[1]);
	L[2] = fmaf(M210, D220, L[2]);
	L[1] = fmaf(M201, D301, L[1]);
	L[2] = fmaf(M201, D211, L[2]);
	L[1] = fmaf(M200, D300, L[1]);
	L[2] = fmaf(M200, D210, L[2]);
	L[1] = fmaf(M211, D311, L[1]);
	L[2] = fmaf(M211, D221, L[2]);
	L[1] = fmaf(M121, D221, L[1]);
	L[2] = fmaf(M121, D131, L[2]);
	L[1] = fmaf(M120, D220, L[1]);
	L[2] = fmaf(M120, D130, L[2]);
	L[1] = fmaf(M112, D212, L[1]);
	L[2] = fmaf(M112, D122, L[2]);
	L[1] = fmaf(M021, D121, L[1]);
	L[2] = fmaf(M021, D031, L[2]);
	L[1] = fmaf(M020, D120, L[1]);
	L[2] = fmaf(M020, D030, L[2]);
	L[1] = fmaf(M012, D112, L[1]);
	L[2] = fmaf(M012, D022, L[2]);
	L[1] = fmaf(M002, D102, L[1]);
	L[2] = fmaf(M002, D012, L[2]);
	L[1] *= T(5.0000000000000000e-01);
	L[2] *= T(5.0000000000000000e-01);
	L[1] = fmaf(M111, D211, L[1]);
	L[2] = fmaf(M111, D121, L[2]);
	L[1] = fmaf(M110, D210, L[1]);
	L[2] = fmaf(M110, D120, L[2]);
	L[1] = fmaf(M000, D100, L[1]);
	L[2] = fmaf(M000, D010, L[2]);
	L[1] = fmaf(M101, D201, L[1]);
	L[2] = fmaf(M101, D111, L[2]);
	L[1] = fmaf(M100, D200, L[1]);
	L[2] = fmaf(M100, D110, L[2]);
	L[1] = fmaf(M011, D111, L[1]);
	L[2] = fmaf(M011, D021, L[2]);
	L[1] = fmaf(M010, D110, L[1]);
	L[2] = fmaf(M010, D020, L[2]);
	L[1] = fmaf(M001, D101, L[1]);
	L[2] = fmaf(M001, D011, L[2]);
	L[3] *= T(2.4000000000000000e+01);
	L[3] = fmaf(M400, D401, L[3]);
	L[3] = fmaf(M004, D005, L[3]);
	L[3] = fmaf(M040, D041, L[3]);
	L[3] *= T(2.5000000000000000e-01);
	L[3] = fmaf(M310, D311, L[3]);
	L[3] = fmaf(M003, D004, L[3]);
	L[3] = fmaf(M301, D302, L[3]);
	L[3] = fmaf(M300, D301, L[3]);
	L[3] = fmaf(M130, D131, L[3]);
	L[3] = fmaf(M013, D014, L[3]);
	L[3] = fmaf(M103, D104, L[3]);
	L[3] = fmaf(M030, D031, L[3]);
	L[3] = fmaf(M031, D032, L[3]);
	L[3] *= T(6.6666666666666663e-01);
	L[3] = fmaf(M022, D023, L[3]);
	L[3] = fmaf(M202, D203, L[3]);
	L[3] = fmaf(M220, D221, L[3]);
	L[3] *= T(5.0000000000000000e-01);
	L[3] = fmaf(M102, D103, L[3]);
	L[3] = fmaf(M210, D211, L[3]);
	L[3] = fmaf(M201, D202, L[3]);
	L[3] = fmaf(M200, D201, L[3]);
	L[3] = fmaf(M211, D212, L[3]);
	L[3] = fmaf(M121, D122, L[3]);
	L[3] = fmaf(M120, D121, L[3]);
	L[3] = fmaf(M112, D113, L[3]);
	L[3] = fmaf(M021, D022, L[3]);
	L[3] = fmaf(M020, D021, L[3]);
	L[3] = fmaf(M012, D013, L[3]);
	L[3] = fmaf(M002, D003, L[3]);
	L[3] *= T(5.0000000000000000e-01);
	L[3] = fmaf(M111, D112, L[3]);
	L[3] = fmaf(M110, D111, L[3]);
	L[3] = fmaf(M000, D001, L[3]);
	L[3] = fmaf(M101, D102, L[3]);
	L[3] = fmaf(M100, D101, L[3]);
	L[3] = fmaf(M011, D012, L[3]);
	L[3] = fmaf(M010, D011, L[3]);
	L[3] = fmaf(M001, D002, L[3]);
	return 309 + do_phi * 75;
}


template<class T>
CUDA_EXPORT
inline int M2L(tensor_trless_sym<T, 6>& L, const tensor_trless_sym<T, 5>& M, const tensor_trless_sym<T, 6>& D, bool do_phi) {
	const T M000 =  (M[0]);
	const T M001 =  (M[15]);
	const T M002 =  (M[25]);
	const T M003 = -(M[18]+(M[20]));
	const T M004 =  (M[10]+fmaf(T(2),M[12],(M[14])));
	const T M010 =  (M[2]);
	const T M011 =  (M[17]);
	const T M012 = -(M[7]+(M[9]));
	const T M013 = -(M[22]+(M[24]));
	const T M020 =  (M[5]);
	const T M021 =  (M[20]);
	const T M022 = -(M[12]+(M[14]));
	const T M030 =  (M[9]);
	const T M031 =  (M[24]);
	const T M040 =  (M[14]);
	const T M100 =  (M[1]);
	const T M101 =  (M[16]);
	const T M102 = -(M[6]+(M[8]));
	const T M103 = -(M[21]+(M[23]));
	const T M110 =  (M[4]);
	const T M111 =  (M[19]);
	const T M112 = -(M[11]+(M[13]));
	const T M120 =  (M[8]);
	const T M121 =  (M[23]);
	const T M130 =  (M[13]);
	const T M200 =  (M[3]);
	const T M201 =  (M[18]);
	const T M202 = -(M[10]+(M[12]));
	const T M210 =  (M[7]);
	const T M211 =  (M[22]);
	const T M220 =  (M[12]);
	const T M300 =  (M[6]);
	const T M301 =  (M[21]);
	const T M310 =  (M[11]);
	const T M400 =  (M[10]);
	const T D000 =  (D[0]);
	const T D001 =  (D[21]);
	const T D002 =  (D[36]);
	const T D003 = -(D[24]+(D[26]));
	const T D004 =  (D[10]+fmaf(T(2),D[12],(D[14])));
	const T D005 =  (D[31]+fmaf(T(2),D[33],(D[35])));
	const T D010 =  (D[2]);
	const T D011 =  (D[23]);
	const T D012 = -(D[7]+(D[9]));
	const T D013 = -(D[28]+(D[30]));
	const T D014 =  (D[16]+fmaf(T(2),D[18],(D[20])));
	const T D020 =  (D[5]);
	const T D021 =  (D[26]);
	const T D022 = -(D[12]+(D[14]));
	const T D023 = -(D[33]+(D[35]));
	const T D030 =  (D[9]);
	const T D031 =  (D[30]);
	const T D032 = -(D[18]+(D[20]));
	const T D040 =  (D[14]);
	const T D041 =  (D[35]);
	const T D050 =  (D[20]);
	const T D100 =  (D[1]);
	const T D101 =  (D[22]);
	const T D102 = -(D[6]+(D[8]));
	const T D103 = -(D[27]+(D[29]));
	const T D104 =  (D[15]+fmaf(T(2),D[17],(D[19])));
	const T D110 =  (D[4]);
	const T D111 =  (D[25]);
	const T D112 = -(D[11]+(D[13]));
	const T D113 = -(D[32]+(D[34]));
	const T D120 =  (D[8]);
	const T D121 =  (D[29]);
	const T D122 = -(D[17]+(D[19]));
	const T D130 =  (D[13]);
	const T D131 =  (D[34]);
	const T D140 =  (D[19]);
	const T D200 =  (D[3]);
	const T D201 =  (D[24]);
	const T D202 = -(D[10]+(D[12]));
	const T D203 = -(D[31]+(D[33]));
	const T D210 =  (D[7]);
	const T D211 =  (D[28]);
	const T D212 = -(D[16]+(D[18]));
	const T D220 =  (D[12]);
	const T D221 =  (D[33]);
	const T D230 =  (D[18]);
	const T D300 =  (D[6]);
	const T D301 =  (D[27]);
	const T D302 = -(D[15]+(D[17]));
	const T D310 =  (D[11]);
	const T D311 =  (D[32]);
	const T D320 =  (D[17]);
	const T D400 =  (D[10]);
	const T D401 =  (D[31]);
	const T D410 =  (D[16]);
	const T D500 =  (D[15]);
	if( do_phi ) {
		L[0] *= T(2.4000000000000000e+01);
		L[0] = fmaf(M400, D400, L[0]);
		L[0] = fmaf(M004, D004, L[0]);
		L[0] = fmaf(M040, D040, L[0]);
		L[0] *= T(2.5000000000000000e-01);
		L[0] = fmaf(M310, D310, L[0]);
		L[0] = fmaf(M003, D003, L[0]);
		L[0] = fmaf(M301, D301, L[0]);
		L[0] = fmaf(M300, D300, L[0]);
		L[0] = fmaf(M130, D130, L[0]);
		L[0] = fmaf(M013, D013, L[0]);
		L[0] = fmaf(M103, D103, L[0]);
		L[0] = fmaf(M030, D030, L[0]);
		L[0] = fmaf(M031, D031, L[0]);
		L[0] *= T(6.6666666666666663e-01);
		L[0] = fmaf(M022, D022, L[0]);
		L[0] = fmaf(M202, D202, L[0]);
		L[0] = fmaf(M220, D220, L[0]);
		L[0] *= T(5.0000000000000000e-01);
		L[0] = fmaf(M102, D102, L[0]);
		L[0] = fmaf(M210, D210, L[0]);
		L[0] = fmaf(M201, D201, L[0]);
		L[0] = fmaf(M200, D200, L[0]);
		L[0] = fmaf(M211, D211, L[0]);
		L[0] = fmaf(M121, D121, L[0]);
		L[0] = fmaf(M120, D120, L[0]);
		L[0] = fmaf(M112, D112, L[0]);
		L[0] = fmaf(M021, D021, L[0]);
		L[0] = fmaf(M020, D020, L[0]);
		L[0] = fmaf(M012, D012, L[0]);
		L[0] = fmaf(M002, D002, L[0]);
		L[0] *= T(5.0000000000000000e-01);
		L[0] = fmaf(M111, D111, L[0]);
		L[0] = fmaf(M110, D110, L[0]);
		L[0] = fmaf(M000, D000, L[0]);
		L[0] = fmaf(M101, D101, L[0]);
		L[0] = fmaf(M100, D100, L[0]);
		L[0] = fmaf(M011, D011, L[0]);
		L[0] = fmaf(M010, D010, L[0]);
		L[0] = fmaf(M001, D001, L[0]);
	}
	L[1] *= T(2.4000000000000000e+01);
	L[10] = fmaf(M000, D400, L[10]);
	L[1] = fmaf(M400, D500, L[1]);
	L[10] = fmaf(M001, D401, L[10]);
	L[1] = fmaf(M004, D104, L[1]);
	L[10] = fmaf(M010, D410, L[10]);
	L[1] = fmaf(M040, D140, L[1]);
	L[10] = fmaf(M100, D500, L[10]);
	L[1] *= T(2.5000000000000000e-01);
	L[11] = fmaf(M000, D310, L[11]);
	L[1] = fmaf(M310, D410, L[1]);
	L[11] = fmaf(M001, D311, L[11]);
	L[1] = fmaf(M003, D103, L[1]);
	L[11] = fmaf(M010, D320, L[11]);
	L[1] = fmaf(M301, D401, L[1]);
	L[11] = fmaf(M100, D410, L[11]);
	L[1] = fmaf(M300, D400, L[1]);
	L[12] = fmaf(M000, D220, L[12]);
	L[1] = fmaf(M130, D230, L[1]);
	L[12] = fmaf(M001, D221, L[12]);
	L[1] = fmaf(M013, D113, L[1]);
	L[12] = fmaf(M010, D230, L[12]);
	L[1] = fmaf(M103, D203, L[1]);
	L[12] = fmaf(M100, D320, L[12]);
	L[1] = fmaf(M030, D130, L[1]);
	L[13] = fmaf(M000, D130, L[13]);
	L[1] = fmaf(M031, D131, L[1]);
	L[13] = fmaf(M001, D131, L[13]);
	L[1] *= T(6.6666666666666663e-01);
	L[13] = fmaf(M010, D140, L[13]);
	L[1] = fmaf(M022, D122, L[1]);
	L[13] = fmaf(M100, D230, L[13]);
	L[1] = fmaf(M202, D302, L[1]);
	L[14] = fmaf(M000, D040, L[14]);
	L[1] = fmaf(M220, D320, L[1]);
	L[14] = fmaf(M001, D041, L[14]);
	L[1] *= T(5.0000000000000000e-01);
	L[14] = fmaf(M010, D050, L[14]);
	L[1] = fmaf(M102, D202, L[1]);
	L[14] = fmaf(M100, D140, L[14]);
	L[1] = fmaf(M210, D310, L[1]);
	L[15] = fmaf(M000, D500, L[15]);
	L[1] = fmaf(M201, D301, L[1]);
	L[16] = fmaf(M000, D410, L[16]);
	L[1] = fmaf(M200, D300, L[1]);
	L[17] = fmaf(M000, D320, L[17]);
	L[1] = fmaf(M211, D311, L[1]);
	L[18] = fmaf(M000, D230, L[18]);
	L[1] = fmaf(M121, D221, L[1]);
	L[19] = fmaf(M000, D140, L[19]);
	L[1] = fmaf(M120, D220, L[1]);
	L[20] = fmaf(M000, D050, L[20]);
	L[1] = fmaf(M112, D212, L[1]);
	L[21] *= T(2.4000000000000000e+01);
	L[1] = fmaf(M021, D121, L[1]);
	L[21] = fmaf(M400, D401, L[21]);
	L[1] = fmaf(M020, D120, L[1]);
	L[21] = fmaf(M004, D005, L[21]);
	L[1] = fmaf(M012, D112, L[1]);
	L[21] = fmaf(M040, D041, L[21]);
	L[1] = fmaf(M002, D102, L[1]);
	L[21] *= T(2.5000000000000000e-01);
	L[1] *= T(5.0000000000000000e-01);
	L[21] = fmaf(M310, D311, L[21]);
	L[1] = fmaf(M111, D211, L[1]);
	L[21] = fmaf(M003, D004, L[21]);
	L[1] = fmaf(M110, D210, L[1]);
	L[21] = fmaf(M301, D302, L[21]);
	L[1] = fmaf(M000, D100, L[1]);
	L[21] = fmaf(M300, D301, L[21]);
	L[1] = fmaf(M101, D201, L[1]);
	L[21] = fmaf(M130, D131, L[21]);
	L[1] = fmaf(M100, D200, L[1]);
	L[21] = fmaf(M013, D014, L[21]);
	L[1] = fmaf(M011, D111, L[1]);
	L[21] = fmaf(M103, D104, L[21]);
	L[1] = fmaf(M010, D110, L[1]);
	L[21] = fmaf(M030, D031, L[21]);
	L[1] = fmaf(M001, D101, L[1]);
	L[21] = fmaf(M031, D032, L[21]);
	L[2] *= T(2.4000000000000000e+01);
	L[21] *= T(6.6666666666666663e-01);
	L[2] = fmaf(M400, D410, L[2]);
	L[21] = fmaf(M022, D023, L[21]);
	L[2] = fmaf(M004, D014, L[2]);
	L[21] = fmaf(M202, D203, L[21]);
	L[2] = fmaf(M040, D050, L[2]);
	L[21] = fmaf(M220, D221, L[21]);
	L[2] *= T(2.5000000000000000e-01);
	L[21] *= T(5.0000000000000000e-01);
	L[2] = fmaf(M310, D320, L[2]);
	L[21] = fmaf(M102, D103, L[21]);
	L[2] = fmaf(M003, D013, L[2]);
	L[21] = fmaf(M210, D211, L[21]);
	L[2] = fmaf(M301, D311, L[2]);
	L[21] = fmaf(M201, D202, L[21]);
	L[2] = fmaf(M300, D310, L[2]);
	L[21] = fmaf(M200, D201, L[21]);
	L[2] = fmaf(M130, D140, L[2]);
	L[21] = fmaf(M211, D212, L[21]);
	L[2] = fmaf(M013, D023, L[2]);
	L[21] = fmaf(M121, D122, L[21]);
	L[2] = fmaf(M103, D113, L[2]);
	L[21] = fmaf(M120, D121, L[21]);
	L[2] = fmaf(M030, D040, L[2]);
	L[21] = fmaf(M112, D113, L[21]);
	L[2] = fmaf(M031, D041, L[2]);
	L[21] = fmaf(M021, D022, L[21]);
	L[2] *= T(6.6666666666666663e-01);
	L[21] = fmaf(M020, D021, L[21]);
	L[2] = fmaf(M022, D032, L[2]);
	L[21] = fmaf(M012, D013, L[21]);
	L[2] = fmaf(M202, D212, L[2]);
	L[21] = fmaf(M002, D003, L[21]);
	L[2] = fmaf(M220, D230, L[2]);
	L[21] *= T(5.0000000000000000e-01);
	L[2] *= T(5.0000000000000000e-01);
	L[21] = fmaf(M111, D112, L[21]);
	L[2] = fmaf(M102, D112, L[2]);
	L[21] = fmaf(M110, D111, L[21]);
	L[2] = fmaf(M210, D220, L[2]);
	L[21] = fmaf(M000, D001, L[21]);
	L[2] = fmaf(M201, D211, L[2]);
	L[21] = fmaf(M101, D102, L[21]);
	L[2] = fmaf(M200, D210, L[2]);
	L[21] = fmaf(M100, D101, L[21]);
	L[2] = fmaf(M211, D221, L[2]);
	L[21] = fmaf(M011, D012, L[21]);
	L[2] = fmaf(M121, D131, L[2]);
	L[21] = fmaf(M010, D011, L[21]);
	L[2] = fmaf(M120, D130, L[2]);
	L[21] = fmaf(M001, D002, L[21]);
	L[2] = fmaf(M112, D122, L[2]);
	L[22] *= T(6.0000000000000000e+00);
	L[2] = fmaf(M021, D031, L[2]);
	L[22] = fmaf(M300, D401, L[22]);
	L[2] = fmaf(M020, D030, L[2]);
	L[22] = fmaf(M003, D104, L[22]);
	L[2] = fmaf(M012, D022, L[2]);
	L[22] = fmaf(M030, D131, L[22]);
	L[2] = fmaf(M002, D012, L[2]);
	L[22] *= T(3.3333333333333331e-01);
	L[2] *= T(5.0000000000000000e-01);
	L[22] = fmaf(M002, D103, L[22]);
	L[2] = fmaf(M111, D121, L[2]);
	L[22] = fmaf(M210, D311, L[22]);
	L[2] = fmaf(M110, D120, L[2]);
	L[22] = fmaf(M201, D302, L[22]);
	L[2] = fmaf(M000, D010, L[2]);
	L[22] = fmaf(M012, D113, L[22]);
	L[2] = fmaf(M101, D111, L[2]);
	L[22] = fmaf(M020, D121, L[22]);
	L[2] = fmaf(M100, D110, L[2]);
	L[22] = fmaf(M021, D122, L[22]);
	L[2] = fmaf(M011, D021, L[2]);
	L[22] = fmaf(M200, D301, L[22]);
	L[2] = fmaf(M010, D020, L[2]);
	L[22] = fmaf(M120, D221, L[22]);
	L[2] = fmaf(M001, D011, L[2]);
	L[22] = fmaf(M102, D203, L[22]);
	L[3] *= T(6.0000000000000000e+00);
	L[22] *= T(5.0000000000000000e-01);
	L[3] = fmaf(M300, D500, L[3]);
	L[22] = fmaf(M100, D201, L[22]);
	L[3] = fmaf(M003, D203, L[3]);
	L[22] = fmaf(M111, D212, L[22]);
	L[3] = fmaf(M030, D230, L[3]);
	L[22] = fmaf(M110, D211, L[22]);
	L[3] *= T(3.3333333333333331e-01);
	L[22] = fmaf(M101, D202, L[22]);
	L[3] = fmaf(M002, D202, L[3]);
	L[22] = fmaf(M000, D101, L[22]);
	L[3] = fmaf(M210, D410, L[3]);
	L[22] = fmaf(M011, D112, L[22]);
	L[3] = fmaf(M201, D401, L[3]);
	L[22] = fmaf(M010, D111, L[22]);
	L[3] = fmaf(M012, D212, L[3]);
	L[22] = fmaf(M001, D102, L[22]);
	L[3] = fmaf(M020, D220, L[3]);
	L[23] *= T(6.0000000000000000e+00);
	L[3] = fmaf(M021, D221, L[3]);
	L[23] = fmaf(M300, D311, L[23]);
	L[3] = fmaf(M200, D400, L[3]);
	L[23] = fmaf(M003, D014, L[23]);
	L[3] = fmaf(M120, D320, L[3]);
	L[23] = fmaf(M030, D041, L[23]);
	L[3] = fmaf(M102, D302, L[3]);
	L[23] *= T(3.3333333333333331e-01);
	L[3] *= T(5.0000000000000000e-01);
	L[23] = fmaf(M002, D013, L[23]);
	L[3] = fmaf(M100, D300, L[3]);
	L[23] = fmaf(M210, D221, L[23]);
	L[3] = fmaf(M111, D311, L[3]);
	L[23] = fmaf(M201, D212, L[23]);
	L[3] = fmaf(M110, D310, L[3]);
	L[23] = fmaf(M012, D023, L[23]);
	L[3] = fmaf(M101, D301, L[3]);
	L[23] = fmaf(M020, D031, L[23]);
	L[3] = fmaf(M000, D200, L[3]);
	L[23] = fmaf(M021, D032, L[23]);
	L[3] = fmaf(M011, D211, L[3]);
	L[23] = fmaf(M200, D211, L[23]);
	L[3] = fmaf(M010, D210, L[3]);
	L[23] = fmaf(M120, D131, L[23]);
	L[3] = fmaf(M001, D201, L[3]);
	L[23] = fmaf(M102, D113, L[23]);
	L[4] *= T(6.0000000000000000e+00);
	L[23] *= T(5.0000000000000000e-01);
	L[4] = fmaf(M300, D410, L[4]);
	L[23] = fmaf(M100, D111, L[23]);
	L[4] = fmaf(M003, D113, L[4]);
	L[23] = fmaf(M111, D122, L[23]);
	L[4] = fmaf(M030, D140, L[4]);
	L[23] = fmaf(M110, D121, L[23]);
	L[4] *= T(3.3333333333333331e-01);
	L[23] = fmaf(M101, D112, L[23]);
	L[4] = fmaf(M002, D112, L[4]);
	L[23] = fmaf(M000, D011, L[23]);
	L[4] = fmaf(M210, D320, L[4]);
	L[23] = fmaf(M011, D022, L[23]);
	L[4] = fmaf(M201, D311, L[4]);
	L[23] = fmaf(M010, D021, L[23]);
	L[4] = fmaf(M012, D122, L[4]);
	L[23] = fmaf(M001, D012, L[23]);
	L[4] = fmaf(M020, D130, L[4]);
	L[24] *= T(2.0000000000000000e+00);
	L[4] = fmaf(M021, D131, L[4]);
	L[24] = fmaf(M002, D203, L[24]);
	L[4] = fmaf(M200, D310, L[4]);
	L[24] = fmaf(M020, D221, L[24]);
	L[4] = fmaf(M120, D230, L[4]);
	L[24] = fmaf(M200, D401, L[24]);
	L[4] = fmaf(M102, D212, L[4]);
	L[24] *= T(5.0000000000000000e-01);
	L[4] *= T(5.0000000000000000e-01);
	L[24] = fmaf(M000, D201, L[24]);
	L[4] = fmaf(M100, D210, L[4]);
	L[24] = fmaf(M001, D202, L[24]);
	L[4] = fmaf(M111, D221, L[4]);
	L[24] = fmaf(M010, D211, L[24]);
	L[4] = fmaf(M110, D220, L[4]);
	L[24] = fmaf(M011, D212, L[24]);
	L[4] = fmaf(M101, D211, L[4]);
	L[24] = fmaf(M100, D301, L[24]);
	L[4] = fmaf(M000, D110, L[4]);
	L[24] = fmaf(M101, D302, L[24]);
	L[4] = fmaf(M011, D121, L[4]);
	L[24] = fmaf(M110, D311, L[24]);
	L[4] = fmaf(M010, D120, L[4]);
	L[25] *= T(2.0000000000000000e+00);
	L[4] = fmaf(M001, D111, L[4]);
	L[25] = fmaf(M002, D113, L[25]);
	L[5] *= T(6.0000000000000000e+00);
	L[25] = fmaf(M020, D131, L[25]);
	L[5] = fmaf(M300, D320, L[5]);
	L[25] = fmaf(M200, D311, L[25]);
	L[5] = fmaf(M003, D023, L[5]);
	L[25] *= T(5.0000000000000000e-01);
	L[5] = fmaf(M030, D050, L[5]);
	L[25] = fmaf(M000, D111, L[25]);
	L[5] *= T(3.3333333333333331e-01);
	L[25] = fmaf(M001, D112, L[25]);
	L[5] = fmaf(M002, D022, L[5]);
	L[25] = fmaf(M010, D121, L[25]);
	L[5] = fmaf(M210, D230, L[5]);
	L[25] = fmaf(M011, D122, L[25]);
	L[5] = fmaf(M201, D221, L[5]);
	L[25] = fmaf(M100, D211, L[25]);
	L[5] = fmaf(M012, D032, L[5]);
	L[25] = fmaf(M101, D212, L[25]);
	L[5] = fmaf(M020, D040, L[5]);
	L[25] = fmaf(M110, D221, L[25]);
	L[5] = fmaf(M021, D041, L[5]);
	L[26] *= T(2.0000000000000000e+00);
	L[5] = fmaf(M200, D220, L[5]);
	L[26] = fmaf(M002, D023, L[26]);
	L[5] = fmaf(M120, D140, L[5]);
	L[26] = fmaf(M020, D041, L[26]);
	L[5] = fmaf(M102, D122, L[5]);
	L[26] = fmaf(M200, D221, L[26]);
	L[5] *= T(5.0000000000000000e-01);
	L[26] *= T(5.0000000000000000e-01);
	L[5] = fmaf(M100, D120, L[5]);
	L[26] = fmaf(M000, D021, L[26]);
	L[5] = fmaf(M111, D131, L[5]);
	L[26] = fmaf(M001, D022, L[26]);
	L[5] = fmaf(M110, D130, L[5]);
	L[26] = fmaf(M010, D031, L[26]);
	L[5] = fmaf(M101, D121, L[5]);
	L[26] = fmaf(M011, D032, L[26]);
	L[5] = fmaf(M000, D020, L[5]);
	L[26] = fmaf(M100, D121, L[26]);
	L[5] = fmaf(M011, D031, L[5]);
	L[26] = fmaf(M101, D122, L[26]);
	L[5] = fmaf(M010, D030, L[5]);
	L[26] = fmaf(M110, D131, L[26]);
	L[5] = fmaf(M001, D021, L[5]);
	L[27] = fmaf(M000, D301, L[27]);
	L[6] *= T(2.0000000000000000e+00);
	L[27] = fmaf(M001, D302, L[27]);
	L[6] = fmaf(M002, D302, L[6]);
	L[27] = fmaf(M010, D311, L[27]);
	L[6] = fmaf(M020, D320, L[6]);
	L[27] = fmaf(M100, D401, L[27]);
	L[6] = fmaf(M200, D500, L[6]);
	L[28] = fmaf(M000, D211, L[28]);
	L[6] *= T(5.0000000000000000e-01);
	L[28] = fmaf(M001, D212, L[28]);
	L[6] = fmaf(M000, D300, L[6]);
	L[28] = fmaf(M010, D221, L[28]);
	L[6] = fmaf(M001, D301, L[6]);
	L[28] = fmaf(M100, D311, L[28]);
	L[6] = fmaf(M010, D310, L[6]);
	L[29] = fmaf(M000, D121, L[29]);
	L[6] = fmaf(M011, D311, L[6]);
	L[29] = fmaf(M001, D122, L[29]);
	L[6] = fmaf(M100, D400, L[6]);
	L[29] = fmaf(M010, D131, L[29]);
	L[6] = fmaf(M101, D401, L[6]);
	L[29] = fmaf(M100, D221, L[29]);
	L[6] = fmaf(M110, D410, L[6]);
	L[30] = fmaf(M000, D031, L[30]);
	L[7] *= T(2.0000000000000000e+00);
	L[30] = fmaf(M001, D032, L[30]);
	L[7] = fmaf(M002, D212, L[7]);
	L[30] = fmaf(M010, D041, L[30]);
	L[7] = fmaf(M020, D230, L[7]);
	L[30] = fmaf(M100, D131, L[30]);
	L[7] = fmaf(M200, D410, L[7]);
	L[31] = fmaf(M000, D401, L[31]);
	L[7] *= T(5.0000000000000000e-01);
	L[32] = fmaf(M000, D311, L[32]);
	L[7] = fmaf(M000, D210, L[7]);
	L[33] = fmaf(M000, D221, L[33]);
	L[7] = fmaf(M001, D211, L[7]);
	L[34] = fmaf(M000, D131, L[34]);
	L[7] = fmaf(M010, D220, L[7]);
	L[35] = fmaf(M000, D041, L[35]);
	L[7] = fmaf(M011, D221, L[7]);
	L[36] *= T(6.0000000000000000e+00);
	L[7] = fmaf(M100, D310, L[7]);
	L[36] = fmaf(M300, D302, L[36]);
	L[7] = fmaf(M101, D311, L[7]);
	L[36] = fmaf(M003, D005, L[36]);
	L[7] = fmaf(M110, D320, L[7]);
	L[36] = fmaf(M030, D032, L[36]);
	L[8] *= T(2.0000000000000000e+00);
	L[36] *= T(3.3333333333333331e-01);
	L[8] = fmaf(M002, D122, L[8]);
	L[36] = fmaf(M002, D004, L[36]);
	L[8] = fmaf(M020, D140, L[8]);
	L[36] = fmaf(M210, D212, L[36]);
	L[8] = fmaf(M200, D320, L[8]);
	L[36] = fmaf(M201, D203, L[36]);
	L[8] *= T(5.0000000000000000e-01);
	L[36] = fmaf(M012, D014, L[36]);
	L[8] = fmaf(M000, D120, L[8]);
	L[36] = fmaf(M020, D022, L[36]);
	L[8] = fmaf(M001, D121, L[8]);
	L[36] = fmaf(M021, D023, L[36]);
	L[8] = fmaf(M010, D130, L[8]);
	L[36] = fmaf(M200, D202, L[36]);
	L[8] = fmaf(M011, D131, L[8]);
	L[36] = fmaf(M120, D122, L[36]);
	L[8] = fmaf(M100, D220, L[8]);
	L[36] = fmaf(M102, D104, L[36]);
	L[8] = fmaf(M101, D221, L[8]);
	L[36] *= T(5.0000000000000000e-01);
	L[8] = fmaf(M110, D230, L[8]);
	L[36] = fmaf(M100, D102, L[36]);
	L[9] *= T(2.0000000000000000e+00);
	L[36] = fmaf(M111, D113, L[36]);
	L[9] = fmaf(M002, D032, L[9]);
	L[36] = fmaf(M110, D112, L[36]);
	L[9] = fmaf(M020, D050, L[9]);
	L[36] = fmaf(M101, D103, L[36]);
	L[9] = fmaf(M200, D230, L[9]);
	L[36] = fmaf(M000, D002, L[36]);
	L[9] *= T(5.0000000000000000e-01);
	L[36] = fmaf(M011, D013, L[36]);
	L[9] = fmaf(M000, D030, L[9]);
	L[36] = fmaf(M010, D012, L[36]);
	L[9] = fmaf(M001, D031, L[9]);
	L[36] = fmaf(M001, D003, L[36]);
	L[9] = fmaf(M010, D040, L[9]);
	L[9] = fmaf(M011, D041, L[9]);
	L[9] = fmaf(M100, D130, L[9]);
	L[9] = fmaf(M101, D131, L[9]);
	L[9] = fmaf(M110, D140, L[9]);
	return 815 + do_phi * 75;
}


template<class T>
CUDA_EXPORT
tensor_trless_sym<T, 6> P2M(array<T, NDIM>& X) {
	tensor_trless_sym<T, 6> M;
	X[0] *= -T(SCALE_FACTOR);
	X[1] *= -T(SCALE_FACTOR);
	X[2] *= -T(SCALE_FACTOR);
	T x[56];
	x[0] = T(1);
	x[1] = X[0];
	x[2] = X[1];
	x[3] = X[2];
	x[9] = x[3] * x[3]; // 0 0 2 | 0 0 1 | 0 0 1
	x[8] = x[2] * x[3]; // 0 1 1 | 0 0 1 | 0 1 0
	x[7] = x[2] * x[2]; // 0 2 0 | 0 1 0 | 0 1 0
	x[6] = x[1] * x[3]; // 1 0 1 | 0 0 1 | 1 0 0
	x[5] = x[1] * x[2]; // 1 1 0 | 0 1 0 | 1 0 0
	x[4] = x[1] * x[1]; // 2 0 0 | 1 0 0 | 1 0 0
	x[19] = x[9] * x[3]; // 0 0 3 | 0 0 1 | 0 0 2
	x[18] = x[8] * x[3]; // 0 1 2 | 0 0 1 | 0 1 1
	x[17] = x[8] * x[2]; // 0 2 1 | 0 1 0 | 0 1 1
	x[16] = x[7] * x[2]; // 0 3 0 | 0 1 0 | 0 2 0
	x[15] = x[6] * x[3]; // 1 0 2 | 0 0 1 | 1 0 1
	x[14] = x[5] * x[3]; // 1 1 1 | 0 0 1 | 1 1 0
	x[13] = x[5] * x[2]; // 1 2 0 | 0 1 0 | 1 1 0
	x[12] = x[6] * x[1]; // 2 0 1 | 1 0 0 | 1 0 1
	x[11] = x[5] * x[1]; // 2 1 0 | 1 0 0 | 1 1 0
	x[10] = x[4] * x[1]; // 3 0 0 | 1 0 0 | 2 0 0
	x[34] = x[9] * x[9]; // 0 0 4 | 0 0 2 | 0 0 2
	x[33] = x[8] * x[9]; // 0 1 3 | 0 0 2 | 0 1 1
	x[32] = x[8] * x[8]; // 0 2 2 | 0 1 1 | 0 1 1
	x[31] = x[8] * x[7]; // 0 3 1 | 0 2 0 | 0 1 1
	x[30] = x[7] * x[7]; // 0 4 0 | 0 2 0 | 0 2 0
	x[29] = x[6] * x[9]; // 1 0 3 | 0 0 2 | 1 0 1
	x[28] = x[5] * x[9]; // 1 1 2 | 0 0 2 | 1 1 0
	x[27] = x[5] * x[8]; // 1 2 1 | 0 1 1 | 1 1 0
	x[26] = x[5] * x[7]; // 1 3 0 | 0 2 0 | 1 1 0
	x[25] = x[6] * x[6]; // 2 0 2 | 1 0 1 | 1 0 1
	x[24] = x[5] * x[6]; // 2 1 1 | 1 0 1 | 1 1 0
	x[23] = x[5] * x[5]; // 2 2 0 | 1 1 0 | 1 1 0
	x[22] = x[6] * x[4]; // 3 0 1 | 2 0 0 | 1 0 1
	x[21] = x[5] * x[4]; // 3 1 0 | 2 0 0 | 1 1 0
	x[20] = x[4] * x[4]; // 4 0 0 | 2 0 0 | 2 0 0
	x[55] = x[19] * x[9]; // 0 0 5 | 0 0 2 | 0 0 3
	x[54] = x[18] * x[9]; // 0 1 4 | 0 0 2 | 0 1 2
	x[53] = x[17] * x[9]; // 0 2 3 | 0 0 2 | 0 2 1
	x[52] = x[17] * x[8]; // 0 3 2 | 0 1 1 | 0 2 1
	x[51] = x[17] * x[7]; // 0 4 1 | 0 2 0 | 0 2 1
	x[50] = x[16] * x[7]; // 0 5 0 | 0 2 0 | 0 3 0
	x[49] = x[15] * x[9]; // 1 0 4 | 0 0 2 | 1 0 2
	x[48] = x[14] * x[9]; // 1 1 3 | 0 0 2 | 1 1 1
	x[47] = x[14] * x[8]; // 1 2 2 | 0 1 1 | 1 1 1
	x[46] = x[14] * x[7]; // 1 3 1 | 0 2 0 | 1 1 1
	x[45] = x[13] * x[7]; // 1 4 0 | 0 2 0 | 1 2 0
	x[44] = x[12] * x[9]; // 2 0 3 | 0 0 2 | 2 0 1
	x[43] = x[14] * x[6]; // 2 1 2 | 1 0 1 | 1 1 1
	x[42] = x[14] * x[5]; // 2 2 1 | 1 1 0 | 1 1 1
	x[41] = x[11] * x[7]; // 2 3 0 | 0 2 0 | 2 1 0
	x[40] = x[12] * x[6]; // 3 0 2 | 1 0 1 | 2 0 1
	x[39] = x[14] * x[4]; // 3 1 1 | 2 0 0 | 1 1 1
	x[38] = x[11] * x[5]; // 3 2 0 | 1 1 0 | 2 1 0
	x[37] = x[12] * x[4]; // 4 0 1 | 2 0 0 | 2 0 1
	x[36] = x[11] * x[4]; // 4 1 0 | 2 0 0 | 2 1 0
	x[35] = x[10] * x[4]; // 5 0 0 | 2 0 0 | 3 0 0
	T x_2_1_000 = x[9];
	T x_3_1_001 = x[19];
	T x_4_1_002 = x[34];
	T x_5_1_003 = x[55];
	T x_3_1_010 = x[18];
	T x_4_1_011 = x[33];
	T x_5_1_012 = x[54];
	T x_4_1_020 = x[32];
	T x_5_1_021 = x[53];
	T x_5_1_030 = x[52];
	T x_3_1_100 = x[15];
	T x_4_1_101 = x[29];
	T x_5_1_102 = x[49];
	T x_4_1_110 = x[28];
	T x_5_1_111 = x[48];
	T x_5_1_120 = x[47];
	T x_4_1_200 = x[25];
	T x_5_1_201 = x[44];
	T x_5_1_210 = x[43];
	T x_5_1_300 = x[40];
	T x_4_2_000 = x[34];
	T x_5_2_001 = x[55];
	T x_5_2_010 = x[54];
	T x_5_2_100 = x[49];
	x_2_1_000 += x[7];
	x_5_1_120 += x[45];
	x_2_1_000 += x[4];
	x_5_1_120 += x[38];
	x_3_1_001 += x[17];
	x_4_1_200 += x[23];
	x_3_1_001 += x[12];
	x_4_1_200 += x[20];
	x_4_1_002 += x[32];
	x_5_1_201 += x[42];
	x_4_1_002 += x[25];
	x_5_1_201 += x[37];
	x_5_1_003 += x[53];
	x_5_1_210 += x[41];
	x_5_1_003 += x[44];
	x_5_1_210 += x[36];
	x_3_1_010 += x[16];
	x_5_1_300 += x[38];
	x_3_1_010 += x[11];
	x_5_1_300 += x[35];
	x_4_1_011 += x[31];
	x_4_2_000 = fmaf(T(2.0000000000000000e+00), x[32], x_4_2_000);
	x_4_1_011 += x[24];
	x_4_2_000 += x[30];
	x_5_1_012 += x[52];
	x_4_2_000 = fmaf(T(2.0000000000000000e+00), x[25], x_4_2_000);
	x_5_1_012 += x[43];
	x_4_2_000 = fmaf(T(2.0000000000000000e+00), x[23], x_4_2_000);
	x_4_1_020 += x[30];
	x_4_2_000 += x[20];
	x_4_1_020 += x[23];
	x_5_2_001 = fmaf(T(2.0000000000000000e+00), x[53], x_5_2_001);
	x_5_1_021 += x[51];
	x_5_2_001 += x[51];
	x_5_1_021 += x[42];
	x_5_2_001 = fmaf(T(2.0000000000000000e+00), x[44], x_5_2_001);
	x_5_1_030 += x[50];
	x_5_2_001 = fmaf(T(2.0000000000000000e+00), x[42], x_5_2_001);
	x_5_1_030 += x[41];
	x_5_2_001 += x[37];
	x_3_1_100 += x[13];
	x_5_2_010 = fmaf(T(2.0000000000000000e+00), x[52], x_5_2_010);
	x_3_1_100 += x[10];
	x_5_2_010 += x[50];
	x_4_1_101 += x[27];
	x_5_2_010 = fmaf(T(2.0000000000000000e+00), x[43], x_5_2_010);
	x_4_1_101 += x[22];
	x_5_2_010 = fmaf(T(2.0000000000000000e+00), x[41], x_5_2_010);
	x_5_1_102 += x[47];
	x_5_2_010 += x[36];
	x_5_1_102 += x[40];
	x_5_2_100 = fmaf(T(2.0000000000000000e+00), x[47], x_5_2_100);
	x_4_1_110 += x[26];
	x_5_2_100 += x[45];
	x_4_1_110 += x[21];
	x_5_2_100 = fmaf(T(2.0000000000000000e+00), x[40], x_5_2_100);
	x_5_1_111 += x[46];
	x_5_2_100 = fmaf(T(2.0000000000000000e+00), x[38], x_5_2_100);
	x_5_1_111 += x[39];
	x_5_2_100 += x[35];
	M[0] = x[0];
	M[21] = x[3];
	M[36] = x[9];
	M[2] = x[2];
	M[23] = x[8];
	M[5] = x[7];
	M[26] = x[17];
	M[9] = x[16];
	M[30] = x[31];
	M[14] = x[30];
	M[35] = x[51];
	M[20] = x[50];
	M[1] = x[1];
	M[22] = x[6];
	M[4] = x[5];
	M[25] = x[14];
	M[8] = x[13];
	M[29] = x[27];
	M[13] = x[26];
	M[34] = x[46];
	M[19] = x[45];
	M[3] = x[4];
	M[24] = x[12];
	M[7] = x[11];
	M[28] = x[24];
	M[12] = x[23];
	M[33] = x[42];
	M[18] = x[41];
	M[6] = x[10];
	M[27] = x[22];
	M[11] = x[21];
	M[32] = x[39];
	M[17] = x[38];
	M[10] = x[20];
	M[31] = x[37];
	M[16] = x[36];
	M[15] = x[35];
	M[26] = fmaf(T(-2.0000000000000001e-01), x_3_1_001, M[26]);
	M[33] = fmaf(T(-1.1111111111111112e-01), x_5_1_201, M[33]);
	M[9] = fmaf(T(-5.9999999999999998e-01), x_3_1_010, M[9]);
	M[33] = fmaf(T(-1.1111111111111112e-01), x_5_1_021, M[33]);
	M[30] = fmaf(T(-4.2857142857142860e-01), x_4_1_011, M[30]);
	M[33] = fmaf(T(1.5873015873015876e-02), x_5_2_001, M[33]);
	M[14] = fmaf(T(-8.5714285714285721e-01), x_4_1_020, M[14]);
	M[18] = fmaf(T(-3.3333333333333337e-01), x_5_1_210, M[18]);
	M[14] = fmaf(T(8.5714285714285715e-02), x_4_2_000, M[14]);
	M[18] = fmaf(T(-1.1111111111111112e-01), x_5_1_030, M[18]);
	M[35] = fmaf(T(-6.6666666666666674e-01), x_5_1_021, M[35]);
	M[18] = fmaf(T(4.7619047619047623e-02), x_5_2_010, M[18]);
	M[35] = fmaf(T(4.7619047619047623e-02), x_5_2_001, M[35]);
	M[6] = fmaf(T(-5.9999999999999998e-01), x_3_1_100, M[6]);
	M[20] = fmaf(T(-1.1111111111111112e+00), x_5_1_030, M[20]);
	M[27] = fmaf(T(-4.2857142857142860e-01), x_4_1_101, M[27]);
	M[20] = fmaf(T(2.3809523809523811e-01), x_5_2_010, M[20]);
	M[11] = fmaf(T(-4.2857142857142860e-01), x_4_1_110, M[11]);
	M[8] = fmaf(T(-2.0000000000000001e-01), x_3_1_100, M[8]);
	M[32] = fmaf(T(-3.3333333333333337e-01), x_5_1_111, M[32]);
	M[29] = fmaf(T(-1.4285714285714288e-01), x_4_1_101, M[29]);
	M[17] = fmaf(T(-1.1111111111111112e-01), x_5_1_300, M[17]);
	M[13] = fmaf(T(-4.2857142857142860e-01), x_4_1_110, M[13]);
	M[17] = fmaf(T(-3.3333333333333337e-01), x_5_1_120, M[17]);
	M[34] = fmaf(T(-3.3333333333333337e-01), x_5_1_111, M[34]);
	M[17] = fmaf(T(4.7619047619047623e-02), x_5_2_100, M[17]);
	M[19] = fmaf(T(-6.6666666666666674e-01), x_5_1_120, M[19]);
	M[10] = fmaf(T(-8.5714285714285721e-01), x_4_1_200, M[10]);
	M[19] = fmaf(T(4.7619047619047623e-02), x_5_2_100, M[19]);
	M[10] = fmaf(T(8.5714285714285715e-02), x_4_2_000, M[10]);
	M[24] = fmaf(T(-2.0000000000000001e-01), x_3_1_001, M[24]);
	M[31] = fmaf(T(-6.6666666666666674e-01), x_5_1_201, M[31]);
	M[7] = fmaf(T(-2.0000000000000001e-01), x_3_1_010, M[7]);
	M[31] = fmaf(T(4.7619047619047623e-02), x_5_2_001, M[31]);
	M[28] = fmaf(T(-1.4285714285714288e-01), x_4_1_011, M[28]);
	M[16] = fmaf(T(-6.6666666666666674e-01), x_5_1_210, M[16]);
	M[12] = fmaf(T(-1.4285714285714288e-01), x_4_1_200, M[12]);
	M[16] = fmaf(T(4.7619047619047623e-02), x_5_2_010, M[16]);
	M[12] = fmaf(T(-1.4285714285714288e-01), x_4_1_020, M[12]);
	M[15] = fmaf(T(-1.1111111111111112e+00), x_5_1_300, M[15]);
	M[12] = fmaf(T(2.8571428571428574e-02), x_4_2_000, M[12]);
	M[15] = fmaf(T(2.3809523809523811e-01), x_5_2_100, M[15]);
	return M;
/* FLOPS = 214*/
}


template<class T, class U>
CUDA_EXPORT
tensor_trless_sym<T, 5> M2M(const tensor_trless_sym<U,6>& Ma) {
	tensor_trless_sym<T, 5> Mb;
	Mb[0] = Ma[0];
	Mb[15] = Ma[21];
	Mb[25] = Ma[36];
	Mb[2] = Ma[2];
	Mb[17] = Ma[23];
	Mb[5] = Ma[5];
	Mb[20] = Ma[26];
	Mb[9] = Ma[9];
	Mb[24] = Ma[30];
	Mb[14] = Ma[14];
	Mb[1] = Ma[1];
	Mb[16] = Ma[22];
	Mb[4] = Ma[4];
	Mb[19] = Ma[25];
	Mb[8] = Ma[8];
	Mb[23] = Ma[29];
	Mb[13] = Ma[13];
	Mb[3] = Ma[3];
	Mb[18] = Ma[24];
	Mb[7] = Ma[7];
	Mb[22] = Ma[28];
	Mb[12] = Ma[12];
	Mb[6] = Ma[6];
	Mb[21] = Ma[27];
	Mb[11] = Ma[11];
	Mb[10] = Ma[10];
	return Mb;
/* FLOPS = 214*/
}


template<class T>
CUDA_EXPORT
tensor_trless_sym<T, 6> M2M(const tensor_trless_sym<T,6>& Ma, array<T, NDIM>& X) {
	tensor_sym<T, 6> Mb;
	tensor_trless_sym<T, 6> Mc;
	X[0] *= -T(SCALE_FACTOR);
	X[1] *= -T(SCALE_FACTOR);
	X[2] *= -T(SCALE_FACTOR);
	const T Ma000 =  (Ma[0]);
	const T Ma001 =  (Ma[21]);
	const T Ma002 =  (Ma[36]);
	const T Ma003 = -(Ma[24]+(Ma[26]));
	const T Ma004 =  (Ma[10]+fmaf(T(2),Ma[12],(Ma[14])));
	const T Ma005 =  (Ma[31]+fmaf(T(2),Ma[33],(Ma[35])));
	const T Ma010 =  (Ma[2]);
	const T Ma011 =  (Ma[23]);
	const T Ma012 = -(Ma[7]+(Ma[9]));
	const T Ma013 = -(Ma[28]+(Ma[30]));
	const T Ma014 =  (Ma[16]+fmaf(T(2),Ma[18],(Ma[20])));
	const T Ma020 =  (Ma[5]);
	const T Ma021 =  (Ma[26]);
	const T Ma022 = -(Ma[12]+(Ma[14]));
	const T Ma023 = -(Ma[33]+(Ma[35]));
	const T Ma030 =  (Ma[9]);
	const T Ma031 =  (Ma[30]);
	const T Ma032 = -(Ma[18]+(Ma[20]));
	const T Ma040 =  (Ma[14]);
	const T Ma041 =  (Ma[35]);
	const T Ma050 =  (Ma[20]);
	const T Ma100 =  (Ma[1]);
	const T Ma101 =  (Ma[22]);
	const T Ma102 = -(Ma[6]+(Ma[8]));
	const T Ma103 = -(Ma[27]+(Ma[29]));
	const T Ma104 =  (Ma[15]+fmaf(T(2),Ma[17],(Ma[19])));
	const T Ma110 =  (Ma[4]);
	const T Ma111 =  (Ma[25]);
	const T Ma112 = -(Ma[11]+(Ma[13]));
	const T Ma113 = -(Ma[32]+(Ma[34]));
	const T Ma120 =  (Ma[8]);
	const T Ma121 =  (Ma[29]);
	const T Ma122 = -(Ma[17]+(Ma[19]));
	const T Ma130 =  (Ma[13]);
	const T Ma131 =  (Ma[34]);
	const T Ma140 =  (Ma[19]);
	const T Ma200 =  (Ma[3]);
	const T Ma201 =  (Ma[24]);
	const T Ma202 = -(Ma[10]+(Ma[12]));
	const T Ma203 = -(Ma[31]+(Ma[33]));
	const T Ma210 =  (Ma[7]);
	const T Ma211 =  (Ma[28]);
	const T Ma212 = -(Ma[16]+(Ma[18]));
	const T Ma220 =  (Ma[12]);
	const T Ma221 =  (Ma[33]);
	const T Ma230 =  (Ma[18]);
	const T Ma300 =  (Ma[6]);
	const T Ma301 =  (Ma[27]);
	const T Ma302 = -(Ma[15]+(Ma[17]));
	const T Ma310 =  (Ma[11]);
	const T Ma311 =  (Ma[32]);
	const T Ma320 =  (Ma[17]);
	const T Ma400 =  (Ma[10]);
	const T Ma401 =  (Ma[31]);
	const T Ma410 =  (Ma[16]);
	const T Ma500 =  (Ma[15]);
	T x[56];
	x[0] = T(1);
	x[1] = X[0];
	x[2] = X[1];
	x[3] = X[2];
	x[9] = x[3] * x[3]; // 0 0 2 | 0 0 1 | 0 0 1
	x[8] = x[2] * x[3]; // 0 1 1 | 0 0 1 | 0 1 0
	x[7] = x[2] * x[2]; // 0 2 0 | 0 1 0 | 0 1 0
	x[6] = x[1] * x[3]; // 1 0 1 | 0 0 1 | 1 0 0
	x[5] = x[1] * x[2]; // 1 1 0 | 0 1 0 | 1 0 0
	x[4] = x[1] * x[1]; // 2 0 0 | 1 0 0 | 1 0 0
	x[19] = x[9] * x[3]; // 0 0 3 | 0 0 1 | 0 0 2
	x[18] = x[8] * x[3]; // 0 1 2 | 0 0 1 | 0 1 1
	x[17] = x[8] * x[2]; // 0 2 1 | 0 1 0 | 0 1 1
	x[16] = x[7] * x[2]; // 0 3 0 | 0 1 0 | 0 2 0
	x[15] = x[6] * x[3]; // 1 0 2 | 0 0 1 | 1 0 1
	x[14] = x[5] * x[3]; // 1 1 1 | 0 0 1 | 1 1 0
	x[13] = x[5] * x[2]; // 1 2 0 | 0 1 0 | 1 1 0
	x[12] = x[6] * x[1]; // 2 0 1 | 1 0 0 | 1 0 1
	x[11] = x[5] * x[1]; // 2 1 0 | 1 0 0 | 1 1 0
	x[10] = x[4] * x[1]; // 3 0 0 | 1 0 0 | 2 0 0
	x[34] = x[9] * x[9]; // 0 0 4 | 0 0 2 | 0 0 2
	x[33] = x[8] * x[9]; // 0 1 3 | 0 0 2 | 0 1 1
	x[32] = x[8] * x[8]; // 0 2 2 | 0 1 1 | 0 1 1
	x[31] = x[8] * x[7]; // 0 3 1 | 0 2 0 | 0 1 1
	x[30] = x[7] * x[7]; // 0 4 0 | 0 2 0 | 0 2 0
	x[29] = x[6] * x[9]; // 1 0 3 | 0 0 2 | 1 0 1
	x[28] = x[5] * x[9]; // 1 1 2 | 0 0 2 | 1 1 0
	x[27] = x[5] * x[8]; // 1 2 1 | 0 1 1 | 1 1 0
	x[26] = x[5] * x[7]; // 1 3 0 | 0 2 0 | 1 1 0
	x[25] = x[6] * x[6]; // 2 0 2 | 1 0 1 | 1 0 1
	x[24] = x[5] * x[6]; // 2 1 1 | 1 0 1 | 1 1 0
	x[23] = x[5] * x[5]; // 2 2 0 | 1 1 0 | 1 1 0
	x[22] = x[6] * x[4]; // 3 0 1 | 2 0 0 | 1 0 1
	x[21] = x[5] * x[4]; // 3 1 0 | 2 0 0 | 1 1 0
	x[20] = x[4] * x[4]; // 4 0 0 | 2 0 0 | 2 0 0
	x[55] = x[19] * x[9]; // 0 0 5 | 0 0 2 | 0 0 3
	x[54] = x[18] * x[9]; // 0 1 4 | 0 0 2 | 0 1 2
	x[53] = x[17] * x[9]; // 0 2 3 | 0 0 2 | 0 2 1
	x[52] = x[17] * x[8]; // 0 3 2 | 0 1 1 | 0 2 1
	x[51] = x[17] * x[7]; // 0 4 1 | 0 2 0 | 0 2 1
	x[50] = x[16] * x[7]; // 0 5 0 | 0 2 0 | 0 3 0
	x[49] = x[15] * x[9]; // 1 0 4 | 0 0 2 | 1 0 2
	x[48] = x[14] * x[9]; // 1 1 3 | 0 0 2 | 1 1 1
	x[47] = x[14] * x[8]; // 1 2 2 | 0 1 1 | 1 1 1
	x[46] = x[14] * x[7]; // 1 3 1 | 0 2 0 | 1 1 1
	x[45] = x[13] * x[7]; // 1 4 0 | 0 2 0 | 1 2 0
	x[44] = x[12] * x[9]; // 2 0 3 | 0 0 2 | 2 0 1
	x[43] = x[14] * x[6]; // 2 1 2 | 1 0 1 | 1 1 1
	x[42] = x[14] * x[5]; // 2 2 1 | 1 1 0 | 1 1 1
	x[41] = x[11] * x[7]; // 2 3 0 | 0 2 0 | 2 1 0
	x[40] = x[12] * x[6]; // 3 0 2 | 1 0 1 | 2 0 1
	x[39] = x[14] * x[4]; // 3 1 1 | 2 0 0 | 1 1 1
	x[38] = x[11] * x[5]; // 3 2 0 | 1 1 0 | 2 1 0
	x[37] = x[12] * x[4]; // 4 0 1 | 2 0 0 | 2 0 1
	x[36] = x[11] * x[4]; // 4 1 0 | 2 0 0 | 2 1 0
	x[35] = x[10] * x[4]; // 5 0 0 | 2 0 0 | 3 0 0
	Mb[0] = Ma000;
	Mb[1] = Ma100;
	Mb[2] = Ma010;
	Mb[3] = Ma001;
	Mb[4] = Ma200;
	Mb[5] = Ma110;
	Mb[6] = Ma101;
	Mb[7] = Ma020;
	Mb[8] = Ma011;
	Mb[9] = Ma002;
	Mb[10] = Ma300;
	Mb[11] = Ma210;
	Mb[12] = Ma201;
	Mb[13] = Ma120;
	Mb[14] = Ma111;
	Mb[15] = Ma102;
	Mb[16] = Ma030;
	Mb[17] = Ma021;
	Mb[18] = Ma012;
	Mb[19] = Ma003;
	Mb[20] = Ma400;
	Mb[21] = Ma310;
	Mb[22] = Ma301;
	Mb[23] = Ma220;
	Mb[24] = Ma211;
	Mb[25] = Ma202;
	Mb[26] = Ma130;
	Mb[27] = Ma121;
	Mb[28] = Ma112;
	Mb[29] = Ma103;
	Mb[30] = Ma040;
	Mb[31] = Ma031;
	Mb[32] = Ma022;
	Mb[33] = Ma013;
	Mb[34] = Ma004;
	Mb[1] = fmaf( x[1], Ma000, Mb[1]);
	Mb[2] = fmaf( x[2], Ma000, Mb[2]);
	Mb[3] = fmaf( x[3], Ma000, Mb[3]);
	Mb[4] *= T(5.0000000000000000e-01);
	Mb[4] = fmaf( x[1], Ma100, Mb[4]);
	Mb[4] *= T(2.0000000000000000e+00);
	Mb[4] = fmaf( x[4], Ma000, Mb[4]);
	Mb[5] = fmaf( x[5], Ma000, Mb[5]);
	Mb[5] = fmaf( x[1], Ma010, Mb[5]);
	Mb[5] = fmaf( x[2], Ma100, Mb[5]);
	Mb[6] = fmaf( x[6], Ma000, Mb[6]);
	Mb[6] = fmaf( x[1], Ma001, Mb[6]);
	Mb[6] = fmaf( x[3], Ma100, Mb[6]);
	Mb[7] *= T(5.0000000000000000e-01);
	Mb[7] = fmaf( x[2], Ma010, Mb[7]);
	Mb[7] *= T(2.0000000000000000e+00);
	Mb[7] = fmaf( x[7], Ma000, Mb[7]);
	Mb[8] = fmaf( x[8], Ma000, Mb[8]);
	Mb[8] = fmaf( x[2], Ma001, Mb[8]);
	Mb[8] = fmaf( x[3], Ma010, Mb[8]);
	Mb[9] *= T(5.0000000000000000e-01);
	Mb[9] = fmaf( x[3], Ma001, Mb[9]);
	Mb[9] *= T(2.0000000000000000e+00);
	Mb[9] = fmaf( x[9], Ma000, Mb[9]);
	Mb[10] *= T(3.3333333333333331e-01);
	Mb[10] = fmaf( x[4], Ma100, Mb[10]);
	Mb[10] = fmaf( x[1], Ma200, Mb[10]);
	Mb[10] *= T(3.0000000000000000e+00);
	Mb[10] = fmaf( x[10], Ma000, Mb[10]);
	Mb[11] *= T(5.0000000000000000e-01);
	Mb[11] = fmaf( x[5], Ma100, Mb[11]);
	Mb[11] = fmaf( x[1], Ma110, Mb[11]);
	Mb[11] *= T(2.0000000000000000e+00);
	Mb[11] = fmaf( x[11], Ma000, Mb[11]);
	Mb[11] = fmaf( x[4], Ma010, Mb[11]);
	Mb[11] = fmaf( x[2], Ma200, Mb[11]);
	Mb[12] *= T(5.0000000000000000e-01);
	Mb[12] = fmaf( x[6], Ma100, Mb[12]);
	Mb[12] = fmaf( x[1], Ma101, Mb[12]);
	Mb[12] *= T(2.0000000000000000e+00);
	Mb[12] = fmaf( x[12], Ma000, Mb[12]);
	Mb[12] = fmaf( x[4], Ma001, Mb[12]);
	Mb[12] = fmaf( x[3], Ma200, Mb[12]);
	Mb[13] *= T(5.0000000000000000e-01);
	Mb[13] = fmaf( x[5], Ma010, Mb[13]);
	Mb[13] = fmaf( x[2], Ma110, Mb[13]);
	Mb[13] *= T(2.0000000000000000e+00);
	Mb[13] = fmaf( x[13], Ma000, Mb[13]);
	Mb[13] = fmaf( x[1], Ma020, Mb[13]);
	Mb[13] = fmaf( x[7], Ma100, Mb[13]);
	Mb[14] = fmaf( x[14], Ma000, Mb[14]);
	Mb[14] = fmaf( x[5], Ma001, Mb[14]);
	Mb[14] = fmaf( x[6], Ma010, Mb[14]);
	Mb[14] = fmaf( x[1], Ma011, Mb[14]);
	Mb[14] = fmaf( x[8], Ma100, Mb[14]);
	Mb[14] = fmaf( x[2], Ma101, Mb[14]);
	Mb[14] = fmaf( x[3], Ma110, Mb[14]);
	Mb[15] *= T(5.0000000000000000e-01);
	Mb[15] = fmaf( x[6], Ma001, Mb[15]);
	Mb[15] = fmaf( x[3], Ma101, Mb[15]);
	Mb[15] *= T(2.0000000000000000e+00);
	Mb[15] = fmaf( x[15], Ma000, Mb[15]);
	Mb[15] = fmaf( x[1], Ma002, Mb[15]);
	Mb[15] = fmaf( x[9], Ma100, Mb[15]);
	Mb[16] *= T(3.3333333333333331e-01);
	Mb[16] = fmaf( x[7], Ma010, Mb[16]);
	Mb[16] = fmaf( x[2], Ma020, Mb[16]);
	Mb[16] *= T(3.0000000000000000e+00);
	Mb[16] = fmaf( x[16], Ma000, Mb[16]);
	Mb[17] *= T(5.0000000000000000e-01);
	Mb[17] = fmaf( x[8], Ma010, Mb[17]);
	Mb[17] = fmaf( x[2], Ma011, Mb[17]);
	Mb[17] *= T(2.0000000000000000e+00);
	Mb[17] = fmaf( x[17], Ma000, Mb[17]);
	Mb[17] = fmaf( x[7], Ma001, Mb[17]);
	Mb[17] = fmaf( x[3], Ma020, Mb[17]);
	Mb[18] *= T(5.0000000000000000e-01);
	Mb[18] = fmaf( x[8], Ma001, Mb[18]);
	Mb[18] = fmaf( x[3], Ma011, Mb[18]);
	Mb[18] *= T(2.0000000000000000e+00);
	Mb[18] = fmaf( x[18], Ma000, Mb[18]);
	Mb[18] = fmaf( x[2], Ma002, Mb[18]);
	Mb[18] = fmaf( x[9], Ma010, Mb[18]);
	Mb[19] *= T(3.3333333333333331e-01);
	Mb[19] = fmaf( x[9], Ma001, Mb[19]);
	Mb[19] = fmaf( x[3], Ma002, Mb[19]);
	Mb[19] *= T(3.0000000000000000e+00);
	Mb[19] = fmaf( x[19], Ma000, Mb[19]);
	Mb[20] *= T(1.6666666666666666e-01);
	Mb[20] = fmaf( x[4], Ma200, Mb[20]);
	Mb[20] *= T(1.5000000000000000e+00);
	Mb[20] = fmaf( x[10], Ma100, Mb[20]);
	Mb[20] = fmaf( x[1], Ma300, Mb[20]);
	Mb[20] *= T(4.0000000000000000e+00);
	Mb[20] = fmaf( x[20], Ma000, Mb[20]);
	Mb[21] *= T(3.3333333333333331e-01);
	Mb[21] = fmaf( x[11], Ma100, Mb[21]);
	Mb[21] = fmaf( x[4], Ma110, Mb[21]);
	Mb[21] = fmaf( x[5], Ma200, Mb[21]);
	Mb[21] = fmaf( x[1], Ma210, Mb[21]);
	Mb[21] *= T(3.0000000000000000e+00);
	Mb[21] = fmaf( x[21], Ma000, Mb[21]);
	Mb[21] = fmaf( x[10], Ma010, Mb[21]);
	Mb[21] = fmaf( x[2], Ma300, Mb[21]);
	Mb[22] *= T(3.3333333333333331e-01);
	Mb[22] = fmaf( x[12], Ma100, Mb[22]);
	Mb[22] = fmaf( x[4], Ma101, Mb[22]);
	Mb[22] = fmaf( x[6], Ma200, Mb[22]);
	Mb[22] = fmaf( x[1], Ma201, Mb[22]);
	Mb[22] *= T(3.0000000000000000e+00);
	Mb[22] = fmaf( x[22], Ma000, Mb[22]);
	Mb[22] = fmaf( x[10], Ma001, Mb[22]);
	Mb[22] = fmaf( x[3], Ma300, Mb[22]);
	Mb[23] *= T(2.5000000000000000e-01);
	Mb[23] = fmaf( x[5], Ma110, Mb[23]);
	Mb[23] *= T(2.0000000000000000e+00);
	Mb[23] = fmaf( x[11], Ma010, Mb[23]);
	Mb[23] = fmaf( x[13], Ma100, Mb[23]);
	Mb[23] = fmaf( x[1], Ma120, Mb[23]);
	Mb[23] = fmaf( x[2], Ma210, Mb[23]);
	Mb[23] *= T(2.0000000000000000e+00);
	Mb[23] = fmaf( x[23], Ma000, Mb[23]);
	Mb[23] = fmaf( x[4], Ma020, Mb[23]);
	Mb[23] = fmaf( x[7], Ma200, Mb[23]);
	Mb[24] *= T(5.0000000000000000e-01);
	Mb[24] = fmaf( x[14], Ma100, Mb[24]);
	Mb[24] = fmaf( x[5], Ma101, Mb[24]);
	Mb[24] = fmaf( x[6], Ma110, Mb[24]);
	Mb[24] = fmaf( x[1], Ma111, Mb[24]);
	Mb[24] *= T(2.0000000000000000e+00);
	Mb[24] = fmaf( x[24], Ma000, Mb[24]);
	Mb[24] = fmaf( x[11], Ma001, Mb[24]);
	Mb[24] = fmaf( x[12], Ma010, Mb[24]);
	Mb[24] = fmaf( x[4], Ma011, Mb[24]);
	Mb[24] = fmaf( x[8], Ma200, Mb[24]);
	Mb[24] = fmaf( x[2], Ma201, Mb[24]);
	Mb[24] = fmaf( x[3], Ma210, Mb[24]);
	Mb[25] *= T(2.5000000000000000e-01);
	Mb[25] = fmaf( x[6], Ma101, Mb[25]);
	Mb[25] *= T(2.0000000000000000e+00);
	Mb[25] = fmaf( x[12], Ma001, Mb[25]);
	Mb[25] = fmaf( x[15], Ma100, Mb[25]);
	Mb[25] = fmaf( x[1], Ma102, Mb[25]);
	Mb[25] = fmaf( x[3], Ma201, Mb[25]);
	Mb[25] *= T(2.0000000000000000e+00);
	Mb[25] = fmaf( x[25], Ma000, Mb[25]);
	Mb[25] = fmaf( x[4], Ma002, Mb[25]);
	Mb[25] = fmaf( x[9], Ma200, Mb[25]);
	Mb[26] *= T(3.3333333333333331e-01);
	Mb[26] = fmaf( x[13], Ma010, Mb[26]);
	Mb[26] = fmaf( x[5], Ma020, Mb[26]);
	Mb[26] = fmaf( x[7], Ma110, Mb[26]);
	Mb[26] = fmaf( x[2], Ma120, Mb[26]);
	Mb[26] *= T(3.0000000000000000e+00);
	Mb[26] = fmaf( x[26], Ma000, Mb[26]);
	Mb[26] = fmaf( x[1], Ma030, Mb[26]);
	Mb[26] = fmaf( x[16], Ma100, Mb[26]);
	Mb[27] *= T(5.0000000000000000e-01);
	Mb[27] = fmaf( x[14], Ma010, Mb[27]);
	Mb[27] = fmaf( x[5], Ma011, Mb[27]);
	Mb[27] = fmaf( x[8], Ma110, Mb[27]);
	Mb[27] = fmaf( x[2], Ma111, Mb[27]);
	Mb[27] *= T(2.0000000000000000e+00);
	Mb[27] = fmaf( x[27], Ma000, Mb[27]);
	Mb[27] = fmaf( x[13], Ma001, Mb[27]);
	Mb[27] = fmaf( x[6], Ma020, Mb[27]);
	Mb[27] = fmaf( x[1], Ma021, Mb[27]);
	Mb[27] = fmaf( x[17], Ma100, Mb[27]);
	Mb[27] = fmaf( x[7], Ma101, Mb[27]);
	Mb[27] = fmaf( x[3], Ma120, Mb[27]);
	Mb[28] *= T(5.0000000000000000e-01);
	Mb[28] = fmaf( x[14], Ma001, Mb[28]);
	Mb[28] = fmaf( x[6], Ma011, Mb[28]);
	Mb[28] = fmaf( x[8], Ma101, Mb[28]);
	Mb[28] = fmaf( x[3], Ma111, Mb[28]);
	Mb[28] *= T(2.0000000000000000e+00);
	Mb[28] = fmaf( x[28], Ma000, Mb[28]);
	Mb[28] = fmaf( x[5], Ma002, Mb[28]);
	Mb[28] = fmaf( x[15], Ma010, Mb[28]);
	Mb[28] = fmaf( x[1], Ma012, Mb[28]);
	Mb[28] = fmaf( x[18], Ma100, Mb[28]);
	Mb[28] = fmaf( x[2], Ma102, Mb[28]);
	Mb[28] = fmaf( x[9], Ma110, Mb[28]);
	Mb[29] *= T(3.3333333333333331e-01);
	Mb[29] = fmaf( x[15], Ma001, Mb[29]);
	Mb[29] = fmaf( x[6], Ma002, Mb[29]);
	Mb[29] = fmaf( x[9], Ma101, Mb[29]);
	Mb[29] = fmaf( x[3], Ma102, Mb[29]);
	Mb[29] *= T(3.0000000000000000e+00);
	Mb[29] = fmaf( x[29], Ma000, Mb[29]);
	Mb[29] = fmaf( x[1], Ma003, Mb[29]);
	Mb[29] = fmaf( x[19], Ma100, Mb[29]);
	Mb[30] *= T(1.6666666666666666e-01);
	Mb[30] = fmaf( x[7], Ma020, Mb[30]);
	Mb[30] *= T(1.5000000000000000e+00);
	Mb[30] = fmaf( x[16], Ma010, Mb[30]);
	Mb[30] = fmaf( x[2], Ma030, Mb[30]);
	Mb[30] *= T(4.0000000000000000e+00);
	Mb[30] = fmaf( x[30], Ma000, Mb[30]);
	Mb[31] *= T(3.3333333333333331e-01);
	Mb[31] = fmaf( x[17], Ma010, Mb[31]);
	Mb[31] = fmaf( x[7], Ma011, Mb[31]);
	Mb[31] = fmaf( x[8], Ma020, Mb[31]);
	Mb[31] = fmaf( x[2], Ma021, Mb[31]);
	Mb[31] *= T(3.0000000000000000e+00);
	Mb[31] = fmaf( x[31], Ma000, Mb[31]);
	Mb[31] = fmaf( x[16], Ma001, Mb[31]);
	Mb[31] = fmaf( x[3], Ma030, Mb[31]);
	Mb[32] *= T(2.5000000000000000e-01);
	Mb[32] = fmaf( x[8], Ma011, Mb[32]);
	Mb[32] *= T(2.0000000000000000e+00);
	Mb[32] = fmaf( x[17], Ma001, Mb[32]);
	Mb[32] = fmaf( x[18], Ma010, Mb[32]);
	Mb[32] = fmaf( x[2], Ma012, Mb[32]);
	Mb[32] = fmaf( x[3], Ma021, Mb[32]);
	Mb[32] *= T(2.0000000000000000e+00);
	Mb[32] = fmaf( x[32], Ma000, Mb[32]);
	Mb[32] = fmaf( x[7], Ma002, Mb[32]);
	Mb[32] = fmaf( x[9], Ma020, Mb[32]);
	Mb[33] *= T(3.3333333333333331e-01);
	Mb[33] = fmaf( x[18], Ma001, Mb[33]);
	Mb[33] = fmaf( x[8], Ma002, Mb[33]);
	Mb[33] = fmaf( x[9], Ma011, Mb[33]);
	Mb[33] = fmaf( x[3], Ma012, Mb[33]);
	Mb[33] *= T(3.0000000000000000e+00);
	Mb[33] = fmaf( x[33], Ma000, Mb[33]);
	Mb[33] = fmaf( x[2], Ma003, Mb[33]);
	Mb[33] = fmaf( x[19], Ma010, Mb[33]);
	Mb[34] *= T(1.6666666666666666e-01);
	Mb[34] = fmaf( x[9], Ma002, Mb[34]);
	Mb[34] *= T(1.5000000000000000e+00);
	Mb[34] = fmaf( x[19], Ma001, Mb[34]);
	Mb[34] = fmaf( x[3], Ma003, Mb[34]);
	Mb[34] *= T(4.0000000000000000e+00);
	Mb[34] = fmaf( x[34], Ma000, Mb[34]);
	Mb[35] *= T(1.0000000000000001e-01);
	Mb[35] = fmaf( x[10], Ma200, Mb[35]);
	Mb[35] = fmaf( x[4], Ma300, Mb[35]);
	Mb[35] *= T(2.0000000000000000e+00);
	Mb[35] = fmaf( x[20], Ma100, Mb[35]);
	Mb[35] = fmaf( x[1], Ma400, Mb[35]);
	Mb[35] *= T(5.0000000000000000e+00);
	Mb[35] = fmaf( x[35], Ma000, Mb[35]);
	Mb[36] *= T(1.6666666666666666e-01);
	Mb[36] = fmaf( x[11], Ma200, Mb[36]);
	Mb[36] = fmaf( x[4], Ma210, Mb[36]);
	Mb[36] *= T(1.5000000000000000e+00);
	Mb[36] = fmaf( x[21], Ma100, Mb[36]);
	Mb[36] = fmaf( x[10], Ma110, Mb[36]);
	Mb[36] = fmaf( x[5], Ma300, Mb[36]);
	Mb[36] = fmaf( x[1], Ma310, Mb[36]);
	Mb[36] *= T(4.0000000000000000e+00);
	Mb[36] = fmaf( x[36], Ma000, Mb[36]);
	Mb[36] = fmaf( x[20], Ma010, Mb[36]);
	Mb[36] = fmaf( x[2], Ma400, Mb[36]);
	Mb[37] *= T(1.6666666666666666e-01);
	Mb[37] = fmaf( x[12], Ma200, Mb[37]);
	Mb[37] = fmaf( x[4], Ma201, Mb[37]);
	Mb[37] *= T(1.5000000000000000e+00);
	Mb[37] = fmaf( x[22], Ma100, Mb[37]);
	Mb[37] = fmaf( x[10], Ma101, Mb[37]);
	Mb[37] = fmaf( x[6], Ma300, Mb[37]);
	Mb[37] = fmaf( x[1], Ma301, Mb[37]);
	Mb[37] *= T(4.0000000000000000e+00);
	Mb[37] = fmaf( x[37], Ma000, Mb[37]);
	Mb[37] = fmaf( x[20], Ma001, Mb[37]);
	Mb[37] = fmaf( x[3], Ma400, Mb[37]);
	Mb[38] *= T(1.6666666666666666e-01);
	Mb[38] = fmaf( x[11], Ma110, Mb[38]);
	Mb[38] = fmaf( x[5], Ma210, Mb[38]);
	Mb[38] *= T(2.0000000000000000e+00);
	Mb[38] = fmaf( x[23], Ma100, Mb[38]);
	Mb[38] = fmaf( x[4], Ma120, Mb[38]);
	Mb[38] = fmaf( x[13], Ma200, Mb[38]);
	Mb[38] = fmaf( x[1], Ma220, Mb[38]);
	Mb[38] *= T(1.5000000000000000e+00);
	Mb[38] = fmaf( x[21], Ma010, Mb[38]);
	Mb[38] = fmaf( x[2], Ma310, Mb[38]);
	Mb[38] *= T(2.0000000000000000e+00);
	Mb[38] = fmaf( x[38], Ma000, Mb[38]);
	Mb[38] = fmaf( x[10], Ma020, Mb[38]);
	Mb[38] = fmaf( x[7], Ma300, Mb[38]);
	Mb[39] *= T(3.3333333333333331e-01);
	Mb[39] = fmaf( x[24], Ma100, Mb[39]);
	Mb[39] = fmaf( x[11], Ma101, Mb[39]);
	Mb[39] = fmaf( x[12], Ma110, Mb[39]);
	Mb[39] = fmaf( x[4], Ma111, Mb[39]);
	Mb[39] = fmaf( x[14], Ma200, Mb[39]);
	Mb[39] = fmaf( x[5], Ma201, Mb[39]);
	Mb[39] = fmaf( x[6], Ma210, Mb[39]);
	Mb[39] = fmaf( x[1], Ma211, Mb[39]);
	Mb[39] *= T(3.0000000000000000e+00);
	Mb[39] = fmaf( x[39], Ma000, Mb[39]);
	Mb[39] = fmaf( x[21], Ma001, Mb[39]);
	Mb[39] = fmaf( x[22], Ma010, Mb[39]);
	Mb[39] = fmaf( x[10], Ma011, Mb[39]);
	Mb[39] = fmaf( x[8], Ma300, Mb[39]);
	Mb[39] = fmaf( x[2], Ma301, Mb[39]);
	Mb[39] = fmaf( x[3], Ma310, Mb[39]);
	Mb[40] *= T(1.6666666666666666e-01);
	Mb[40] = fmaf( x[12], Ma101, Mb[40]);
	Mb[40] = fmaf( x[6], Ma201, Mb[40]);
	Mb[40] *= T(2.0000000000000000e+00);
	Mb[40] = fmaf( x[25], Ma100, Mb[40]);
	Mb[40] = fmaf( x[4], Ma102, Mb[40]);
	Mb[40] = fmaf( x[15], Ma200, Mb[40]);
	Mb[40] = fmaf( x[1], Ma202, Mb[40]);
	Mb[40] *= T(1.5000000000000000e+00);
	Mb[40] = fmaf( x[22], Ma001, Mb[40]);
	Mb[40] = fmaf( x[3], Ma301, Mb[40]);
	Mb[40] *= T(2.0000000000000000e+00);
	Mb[40] = fmaf( x[40], Ma000, Mb[40]);
	Mb[40] = fmaf( x[10], Ma002, Mb[40]);
	Mb[40] = fmaf( x[9], Ma300, Mb[40]);
	Mb[41] *= T(1.6666666666666666e-01);
	Mb[41] = fmaf( x[13], Ma110, Mb[41]);
	Mb[41] = fmaf( x[5], Ma120, Mb[41]);
	Mb[41] *= T(2.0000000000000000e+00);
	Mb[41] = fmaf( x[23], Ma010, Mb[41]);
	Mb[41] = fmaf( x[11], Ma020, Mb[41]);
	Mb[41] = fmaf( x[7], Ma210, Mb[41]);
	Mb[41] = fmaf( x[2], Ma220, Mb[41]);
	Mb[41] *= T(1.5000000000000000e+00);
	Mb[41] = fmaf( x[26], Ma100, Mb[41]);
	Mb[41] = fmaf( x[1], Ma130, Mb[41]);
	Mb[41] *= T(2.0000000000000000e+00);
	Mb[41] = fmaf( x[41], Ma000, Mb[41]);
	Mb[41] = fmaf( x[4], Ma030, Mb[41]);
	Mb[41] = fmaf( x[16], Ma200, Mb[41]);
	Mb[42] *= T(2.5000000000000000e-01);
	Mb[42] = fmaf( x[14], Ma110, Mb[42]);
	Mb[42] = fmaf( x[5], Ma111, Mb[42]);
	Mb[42] *= T(2.0000000000000000e+00);
	Mb[42] = fmaf( x[24], Ma010, Mb[42]);
	Mb[42] = fmaf( x[11], Ma011, Mb[42]);
	Mb[42] = fmaf( x[2], Ma211, Mb[42]);
	Mb[42] = fmaf( x[8], Ma210, Mb[42]);
	Mb[42] = fmaf( x[27], Ma100, Mb[42]);
	Mb[42] = fmaf( x[13], Ma101, Mb[42]);
	Mb[42] = fmaf( x[6], Ma120, Mb[42]);
	Mb[42] = fmaf( x[1], Ma121, Mb[42]);
	Mb[42] *= T(2.0000000000000000e+00);
	Mb[42] = fmaf( x[3], Ma220, Mb[42]);
	Mb[42] = fmaf( x[42], Ma000, Mb[42]);
	Mb[42] = fmaf( x[7], Ma201, Mb[42]);
	Mb[42] = fmaf( x[17], Ma200, Mb[42]);
	Mb[42] = fmaf( x[4], Ma021, Mb[42]);
	Mb[42] = fmaf( x[12], Ma020, Mb[42]);
	Mb[42] = fmaf( x[23], Ma001, Mb[42]);
	Mb[43] *= T(2.5000000000000000e-01);
	Mb[43] = fmaf( x[6], Ma111, Mb[43]);
	Mb[43] = fmaf( x[14], Ma101, Mb[43]);
	Mb[43] *= T(2.0000000000000000e+00);
	Mb[43] = fmaf( x[5], Ma102, Mb[43]);
	Mb[43] = fmaf( x[3], Ma211, Mb[43]);
	Mb[43] = fmaf( x[8], Ma201, Mb[43]);
	Mb[43] = fmaf( x[1], Ma112, Mb[43]);
	Mb[43] = fmaf( x[15], Ma110, Mb[43]);
	Mb[43] = fmaf( x[28], Ma100, Mb[43]);
	Mb[43] = fmaf( x[12], Ma011, Mb[43]);
	Mb[43] = fmaf( x[24], Ma001, Mb[43]);
	Mb[43] *= T(2.0000000000000000e+00);
	Mb[43] = fmaf( x[43], Ma000, Mb[43]);
	Mb[43] = fmaf( x[4], Ma012, Mb[43]);
	Mb[43] = fmaf( x[25], Ma010, Mb[43]);
	Mb[43] = fmaf( x[18], Ma200, Mb[43]);
	Mb[43] = fmaf( x[11], Ma002, Mb[43]);
	Mb[43] = fmaf( x[2], Ma202, Mb[43]);
	Mb[43] = fmaf( x[9], Ma210, Mb[43]);
	Mb[44] *= T(1.6666666666666666e-01);
	Mb[44] = fmaf( x[15], Ma101, Mb[44]);
	Mb[44] = fmaf( x[6], Ma102, Mb[44]);
	Mb[44] *= T(2.0000000000000000e+00);
	Mb[44] = fmaf( x[25], Ma001, Mb[44]);
	Mb[44] = fmaf( x[12], Ma002, Mb[44]);
	Mb[44] = fmaf( x[9], Ma201, Mb[44]);
	Mb[44] = fmaf( x[3], Ma202, Mb[44]);
	Mb[44] *= T(1.5000000000000000e+00);
	Mb[44] = fmaf( x[29], Ma100, Mb[44]);
	Mb[44] = fmaf( x[1], Ma103, Mb[44]);
	Mb[44] *= T(2.0000000000000000e+00);
	Mb[44] = fmaf( x[44], Ma000, Mb[44]);
	Mb[44] = fmaf( x[4], Ma003, Mb[44]);
	Mb[44] = fmaf( x[19], Ma200, Mb[44]);
	Mb[45] *= T(1.6666666666666666e-01);
	Mb[45] = fmaf( x[13], Ma020, Mb[45]);
	Mb[45] = fmaf( x[7], Ma120, Mb[45]);
	Mb[45] *= T(1.5000000000000000e+00);
	Mb[45] = fmaf( x[26], Ma010, Mb[45]);
	Mb[45] = fmaf( x[5], Ma030, Mb[45]);
	Mb[45] = fmaf( x[16], Ma110, Mb[45]);
	Mb[45] = fmaf( x[2], Ma130, Mb[45]);
	Mb[45] *= T(4.0000000000000000e+00);
	Mb[45] = fmaf( x[45], Ma000, Mb[45]);
	Mb[45] = fmaf( x[1], Ma040, Mb[45]);
	Mb[45] = fmaf( x[30], Ma100, Mb[45]);
	Mb[46] *= T(3.3333333333333331e-01);
	Mb[46] = fmaf( x[27], Ma010, Mb[46]);
	Mb[46] = fmaf( x[13], Ma011, Mb[46]);
	Mb[46] = fmaf( x[14], Ma020, Mb[46]);
	Mb[46] = fmaf( x[5], Ma021, Mb[46]);
	Mb[46] = fmaf( x[17], Ma110, Mb[46]);
	Mb[46] = fmaf( x[7], Ma111, Mb[46]);
	Mb[46] = fmaf( x[8], Ma120, Mb[46]);
	Mb[46] = fmaf( x[2], Ma121, Mb[46]);
	Mb[46] *= T(3.0000000000000000e+00);
	Mb[46] = fmaf( x[46], Ma000, Mb[46]);
	Mb[46] = fmaf( x[26], Ma001, Mb[46]);
	Mb[46] = fmaf( x[6], Ma030, Mb[46]);
	Mb[46] = fmaf( x[1], Ma031, Mb[46]);
	Mb[46] = fmaf( x[31], Ma100, Mb[46]);
	Mb[46] = fmaf( x[16], Ma101, Mb[46]);
	Mb[46] = fmaf( x[3], Ma130, Mb[46]);
	Mb[47] *= T(2.5000000000000000e-01);
	Mb[47] = fmaf( x[8], Ma111, Mb[47]);
	Mb[47] = fmaf( x[14], Ma011, Mb[47]);
	Mb[47] *= T(2.0000000000000000e+00);
	Mb[47] = fmaf( x[27], Ma001, Mb[47]);
	Mb[47] = fmaf( x[3], Ma121, Mb[47]);
	Mb[47] = fmaf( x[2], Ma112, Mb[47]);
	Mb[47] = fmaf( x[18], Ma110, Mb[47]);
	Mb[47] = fmaf( x[17], Ma101, Mb[47]);
	Mb[47] = fmaf( x[6], Ma021, Mb[47]);
	Mb[47] = fmaf( x[5], Ma012, Mb[47]);
	Mb[47] = fmaf( x[28], Ma010, Mb[47]);
	Mb[47] *= T(2.0000000000000000e+00);
	Mb[47] = fmaf( x[1], Ma022, Mb[47]);
	Mb[47] = fmaf( x[32], Ma100, Mb[47]);
	Mb[47] = fmaf( x[15], Ma020, Mb[47]);
	Mb[47] = fmaf( x[7], Ma102, Mb[47]);
	Mb[47] = fmaf( x[13], Ma002, Mb[47]);
	Mb[47] = fmaf( x[9], Ma120, Mb[47]);
	Mb[47] = fmaf( x[47], Ma000, Mb[47]);
	Mb[48] *= T(3.3333333333333331e-01);
	Mb[48] = fmaf( x[28], Ma001, Mb[48]);
	Mb[48] = fmaf( x[14], Ma002, Mb[48]);
	Mb[48] = fmaf( x[15], Ma011, Mb[48]);
	Mb[48] = fmaf( x[6], Ma012, Mb[48]);
	Mb[48] = fmaf( x[18], Ma101, Mb[48]);
	Mb[48] = fmaf( x[8], Ma102, Mb[48]);
	Mb[48] = fmaf( x[9], Ma111, Mb[48]);
	Mb[48] = fmaf( x[3], Ma112, Mb[48]);
	Mb[48] *= T(3.0000000000000000e+00);
	Mb[48] = fmaf( x[48], Ma000, Mb[48]);
	Mb[48] = fmaf( x[5], Ma003, Mb[48]);
	Mb[48] = fmaf( x[29], Ma010, Mb[48]);
	Mb[48] = fmaf( x[1], Ma013, Mb[48]);
	Mb[48] = fmaf( x[33], Ma100, Mb[48]);
	Mb[48] = fmaf( x[2], Ma103, Mb[48]);
	Mb[48] = fmaf( x[19], Ma110, Mb[48]);
	Mb[49] *= T(1.6666666666666666e-01);
	Mb[49] = fmaf( x[15], Ma002, Mb[49]);
	Mb[49] = fmaf( x[9], Ma102, Mb[49]);
	Mb[49] *= T(1.5000000000000000e+00);
	Mb[49] = fmaf( x[29], Ma001, Mb[49]);
	Mb[49] = fmaf( x[6], Ma003, Mb[49]);
	Mb[49] = fmaf( x[19], Ma101, Mb[49]);
	Mb[49] = fmaf( x[3], Ma103, Mb[49]);
	Mb[49] *= T(4.0000000000000000e+00);
	Mb[49] = fmaf( x[49], Ma000, Mb[49]);
	Mb[49] = fmaf( x[1], Ma004, Mb[49]);
	Mb[49] = fmaf( x[34], Ma100, Mb[49]);
	Mb[50] *= T(1.0000000000000001e-01);
	Mb[50] = fmaf( x[16], Ma020, Mb[50]);
	Mb[50] = fmaf( x[7], Ma030, Mb[50]);
	Mb[50] *= T(2.0000000000000000e+00);
	Mb[50] = fmaf( x[30], Ma010, Mb[50]);
	Mb[50] = fmaf( x[2], Ma040, Mb[50]);
	Mb[50] *= T(5.0000000000000000e+00);
	Mb[50] = fmaf( x[50], Ma000, Mb[50]);
	Mb[51] *= T(1.6666666666666666e-01);
	Mb[51] = fmaf( x[17], Ma020, Mb[51]);
	Mb[51] = fmaf( x[7], Ma021, Mb[51]);
	Mb[51] *= T(1.5000000000000000e+00);
	Mb[51] = fmaf( x[31], Ma010, Mb[51]);
	Mb[51] = fmaf( x[16], Ma011, Mb[51]);
	Mb[51] = fmaf( x[8], Ma030, Mb[51]);
	Mb[51] = fmaf( x[2], Ma031, Mb[51]);
	Mb[51] *= T(4.0000000000000000e+00);
	Mb[51] = fmaf( x[51], Ma000, Mb[51]);
	Mb[51] = fmaf( x[30], Ma001, Mb[51]);
	Mb[51] = fmaf( x[3], Ma040, Mb[51]);
	Mb[52] *= T(1.6666666666666666e-01);
	Mb[52] = fmaf( x[17], Ma011, Mb[52]);
	Mb[52] = fmaf( x[8], Ma021, Mb[52]);
	Mb[52] *= T(2.0000000000000000e+00);
	Mb[52] = fmaf( x[32], Ma010, Mb[52]);
	Mb[52] = fmaf( x[7], Ma012, Mb[52]);
	Mb[52] = fmaf( x[18], Ma020, Mb[52]);
	Mb[52] = fmaf( x[2], Ma022, Mb[52]);
	Mb[52] *= T(1.5000000000000000e+00);
	Mb[52] = fmaf( x[31], Ma001, Mb[52]);
	Mb[52] = fmaf( x[3], Ma031, Mb[52]);
	Mb[52] *= T(2.0000000000000000e+00);
	Mb[52] = fmaf( x[52], Ma000, Mb[52]);
	Mb[52] = fmaf( x[16], Ma002, Mb[52]);
	Mb[52] = fmaf( x[9], Ma030, Mb[52]);
	Mb[53] *= T(1.6666666666666666e-01);
	Mb[53] = fmaf( x[18], Ma011, Mb[53]);
	Mb[53] = fmaf( x[8], Ma012, Mb[53]);
	Mb[53] *= T(2.0000000000000000e+00);
	Mb[53] = fmaf( x[32], Ma001, Mb[53]);
	Mb[53] = fmaf( x[17], Ma002, Mb[53]);
	Mb[53] = fmaf( x[9], Ma021, Mb[53]);
	Mb[53] = fmaf( x[3], Ma022, Mb[53]);
	Mb[53] *= T(1.5000000000000000e+00);
	Mb[53] = fmaf( x[33], Ma010, Mb[53]);
	Mb[53] = fmaf( x[2], Ma013, Mb[53]);
	Mb[53] *= T(2.0000000000000000e+00);
	Mb[53] = fmaf( x[53], Ma000, Mb[53]);
	Mb[53] = fmaf( x[7], Ma003, Mb[53]);
	Mb[53] = fmaf( x[19], Ma020, Mb[53]);
	Mb[54] *= T(1.6666666666666666e-01);
	Mb[54] = fmaf( x[18], Ma002, Mb[54]);
	Mb[54] = fmaf( x[9], Ma012, Mb[54]);
	Mb[54] *= T(1.5000000000000000e+00);
	Mb[54] = fmaf( x[33], Ma001, Mb[54]);
	Mb[54] = fmaf( x[8], Ma003, Mb[54]);
	Mb[54] = fmaf( x[19], Ma011, Mb[54]);
	Mb[54] = fmaf( x[3], Ma013, Mb[54]);
	Mb[54] *= T(4.0000000000000000e+00);
	Mb[54] = fmaf( x[54], Ma000, Mb[54]);
	Mb[54] = fmaf( x[2], Ma004, Mb[54]);
	Mb[54] = fmaf( x[34], Ma010, Mb[54]);
	Mb[55] *= T(1.0000000000000001e-01);
	Mb[55] = fmaf( x[19], Ma002, Mb[55]);
	Mb[55] = fmaf( x[9], Ma003, Mb[55]);
	Mb[55] *= T(2.0000000000000000e+00);
	Mb[55] = fmaf( x[34], Ma001, Mb[55]);
	Mb[55] = fmaf( x[3], Ma004, Mb[55]);
	Mb[55] *= T(5.0000000000000000e+00);
	Mb[55] = fmaf( x[55], Ma000, Mb[55]);
	T Mb_2_1_000 = Mb[9];
	T Mb_3_1_001 = Mb[19];
	T Mb_4_1_002 = Mb[34];
	T Mb_5_1_003 = Mb[55];
	T Mb_3_1_010 = Mb[18];
	T Mb_4_1_011 = Mb[33];
	T Mb_5_1_012 = Mb[54];
	T Mb_4_1_020 = Mb[32];
	T Mb_5_1_021 = Mb[53];
	T Mb_5_1_030 = Mb[52];
	T Mb_3_1_100 = Mb[15];
	T Mb_4_1_101 = Mb[29];
	T Mb_5_1_102 = Mb[49];
	T Mb_4_1_110 = Mb[28];
	T Mb_5_1_111 = Mb[48];
	T Mb_5_1_120 = Mb[47];
	T Mb_4_1_200 = Mb[25];
	T Mb_5_1_201 = Mb[44];
	T Mb_5_1_210 = Mb[43];
	T Mb_5_1_300 = Mb[40];
	T Mb_4_2_000 = Mb[34];
	T Mb_5_2_001 = Mb[55];
	T Mb_5_2_010 = Mb[54];
	T Mb_5_2_100 = Mb[49];
	Mb_2_1_000 += Mb[7];
	Mb_5_1_120 += Mb[45];
	Mb_2_1_000 += Mb[4];
	Mb_5_1_120 += Mb[38];
	Mb_3_1_001 += Mb[17];
	Mb_4_1_200 += Mb[23];
	Mb_3_1_001 += Mb[12];
	Mb_4_1_200 += Mb[20];
	Mb_4_1_002 += Mb[32];
	Mb_5_1_201 += Mb[42];
	Mb_4_1_002 += Mb[25];
	Mb_5_1_201 += Mb[37];
	Mb_5_1_003 += Mb[53];
	Mb_5_1_210 += Mb[41];
	Mb_5_1_003 += Mb[44];
	Mb_5_1_210 += Mb[36];
	Mb_3_1_010 += Mb[16];
	Mb_5_1_300 += Mb[38];
	Mb_3_1_010 += Mb[11];
	Mb_5_1_300 += Mb[35];
	Mb_4_1_011 += Mb[31];
	Mb_4_2_000 = fmaf(T(2.0000000000000000e+00), Mb[32], Mb_4_2_000);
	Mb_4_1_011 += Mb[24];
	Mb_4_2_000 += Mb[30];
	Mb_5_1_012 += Mb[52];
	Mb_4_2_000 = fmaf(T(2.0000000000000000e+00), Mb[25], Mb_4_2_000);
	Mb_5_1_012 += Mb[43];
	Mb_4_2_000 = fmaf(T(2.0000000000000000e+00), Mb[23], Mb_4_2_000);
	Mb_4_1_020 += Mb[30];
	Mb_4_2_000 += Mb[20];
	Mb_4_1_020 += Mb[23];
	Mb_5_2_001 = fmaf(T(2.0000000000000000e+00), Mb[53], Mb_5_2_001);
	Mb_5_1_021 += Mb[51];
	Mb_5_2_001 += Mb[51];
	Mb_5_1_021 += Mb[42];
	Mb_5_2_001 = fmaf(T(2.0000000000000000e+00), Mb[44], Mb_5_2_001);
	Mb_5_1_030 += Mb[50];
	Mb_5_2_001 = fmaf(T(2.0000000000000000e+00), Mb[42], Mb_5_2_001);
	Mb_5_1_030 += Mb[41];
	Mb_5_2_001 += Mb[37];
	Mb_3_1_100 += Mb[13];
	Mb_5_2_010 = fmaf(T(2.0000000000000000e+00), Mb[52], Mb_5_2_010);
	Mb_3_1_100 += Mb[10];
	Mb_5_2_010 += Mb[50];
	Mb_4_1_101 += Mb[27];
	Mb_5_2_010 = fmaf(T(2.0000000000000000e+00), Mb[43], Mb_5_2_010);
	Mb_4_1_101 += Mb[22];
	Mb_5_2_010 = fmaf(T(2.0000000000000000e+00), Mb[41], Mb_5_2_010);
	Mb_5_1_102 += Mb[47];
	Mb_5_2_010 += Mb[36];
	Mb_5_1_102 += Mb[40];
	Mb_5_2_100 = fmaf(T(2.0000000000000000e+00), Mb[47], Mb_5_2_100);
	Mb_4_1_110 += Mb[26];
	Mb_5_2_100 += Mb[45];
	Mb_4_1_110 += Mb[21];
	Mb_5_2_100 = fmaf(T(2.0000000000000000e+00), Mb[40], Mb_5_2_100);
	Mb_5_1_111 += Mb[46];
	Mb_5_2_100 = fmaf(T(2.0000000000000000e+00), Mb[38], Mb_5_2_100);
	Mb_5_1_111 += Mb[39];
	Mb_5_2_100 += Mb[35];
	Mc[0] = Mb[0];
	Mc[21] = Mb[3];
	Mc[36] = Mb[9];
	Mc[2] = Mb[2];
	Mc[23] = Mb[8];
	Mc[5] = Mb[7];
	Mc[26] = Mb[17];
	Mc[9] = Mb[16];
	Mc[30] = Mb[31];
	Mc[14] = Mb[30];
	Mc[35] = Mb[51];
	Mc[20] = Mb[50];
	Mc[1] = Mb[1];
	Mc[22] = Mb[6];
	Mc[4] = Mb[5];
	Mc[25] = Mb[14];
	Mc[8] = Mb[13];
	Mc[29] = Mb[27];
	Mc[13] = Mb[26];
	Mc[34] = Mb[46];
	Mc[19] = Mb[45];
	Mc[3] = Mb[4];
	Mc[24] = Mb[12];
	Mc[7] = Mb[11];
	Mc[28] = Mb[24];
	Mc[12] = Mb[23];
	Mc[33] = Mb[42];
	Mc[18] = Mb[41];
	Mc[6] = Mb[10];
	Mc[27] = Mb[22];
	Mc[11] = Mb[21];
	Mc[32] = Mb[39];
	Mc[17] = Mb[38];
	Mc[10] = Mb[20];
	Mc[31] = Mb[37];
	Mc[16] = Mb[36];
	Mc[15] = Mb[35];
	Mc[26] = fmaf(T(-2.0000000000000001e-01), Mb_3_1_001, Mc[26]);
	Mc[33] = fmaf(T(-1.1111111111111112e-01), Mb_5_1_201, Mc[33]);
	Mc[9] = fmaf(T(-5.9999999999999998e-01), Mb_3_1_010, Mc[9]);
	Mc[33] = fmaf(T(-1.1111111111111112e-01), Mb_5_1_021, Mc[33]);
	Mc[30] = fmaf(T(-4.2857142857142860e-01), Mb_4_1_011, Mc[30]);
	Mc[33] = fmaf(T(1.5873015873015876e-02), Mb_5_2_001, Mc[33]);
	Mc[14] = fmaf(T(-8.5714285714285721e-01), Mb_4_1_020, Mc[14]);
	Mc[18] = fmaf(T(-3.3333333333333337e-01), Mb_5_1_210, Mc[18]);
	Mc[14] = fmaf(T(8.5714285714285715e-02), Mb_4_2_000, Mc[14]);
	Mc[18] = fmaf(T(-1.1111111111111112e-01), Mb_5_1_030, Mc[18]);
	Mc[35] = fmaf(T(-6.6666666666666674e-01), Mb_5_1_021, Mc[35]);
	Mc[18] = fmaf(T(4.7619047619047623e-02), Mb_5_2_010, Mc[18]);
	Mc[35] = fmaf(T(4.7619047619047623e-02), Mb_5_2_001, Mc[35]);
	Mc[6] = fmaf(T(-5.9999999999999998e-01), Mb_3_1_100, Mc[6]);
	Mc[20] = fmaf(T(-1.1111111111111112e+00), Mb_5_1_030, Mc[20]);
	Mc[27] = fmaf(T(-4.2857142857142860e-01), Mb_4_1_101, Mc[27]);
	Mc[20] = fmaf(T(2.3809523809523811e-01), Mb_5_2_010, Mc[20]);
	Mc[11] = fmaf(T(-4.2857142857142860e-01), Mb_4_1_110, Mc[11]);
	Mc[8] = fmaf(T(-2.0000000000000001e-01), Mb_3_1_100, Mc[8]);
	Mc[32] = fmaf(T(-3.3333333333333337e-01), Mb_5_1_111, Mc[32]);
	Mc[29] = fmaf(T(-1.4285714285714288e-01), Mb_4_1_101, Mc[29]);
	Mc[17] = fmaf(T(-1.1111111111111112e-01), Mb_5_1_300, Mc[17]);
	Mc[13] = fmaf(T(-4.2857142857142860e-01), Mb_4_1_110, Mc[13]);
	Mc[17] = fmaf(T(-3.3333333333333337e-01), Mb_5_1_120, Mc[17]);
	Mc[34] = fmaf(T(-3.3333333333333337e-01), Mb_5_1_111, Mc[34]);
	Mc[17] = fmaf(T(4.7619047619047623e-02), Mb_5_2_100, Mc[17]);
	Mc[19] = fmaf(T(-6.6666666666666674e-01), Mb_5_1_120, Mc[19]);
	Mc[10] = fmaf(T(-8.5714285714285721e-01), Mb_4_1_200, Mc[10]);
	Mc[19] = fmaf(T(4.7619047619047623e-02), Mb_5_2_100, Mc[19]);
	Mc[10] = fmaf(T(8.5714285714285715e-02), Mb_4_2_000, Mc[10]);
	Mc[24] = fmaf(T(-2.0000000000000001e-01), Mb_3_1_001, Mc[24]);
	Mc[31] = fmaf(T(-6.6666666666666674e-01), Mb_5_1_201, Mc[31]);
	Mc[7] = fmaf(T(-2.0000000000000001e-01), Mb_3_1_010, Mc[7]);
	Mc[31] = fmaf(T(4.7619047619047623e-02), Mb_5_2_001, Mc[31]);
	Mc[28] = fmaf(T(-1.4285714285714288e-01), Mb_4_1_011, Mc[28]);
	Mc[16] = fmaf(T(-6.6666666666666674e-01), Mb_5_1_210, Mc[16]);
	Mc[12] = fmaf(T(-1.4285714285714288e-01), Mb_4_1_200, Mc[12]);
	Mc[16] = fmaf(T(4.7619047619047623e-02), Mb_5_2_010, Mc[16]);
	Mc[12] = fmaf(T(-1.4285714285714288e-01), Mb_4_1_020, Mc[12]);
	Mc[15] = fmaf(T(-1.1111111111111112e+00), Mb_5_1_300, Mc[15]);
	Mc[12] = fmaf(T(2.8571428571428574e-02), Mb_4_2_000, Mc[12]);
	Mc[15] = fmaf(T(2.3809523809523811e-01), Mb_5_2_100, Mc[15]);
	return Mc;
/* FLOPS = 1209*/
}
template<class T>
CUDA_EXPORT
#ifdef __CUDACC__
__noinline__
#endif
tensor_trless_sym<T, 6> L2L(const tensor_trless_sym<T, 6>& La, array<T,NDIM> X, bool do_phi) {
	X[0] *= T(SCALE_FACTOR);
	X[1] *= T(SCALE_FACTOR);
	X[2] *= T(SCALE_FACTOR);
	tensor_trless_sym<T, 6> Lb;
	T x[56];
	x[0] = T(1);
	x[1] = X[0];
	x[2] = X[1];
	x[3] = X[2];
	x[9] = x[3] * x[3]; // 0 0 2 | 0 0 1 | 0 0 1
	x[8] = x[2] * x[3]; // 0 1 1 | 0 0 1 | 0 1 0
	x[7] = x[2] * x[2]; // 0 2 0 | 0 1 0 | 0 1 0
	x[6] = x[1] * x[3]; // 1 0 1 | 0 0 1 | 1 0 0
	x[5] = x[1] * x[2]; // 1 1 0 | 0 1 0 | 1 0 0
	x[4] = x[1] * x[1]; // 2 0 0 | 1 0 0 | 1 0 0
	x[19] = x[9] * x[3]; // 0 0 3 | 0 0 1 | 0 0 2
	x[18] = x[8] * x[3]; // 0 1 2 | 0 0 1 | 0 1 1
	x[17] = x[8] * x[2]; // 0 2 1 | 0 1 0 | 0 1 1
	x[16] = x[7] * x[2]; // 0 3 0 | 0 1 0 | 0 2 0
	x[15] = x[6] * x[3]; // 1 0 2 | 0 0 1 | 1 0 1
	x[14] = x[5] * x[3]; // 1 1 1 | 0 0 1 | 1 1 0
	x[13] = x[5] * x[2]; // 1 2 0 | 0 1 0 | 1 1 0
	x[12] = x[6] * x[1]; // 2 0 1 | 1 0 0 | 1 0 1
	x[11] = x[5] * x[1]; // 2 1 0 | 1 0 0 | 1 1 0
	x[10] = x[4] * x[1]; // 3 0 0 | 1 0 0 | 2 0 0
	x[34] = x[9] * x[9]; // 0 0 4 | 0 0 2 | 0 0 2
	x[33] = x[8] * x[9]; // 0 1 3 | 0 0 2 | 0 1 1
	x[32] = x[8] * x[8]; // 0 2 2 | 0 1 1 | 0 1 1
	x[31] = x[8] * x[7]; // 0 3 1 | 0 2 0 | 0 1 1
	x[30] = x[7] * x[7]; // 0 4 0 | 0 2 0 | 0 2 0
	x[29] = x[6] * x[9]; // 1 0 3 | 0 0 2 | 1 0 1
	x[28] = x[5] * x[9]; // 1 1 2 | 0 0 2 | 1 1 0
	x[27] = x[5] * x[8]; // 1 2 1 | 0 1 1 | 1 1 0
	x[26] = x[5] * x[7]; // 1 3 0 | 0 2 0 | 1 1 0
	x[25] = x[6] * x[6]; // 2 0 2 | 1 0 1 | 1 0 1
	x[24] = x[5] * x[6]; // 2 1 1 | 1 0 1 | 1 1 0
	x[23] = x[5] * x[5]; // 2 2 0 | 1 1 0 | 1 1 0
	x[22] = x[6] * x[4]; // 3 0 1 | 2 0 0 | 1 0 1
	x[21] = x[5] * x[4]; // 3 1 0 | 2 0 0 | 1 1 0
	x[20] = x[4] * x[4]; // 4 0 0 | 2 0 0 | 2 0 0
	x[55] = x[19] * x[9]; // 0 0 5 | 0 0 2 | 0 0 3
	x[54] = x[18] * x[9]; // 0 1 4 | 0 0 2 | 0 1 2
	x[53] = x[17] * x[9]; // 0 2 3 | 0 0 2 | 0 2 1
	x[52] = x[17] * x[8]; // 0 3 2 | 0 1 1 | 0 2 1
	x[51] = x[17] * x[7]; // 0 4 1 | 0 2 0 | 0 2 1
	x[50] = x[16] * x[7]; // 0 5 0 | 0 2 0 | 0 3 0
	x[49] = x[15] * x[9]; // 1 0 4 | 0 0 2 | 1 0 2
	x[48] = x[14] * x[9]; // 1 1 3 | 0 0 2 | 1 1 1
	x[47] = x[14] * x[8]; // 1 2 2 | 0 1 1 | 1 1 1
	x[46] = x[14] * x[7]; // 1 3 1 | 0 2 0 | 1 1 1
	x[45] = x[13] * x[7]; // 1 4 0 | 0 2 0 | 1 2 0
	x[44] = x[12] * x[9]; // 2 0 3 | 0 0 2 | 2 0 1
	x[43] = x[14] * x[6]; // 2 1 2 | 1 0 1 | 1 1 1
	x[42] = x[14] * x[5]; // 2 2 1 | 1 1 0 | 1 1 1
	x[41] = x[11] * x[7]; // 2 3 0 | 0 2 0 | 2 1 0
	x[40] = x[12] * x[6]; // 3 0 2 | 1 0 1 | 2 0 1
	x[39] = x[14] * x[4]; // 3 1 1 | 2 0 0 | 1 1 1
	x[38] = x[11] * x[5]; // 3 2 0 | 1 1 0 | 2 1 0
	x[37] = x[12] * x[4]; // 4 0 1 | 2 0 0 | 2 0 1
	x[36] = x[11] * x[4]; // 4 1 0 | 2 0 0 | 2 1 0
	x[35] = x[10] * x[4]; // 5 0 0 | 2 0 0 | 3 0 0
	const T La000 =  (La[0]);
	const T La001 =  (La[21]);
	const T La002 =  (La[36]);
	const T La003 = -(La[24]+(La[26]));
	const T La004 =  (La[10]+fmaf(T(2),La[12],(La[14])));
	const T La005 =  (La[31]+fmaf(T(2),La[33],(La[35])));
	const T La010 =  (La[2]);
	const T La011 =  (La[23]);
	const T La012 = -(La[7]+(La[9]));
	const T La013 = -(La[28]+(La[30]));
	const T La014 =  (La[16]+fmaf(T(2),La[18],(La[20])));
	const T La020 =  (La[5]);
	const T La021 =  (La[26]);
	const T La022 = -(La[12]+(La[14]));
	const T La023 = -(La[33]+(La[35]));
	const T La030 =  (La[9]);
	const T La031 =  (La[30]);
	const T La032 = -(La[18]+(La[20]));
	const T La040 =  (La[14]);
	const T La041 =  (La[35]);
	const T La050 =  (La[20]);
	const T La100 =  (La[1]);
	const T La101 =  (La[22]);
	const T La102 = -(La[6]+(La[8]));
	const T La103 = -(La[27]+(La[29]));
	const T La104 =  (La[15]+fmaf(T(2),La[17],(La[19])));
	const T La110 =  (La[4]);
	const T La111 =  (La[25]);
	const T La112 = -(La[11]+(La[13]));
	const T La113 = -(La[32]+(La[34]));
	const T La120 =  (La[8]);
	const T La121 =  (La[29]);
	const T La122 = -(La[17]+(La[19]));
	const T La130 =  (La[13]);
	const T La131 =  (La[34]);
	const T La140 =  (La[19]);
	const T La200 =  (La[3]);
	const T La201 =  (La[24]);
	const T La202 = -(La[10]+(La[12]));
	const T La203 = -(La[31]+(La[33]));
	const T La210 =  (La[7]);
	const T La211 =  (La[28]);
	const T La212 = -(La[16]+(La[18]));
	const T La220 =  (La[12]);
	const T La221 =  (La[33]);
	const T La230 =  (La[18]);
	const T La300 =  (La[6]);
	const T La301 =  (La[27]);
	const T La302 = -(La[15]+(La[17]));
	const T La310 =  (La[11]);
	const T La311 =  (La[32]);
	const T La320 =  (La[17]);
	const T La400 =  (La[10]);
	const T La401 =  (La[31]);
	const T La410 =  (La[16]);
	const T La500 =  (La[15]);
	Lb = La;
	if( do_phi ) {
		Lb[0] *= T(1.2000000000000000e+02);
		Lb[0] = fmaf( x[35], La500, Lb[0]);
		Lb[0] = fmaf( x[50], La050, Lb[0]);
		Lb[0] = fmaf( x[55], La005, Lb[0]);
		Lb[0] *= T(2.0000000000000001e-01);
		Lb[0] = fmaf( x[36], La410, Lb[0]);
		Lb[0] = fmaf( x[37], La401, Lb[0]);
		Lb[0] = fmaf( x[20], La400, Lb[0]);
		Lb[0] = fmaf( x[45], La140, Lb[0]);
		Lb[0] = fmaf( x[54], La014, Lb[0]);
		Lb[0] = fmaf( x[49], La104, Lb[0]);
		Lb[0] = fmaf( x[34], La004, Lb[0]);
		Lb[0] = fmaf( x[51], La041, Lb[0]);
		Lb[0] = fmaf( x[30], La040, Lb[0]);
		Lb[0] *= T(5.0000000000000000e-01);
		Lb[0] = fmaf( x[40], La302, Lb[0]);
		Lb[0] = fmaf( x[44], La203, Lb[0]);
		Lb[0] = fmaf( x[41], La230, Lb[0]);
		Lb[0] = fmaf( x[52], La032, Lb[0]);
		Lb[0] = fmaf( x[53], La023, Lb[0]);
		Lb[0] = fmaf( x[38], La320, Lb[0]);
		Lb[0] *= T(5.0000000000000000e-01);
		Lb[0] = fmaf( x[16], La030, Lb[0]);
		Lb[0] = fmaf( x[19], La003, Lb[0]);
		Lb[0] = fmaf( x[33], La013, Lb[0]);
		Lb[0] = fmaf( x[46], La131, Lb[0]);
		Lb[0] = fmaf( x[26], La130, Lb[0]);
		Lb[0] = fmaf( x[48], La113, Lb[0]);
		Lb[0] = fmaf( x[10], La300, Lb[0]);
		Lb[0] = fmaf( x[39], La311, Lb[0]);
		Lb[0] = fmaf( x[29], La103, Lb[0]);
		Lb[0] = fmaf( x[22], La301, Lb[0]);
		Lb[0] = fmaf( x[21], La310, Lb[0]);
		Lb[0] = fmaf( x[31], La031, Lb[0]);
		Lb[0] *= T(6.6666666666666663e-01);
		Lb[0] = fmaf( x[42], La221, Lb[0]);
		Lb[0] = fmaf( x[23], La220, Lb[0]);
		Lb[0] = fmaf( x[43], La212, Lb[0]);
		Lb[0] = fmaf( x[47], La122, Lb[0]);
		Lb[0] = fmaf( x[32], La022, Lb[0]);
		Lb[0] = fmaf( x[25], La202, Lb[0]);
		Lb[0] *= T(5.0000000000000000e-01);
		Lb[0] = fmaf( x[28], La112, Lb[0]);
		Lb[0] = fmaf( x[24], La211, Lb[0]);
		Lb[0] = fmaf( x[11], La210, Lb[0]);
		Lb[0] = fmaf( x[12], La201, Lb[0]);
		Lb[0] = fmaf( x[4], La200, Lb[0]);
		Lb[0] = fmaf( x[27], La121, Lb[0]);
		Lb[0] = fmaf( x[13], La120, Lb[0]);
		Lb[0] = fmaf( x[15], La102, Lb[0]);
		Lb[0] = fmaf( x[17], La021, Lb[0]);
		Lb[0] = fmaf( x[7], La020, Lb[0]);
		Lb[0] = fmaf( x[18], La012, Lb[0]);
		Lb[0] = fmaf( x[9], La002, Lb[0]);
		Lb[0] *= T(5.0000000000000000e-01);
		Lb[0] = fmaf( x[3], La001, Lb[0]);
		Lb[0] = fmaf( x[14], La111, Lb[0]);
		Lb[0] = fmaf( x[5], La110, Lb[0]);
		Lb[0] = fmaf( x[6], La101, Lb[0]);
		Lb[0] = fmaf( x[1], La100, Lb[0]);
		Lb[0] = fmaf( x[8], La011, Lb[0]);
		Lb[0] = fmaf( x[2], La010, Lb[0]);
	}
	Lb[1] *= T(2.4000000000000000e+01);
	Lb[1] = fmaf( x[20], La500, Lb[1]);
	Lb[1] = fmaf( x[34], La104, Lb[1]);
	Lb[1] = fmaf( x[30], La140, Lb[1]);
	Lb[1] *= T(2.5000000000000000e-01);
	Lb[1] = fmaf( x[29], La203, Lb[1]);
	Lb[1] = fmaf( x[21], La410, Lb[1]);
	Lb[1] = fmaf( x[22], La401, Lb[1]);
	Lb[1] = fmaf( x[10], La400, Lb[1]);
	Lb[1] = fmaf( x[26], La230, Lb[1]);
	Lb[1] = fmaf( x[31], La131, Lb[1]);
	Lb[1] = fmaf( x[16], La130, Lb[1]);
	Lb[1] = fmaf( x[19], La103, Lb[1]);
	Lb[1] = fmaf( x[33], La113, Lb[1]);
	Lb[1] *= T(6.6666666666666663e-01);
	Lb[1] = fmaf( x[23], La320, Lb[1]);
	Lb[1] = fmaf( x[25], La302, Lb[1]);
	Lb[1] = fmaf( x[32], La122, Lb[1]);
	Lb[1] *= T(5.0000000000000000e-01);
	Lb[1] = fmaf( x[27], La221, Lb[1]);
	Lb[1] = fmaf( x[9], La102, Lb[1]);
	Lb[1] = fmaf( x[24], La311, Lb[1]);
	Lb[1] = fmaf( x[11], La310, Lb[1]);
	Lb[1] = fmaf( x[12], La301, Lb[1]);
	Lb[1] = fmaf( x[4], La300, Lb[1]);
	Lb[1] = fmaf( x[18], La112, Lb[1]);
	Lb[1] = fmaf( x[13], La220, Lb[1]);
	Lb[1] = fmaf( x[28], La212, Lb[1]);
	Lb[1] = fmaf( x[15], La202, Lb[1]);
	Lb[1] = fmaf( x[7], La120, Lb[1]);
	Lb[1] = fmaf( x[17], La121, Lb[1]);
	Lb[1] *= T(5.0000000000000000e-01);
	Lb[1] = fmaf( x[14], La211, Lb[1]);
	Lb[1] = fmaf( x[5], La210, Lb[1]);
	Lb[1] = fmaf( x[3], La101, Lb[1]);
	Lb[1] = fmaf( x[6], La201, Lb[1]);
	Lb[1] = fmaf( x[1], La200, Lb[1]);
	Lb[1] = fmaf( x[8], La111, Lb[1]);
	Lb[1] = fmaf( x[2], La110, Lb[1]);
	Lb[2] *= T(2.4000000000000000e+01);
	Lb[2] = fmaf( x[20], La410, Lb[2]);
	Lb[2] = fmaf( x[34], La014, Lb[2]);
	Lb[2] = fmaf( x[30], La050, Lb[2]);
	Lb[2] *= T(2.5000000000000000e-01);
	Lb[2] = fmaf( x[29], La113, Lb[2]);
	Lb[2] = fmaf( x[21], La320, Lb[2]);
	Lb[2] = fmaf( x[22], La311, Lb[2]);
	Lb[2] = fmaf( x[10], La310, Lb[2]);
	Lb[2] = fmaf( x[26], La140, Lb[2]);
	Lb[2] = fmaf( x[31], La041, Lb[2]);
	Lb[2] = fmaf( x[16], La040, Lb[2]);
	Lb[2] = fmaf( x[19], La013, Lb[2]);
	Lb[2] = fmaf( x[33], La023, Lb[2]);
	Lb[2] *= T(6.6666666666666663e-01);
	Lb[2] = fmaf( x[23], La230, Lb[2]);
	Lb[2] = fmaf( x[25], La212, Lb[2]);
	Lb[2] = fmaf( x[32], La032, Lb[2]);
	Lb[2] *= T(5.0000000000000000e-01);
	Lb[2] = fmaf( x[27], La131, Lb[2]);
	Lb[2] = fmaf( x[9], La012, Lb[2]);
	Lb[2] = fmaf( x[24], La221, Lb[2]);
	Lb[2] = fmaf( x[11], La220, Lb[2]);
	Lb[2] = fmaf( x[12], La211, Lb[2]);
	Lb[2] = fmaf( x[4], La210, Lb[2]);
	Lb[2] = fmaf( x[18], La022, Lb[2]);
	Lb[2] = fmaf( x[13], La130, Lb[2]);
	Lb[2] = fmaf( x[28], La122, Lb[2]);
	Lb[2] = fmaf( x[15], La112, Lb[2]);
	Lb[2] = fmaf( x[7], La030, Lb[2]);
	Lb[2] = fmaf( x[17], La031, Lb[2]);
	Lb[2] *= T(5.0000000000000000e-01);
	Lb[2] = fmaf( x[14], La121, Lb[2]);
	Lb[2] = fmaf( x[5], La120, Lb[2]);
	Lb[2] = fmaf( x[3], La011, Lb[2]);
	Lb[2] = fmaf( x[6], La111, Lb[2]);
	Lb[2] = fmaf( x[1], La110, Lb[2]);
	Lb[2] = fmaf( x[8], La021, Lb[2]);
	Lb[2] = fmaf( x[2], La020, Lb[2]);
	Lb[3] *= T(6.0000000000000000e+00);
	Lb[3] = fmaf( x[10], La500, Lb[3]);
	Lb[3] = fmaf( x[19], La203, Lb[3]);
	Lb[3] = fmaf( x[16], La230, Lb[3]);
	Lb[3] *= T(3.3333333333333331e-01);
	Lb[3] = fmaf( x[9], La202, Lb[3]);
	Lb[3] = fmaf( x[11], La410, Lb[3]);
	Lb[3] = fmaf( x[12], La401, Lb[3]);
	Lb[3] = fmaf( x[4], La400, Lb[3]);
	Lb[3] = fmaf( x[13], La320, Lb[3]);
	Lb[3] = fmaf( x[15], La302, Lb[3]);
	Lb[3] = fmaf( x[17], La221, Lb[3]);
	Lb[3] = fmaf( x[7], La220, Lb[3]);
	Lb[3] = fmaf( x[18], La212, Lb[3]);
	Lb[3] *= T(5.0000000000000000e-01);
	Lb[3] = fmaf( x[1], La300, Lb[3]);
	Lb[3] = fmaf( x[6], La301, Lb[3]);
	Lb[3] = fmaf( x[5], La310, Lb[3]);
	Lb[3] = fmaf( x[14], La311, Lb[3]);
	Lb[3] = fmaf( x[8], La211, Lb[3]);
	Lb[3] = fmaf( x[2], La210, Lb[3]);
	Lb[3] = fmaf( x[3], La201, Lb[3]);
	Lb[4] *= T(6.0000000000000000e+00);
	Lb[4] = fmaf( x[10], La410, Lb[4]);
	Lb[4] = fmaf( x[19], La113, Lb[4]);
	Lb[4] = fmaf( x[16], La140, Lb[4]);
	Lb[4] *= T(3.3333333333333331e-01);
	Lb[4] = fmaf( x[9], La112, Lb[4]);
	Lb[4] = fmaf( x[11], La320, Lb[4]);
	Lb[4] = fmaf( x[12], La311, Lb[4]);
	Lb[4] = fmaf( x[4], La310, Lb[4]);
	Lb[4] = fmaf( x[13], La230, Lb[4]);
	Lb[4] = fmaf( x[15], La212, Lb[4]);
	Lb[4] = fmaf( x[17], La131, Lb[4]);
	Lb[4] = fmaf( x[7], La130, Lb[4]);
	Lb[4] = fmaf( x[18], La122, Lb[4]);
	Lb[4] *= T(5.0000000000000000e-01);
	Lb[4] = fmaf( x[1], La210, Lb[4]);
	Lb[4] = fmaf( x[6], La211, Lb[4]);
	Lb[4] = fmaf( x[5], La220, Lb[4]);
	Lb[4] = fmaf( x[14], La221, Lb[4]);
	Lb[4] = fmaf( x[8], La121, Lb[4]);
	Lb[4] = fmaf( x[2], La120, Lb[4]);
	Lb[4] = fmaf( x[3], La111, Lb[4]);
	Lb[5] *= T(6.0000000000000000e+00);
	Lb[5] = fmaf( x[10], La320, Lb[5]);
	Lb[5] = fmaf( x[19], La023, Lb[5]);
	Lb[5] = fmaf( x[16], La050, Lb[5]);
	Lb[5] *= T(3.3333333333333331e-01);
	Lb[5] = fmaf( x[9], La022, Lb[5]);
	Lb[5] = fmaf( x[11], La230, Lb[5]);
	Lb[5] = fmaf( x[12], La221, Lb[5]);
	Lb[5] = fmaf( x[4], La220, Lb[5]);
	Lb[5] = fmaf( x[13], La140, Lb[5]);
	Lb[5] = fmaf( x[15], La122, Lb[5]);
	Lb[5] = fmaf( x[17], La041, Lb[5]);
	Lb[5] = fmaf( x[7], La040, Lb[5]);
	Lb[5] = fmaf( x[18], La032, Lb[5]);
	Lb[5] *= T(5.0000000000000000e-01);
	Lb[5] = fmaf( x[1], La120, Lb[5]);
	Lb[5] = fmaf( x[6], La121, Lb[5]);
	Lb[5] = fmaf( x[5], La130, Lb[5]);
	Lb[5] = fmaf( x[14], La131, Lb[5]);
	Lb[5] = fmaf( x[8], La031, Lb[5]);
	Lb[5] = fmaf( x[2], La030, Lb[5]);
	Lb[5] = fmaf( x[3], La021, Lb[5]);
	Lb[6] *= T(2.0000000000000000e+00);
	Lb[6] = fmaf( x[9], La302, Lb[6]);
	Lb[6] = fmaf( x[7], La320, Lb[6]);
	Lb[6] = fmaf( x[4], La500, Lb[6]);
	Lb[6] *= T(5.0000000000000000e-01);
	Lb[6] = fmaf( x[3], La301, Lb[6]);
	Lb[6] = fmaf( x[2], La310, Lb[6]);
	Lb[6] = fmaf( x[8], La311, Lb[6]);
	Lb[6] = fmaf( x[1], La400, Lb[6]);
	Lb[6] = fmaf( x[6], La401, Lb[6]);
	Lb[6] = fmaf( x[5], La410, Lb[6]);
	Lb[7] *= T(2.0000000000000000e+00);
	Lb[7] = fmaf( x[9], La212, Lb[7]);
	Lb[7] = fmaf( x[7], La230, Lb[7]);
	Lb[7] = fmaf( x[4], La410, Lb[7]);
	Lb[7] *= T(5.0000000000000000e-01);
	Lb[7] = fmaf( x[3], La211, Lb[7]);
	Lb[7] = fmaf( x[2], La220, Lb[7]);
	Lb[7] = fmaf( x[8], La221, Lb[7]);
	Lb[7] = fmaf( x[1], La310, Lb[7]);
	Lb[7] = fmaf( x[6], La311, Lb[7]);
	Lb[7] = fmaf( x[5], La320, Lb[7]);
	Lb[8] *= T(2.0000000000000000e+00);
	Lb[8] = fmaf( x[9], La122, Lb[8]);
	Lb[8] = fmaf( x[7], La140, Lb[8]);
	Lb[8] = fmaf( x[4], La320, Lb[8]);
	Lb[8] *= T(5.0000000000000000e-01);
	Lb[8] = fmaf( x[3], La121, Lb[8]);
	Lb[8] = fmaf( x[2], La130, Lb[8]);
	Lb[8] = fmaf( x[8], La131, Lb[8]);
	Lb[8] = fmaf( x[1], La220, Lb[8]);
	Lb[8] = fmaf( x[6], La221, Lb[8]);
	Lb[8] = fmaf( x[5], La230, Lb[8]);
	Lb[9] *= T(2.0000000000000000e+00);
	Lb[9] = fmaf( x[9], La032, Lb[9]);
	Lb[9] = fmaf( x[7], La050, Lb[9]);
	Lb[9] = fmaf( x[4], La230, Lb[9]);
	Lb[9] *= T(5.0000000000000000e-01);
	Lb[9] = fmaf( x[3], La031, Lb[9]);
	Lb[9] = fmaf( x[2], La040, Lb[9]);
	Lb[9] = fmaf( x[8], La041, Lb[9]);
	Lb[9] = fmaf( x[1], La130, Lb[9]);
	Lb[9] = fmaf( x[6], La131, Lb[9]);
	Lb[9] = fmaf( x[5], La140, Lb[9]);
	Lb[10] = fmaf( x[3], La401, Lb[10]);
	Lb[10] = fmaf( x[2], La410, Lb[10]);
	Lb[10] = fmaf( x[1], La500, Lb[10]);
	Lb[11] = fmaf( x[3], La311, Lb[11]);
	Lb[11] = fmaf( x[2], La320, Lb[11]);
	Lb[11] = fmaf( x[1], La410, Lb[11]);
	Lb[12] = fmaf( x[3], La221, Lb[12]);
	Lb[12] = fmaf( x[2], La230, Lb[12]);
	Lb[12] = fmaf( x[1], La320, Lb[12]);
	Lb[13] = fmaf( x[3], La131, Lb[13]);
	Lb[13] = fmaf( x[2], La140, Lb[13]);
	Lb[13] = fmaf( x[1], La230, Lb[13]);
	Lb[14] = fmaf( x[3], La041, Lb[14]);
	Lb[14] = fmaf( x[2], La050, Lb[14]);
	Lb[14] = fmaf( x[1], La140, Lb[14]);
	Lb[21] *= T(2.4000000000000000e+01);
	Lb[21] = fmaf( x[20], La401, Lb[21]);
	Lb[21] = fmaf( x[34], La005, Lb[21]);
	Lb[21] = fmaf( x[30], La041, Lb[21]);
	Lb[21] *= T(2.5000000000000000e-01);
	Lb[21] = fmaf( x[29], La104, Lb[21]);
	Lb[21] = fmaf( x[21], La311, Lb[21]);
	Lb[21] = fmaf( x[22], La302, Lb[21]);
	Lb[21] = fmaf( x[10], La301, Lb[21]);
	Lb[21] = fmaf( x[26], La131, Lb[21]);
	Lb[21] = fmaf( x[31], La032, Lb[21]);
	Lb[21] = fmaf( x[16], La031, Lb[21]);
	Lb[21] = fmaf( x[19], La004, Lb[21]);
	Lb[21] = fmaf( x[33], La014, Lb[21]);
	Lb[21] *= T(6.6666666666666663e-01);
	Lb[21] = fmaf( x[23], La221, Lb[21]);
	Lb[21] = fmaf( x[25], La203, Lb[21]);
	Lb[21] = fmaf( x[32], La023, Lb[21]);
	Lb[21] *= T(5.0000000000000000e-01);
	Lb[21] = fmaf( x[27], La122, Lb[21]);
	Lb[21] = fmaf( x[9], La003, Lb[21]);
	Lb[21] = fmaf( x[24], La212, Lb[21]);
	Lb[21] = fmaf( x[11], La211, Lb[21]);
	Lb[21] = fmaf( x[12], La202, Lb[21]);
	Lb[21] = fmaf( x[4], La201, Lb[21]);
	Lb[21] = fmaf( x[18], La013, Lb[21]);
	Lb[21] = fmaf( x[13], La121, Lb[21]);
	Lb[21] = fmaf( x[28], La113, Lb[21]);
	Lb[21] = fmaf( x[15], La103, Lb[21]);
	Lb[21] = fmaf( x[7], La021, Lb[21]);
	Lb[21] = fmaf( x[17], La022, Lb[21]);
	Lb[21] *= T(5.0000000000000000e-01);
	Lb[21] = fmaf( x[14], La112, Lb[21]);
	Lb[21] = fmaf( x[5], La111, Lb[21]);
	Lb[21] = fmaf( x[3], La002, Lb[21]);
	Lb[21] = fmaf( x[6], La102, Lb[21]);
	Lb[21] = fmaf( x[1], La101, Lb[21]);
	Lb[21] = fmaf( x[8], La012, Lb[21]);
	Lb[21] = fmaf( x[2], La011, Lb[21]);
	Lb[22] *= T(6.0000000000000000e+00);
	Lb[22] = fmaf( x[10], La401, Lb[22]);
	Lb[22] = fmaf( x[19], La104, Lb[22]);
	Lb[22] = fmaf( x[16], La131, Lb[22]);
	Lb[22] *= T(3.3333333333333331e-01);
	Lb[22] = fmaf( x[9], La103, Lb[22]);
	Lb[22] = fmaf( x[11], La311, Lb[22]);
	Lb[22] = fmaf( x[12], La302, Lb[22]);
	Lb[22] = fmaf( x[4], La301, Lb[22]);
	Lb[22] = fmaf( x[13], La221, Lb[22]);
	Lb[22] = fmaf( x[15], La203, Lb[22]);
	Lb[22] = fmaf( x[17], La122, Lb[22]);
	Lb[22] = fmaf( x[7], La121, Lb[22]);
	Lb[22] = fmaf( x[18], La113, Lb[22]);
	Lb[22] *= T(5.0000000000000000e-01);
	Lb[22] = fmaf( x[1], La201, Lb[22]);
	Lb[22] = fmaf( x[6], La202, Lb[22]);
	Lb[22] = fmaf( x[5], La211, Lb[22]);
	Lb[22] = fmaf( x[14], La212, Lb[22]);
	Lb[22] = fmaf( x[8], La112, Lb[22]);
	Lb[22] = fmaf( x[2], La111, Lb[22]);
	Lb[22] = fmaf( x[3], La102, Lb[22]);
	Lb[23] *= T(6.0000000000000000e+00);
	Lb[23] = fmaf( x[10], La311, Lb[23]);
	Lb[23] = fmaf( x[19], La014, Lb[23]);
	Lb[23] = fmaf( x[16], La041, Lb[23]);
	Lb[23] *= T(3.3333333333333331e-01);
	Lb[23] = fmaf( x[9], La013, Lb[23]);
	Lb[23] = fmaf( x[11], La221, Lb[23]);
	Lb[23] = fmaf( x[12], La212, Lb[23]);
	Lb[23] = fmaf( x[4], La211, Lb[23]);
	Lb[23] = fmaf( x[13], La131, Lb[23]);
	Lb[23] = fmaf( x[15], La113, Lb[23]);
	Lb[23] = fmaf( x[17], La032, Lb[23]);
	Lb[23] = fmaf( x[7], La031, Lb[23]);
	Lb[23] = fmaf( x[18], La023, Lb[23]);
	Lb[23] *= T(5.0000000000000000e-01);
	Lb[23] = fmaf( x[1], La111, Lb[23]);
	Lb[23] = fmaf( x[6], La112, Lb[23]);
	Lb[23] = fmaf( x[5], La121, Lb[23]);
	Lb[23] = fmaf( x[14], La122, Lb[23]);
	Lb[23] = fmaf( x[8], La022, Lb[23]);
	Lb[23] = fmaf( x[2], La021, Lb[23]);
	Lb[23] = fmaf( x[3], La012, Lb[23]);
	Lb[24] *= T(2.0000000000000000e+00);
	Lb[24] = fmaf( x[9], La203, Lb[24]);
	Lb[24] = fmaf( x[7], La221, Lb[24]);
	Lb[24] = fmaf( x[4], La401, Lb[24]);
	Lb[24] *= T(5.0000000000000000e-01);
	Lb[24] = fmaf( x[3], La202, Lb[24]);
	Lb[24] = fmaf( x[2], La211, Lb[24]);
	Lb[24] = fmaf( x[8], La212, Lb[24]);
	Lb[24] = fmaf( x[1], La301, Lb[24]);
	Lb[24] = fmaf( x[6], La302, Lb[24]);
	Lb[24] = fmaf( x[5], La311, Lb[24]);
	Lb[25] *= T(2.0000000000000000e+00);
	Lb[25] = fmaf( x[9], La113, Lb[25]);
	Lb[25] = fmaf( x[7], La131, Lb[25]);
	Lb[25] = fmaf( x[4], La311, Lb[25]);
	Lb[25] *= T(5.0000000000000000e-01);
	Lb[25] = fmaf( x[3], La112, Lb[25]);
	Lb[25] = fmaf( x[2], La121, Lb[25]);
	Lb[25] = fmaf( x[8], La122, Lb[25]);
	Lb[25] = fmaf( x[1], La211, Lb[25]);
	Lb[25] = fmaf( x[6], La212, Lb[25]);
	Lb[25] = fmaf( x[5], La221, Lb[25]);
	Lb[26] *= T(2.0000000000000000e+00);
	Lb[26] = fmaf( x[9], La023, Lb[26]);
	Lb[26] = fmaf( x[7], La041, Lb[26]);
	Lb[26] = fmaf( x[4], La221, Lb[26]);
	Lb[26] *= T(5.0000000000000000e-01);
	Lb[26] = fmaf( x[3], La022, Lb[26]);
	Lb[26] = fmaf( x[2], La031, Lb[26]);
	Lb[26] = fmaf( x[8], La032, Lb[26]);
	Lb[26] = fmaf( x[1], La121, Lb[26]);
	Lb[26] = fmaf( x[6], La122, Lb[26]);
	Lb[26] = fmaf( x[5], La131, Lb[26]);
	Lb[27] = fmaf( x[3], La302, Lb[27]);
	Lb[27] = fmaf( x[2], La311, Lb[27]);
	Lb[27] = fmaf( x[1], La401, Lb[27]);
	Lb[28] = fmaf( x[3], La212, Lb[28]);
	Lb[28] = fmaf( x[2], La221, Lb[28]);
	Lb[28] = fmaf( x[1], La311, Lb[28]);
	Lb[29] = fmaf( x[3], La122, Lb[29]);
	Lb[29] = fmaf( x[2], La131, Lb[29]);
	Lb[29] = fmaf( x[1], La221, Lb[29]);
	Lb[30] = fmaf( x[3], La032, Lb[30]);
	Lb[30] = fmaf( x[2], La041, Lb[30]);
	Lb[30] = fmaf( x[1], La131, Lb[30]);
	Lb[36] *= T(6.0000000000000000e+00);
	Lb[36] = fmaf( x[10], La302, Lb[36]);
	Lb[36] = fmaf( x[19], La005, Lb[36]);
	Lb[36] = fmaf( x[16], La032, Lb[36]);
	Lb[36] *= T(3.3333333333333331e-01);
	Lb[36] = fmaf( x[9], La004, Lb[36]);
	Lb[36] = fmaf( x[11], La212, Lb[36]);
	Lb[36] = fmaf( x[12], La203, Lb[36]);
	Lb[36] = fmaf( x[4], La202, Lb[36]);
	Lb[36] = fmaf( x[13], La122, Lb[36]);
	Lb[36] = fmaf( x[15], La104, Lb[36]);
	Lb[36] = fmaf( x[17], La023, Lb[36]);
	Lb[36] = fmaf( x[7], La022, Lb[36]);
	Lb[36] = fmaf( x[18], La014, Lb[36]);
	Lb[36] *= T(5.0000000000000000e-01);
	Lb[36] = fmaf( x[1], La102, Lb[36]);
	Lb[36] = fmaf( x[6], La103, Lb[36]);
	Lb[36] = fmaf( x[5], La112, Lb[36]);
	Lb[36] = fmaf( x[14], La113, Lb[36]);
	Lb[36] = fmaf( x[8], La013, Lb[36]);
	Lb[36] = fmaf( x[2], La012, Lb[36]);
	Lb[36] = fmaf( x[3], La003, Lb[36]);
	return Lb;
/* FLOPS = 771 + do_phi * 118*/
}
template<class T>
CUDA_EXPORT
#ifdef __CUDACC__
__noinline__
#endif
tensor_trless_sym<T, 2> L2P(const tensor_trless_sym<T, 6>& La, array<T,NDIM> X, bool do_phi) {
	X[0] *= T(SCALE_FACTOR);
	X[1] *= T(SCALE_FACTOR);
	X[2] *= T(SCALE_FACTOR);
	tensor_trless_sym<T, 2> Lb;
	T x[56];
	x[0] = T(1);
	x[1] = X[0];
	x[2] = X[1];
	x[3] = X[2];
	x[9] = x[3] * x[3]; // 0 0 2 | 0 0 1 | 0 0 1
	x[8] = x[2] * x[3]; // 0 1 1 | 0 0 1 | 0 1 0
	x[7] = x[2] * x[2]; // 0 2 0 | 0 1 0 | 0 1 0
	x[6] = x[1] * x[3]; // 1 0 1 | 0 0 1 | 1 0 0
	x[5] = x[1] * x[2]; // 1 1 0 | 0 1 0 | 1 0 0
	x[4] = x[1] * x[1]; // 2 0 0 | 1 0 0 | 1 0 0
	x[19] = x[9] * x[3]; // 0 0 3 | 0 0 1 | 0 0 2
	x[18] = x[8] * x[3]; // 0 1 2 | 0 0 1 | 0 1 1
	x[17] = x[8] * x[2]; // 0 2 1 | 0 1 0 | 0 1 1
	x[16] = x[7] * x[2]; // 0 3 0 | 0 1 0 | 0 2 0
	x[15] = x[6] * x[3]; // 1 0 2 | 0 0 1 | 1 0 1
	x[14] = x[5] * x[3]; // 1 1 1 | 0 0 1 | 1 1 0
	x[13] = x[5] * x[2]; // 1 2 0 | 0 1 0 | 1 1 0
	x[12] = x[6] * x[1]; // 2 0 1 | 1 0 0 | 1 0 1
	x[11] = x[5] * x[1]; // 2 1 0 | 1 0 0 | 1 1 0
	x[10] = x[4] * x[1]; // 3 0 0 | 1 0 0 | 2 0 0
	x[34] = x[9] * x[9]; // 0 0 4 | 0 0 2 | 0 0 2
	x[33] = x[8] * x[9]; // 0 1 3 | 0 0 2 | 0 1 1
	x[32] = x[8] * x[8]; // 0 2 2 | 0 1 1 | 0 1 1
	x[31] = x[8] * x[7]; // 0 3 1 | 0 2 0 | 0 1 1
	x[30] = x[7] * x[7]; // 0 4 0 | 0 2 0 | 0 2 0
	x[29] = x[6] * x[9]; // 1 0 3 | 0 0 2 | 1 0 1
	x[28] = x[5] * x[9]; // 1 1 2 | 0 0 2 | 1 1 0
	x[27] = x[5] * x[8]; // 1 2 1 | 0 1 1 | 1 1 0
	x[26] = x[5] * x[7]; // 1 3 0 | 0 2 0 | 1 1 0
	x[25] = x[6] * x[6]; // 2 0 2 | 1 0 1 | 1 0 1
	x[24] = x[5] * x[6]; // 2 1 1 | 1 0 1 | 1 1 0
	x[23] = x[5] * x[5]; // 2 2 0 | 1 1 0 | 1 1 0
	x[22] = x[6] * x[4]; // 3 0 1 | 2 0 0 | 1 0 1
	x[21] = x[5] * x[4]; // 3 1 0 | 2 0 0 | 1 1 0
	x[20] = x[4] * x[4]; // 4 0 0 | 2 0 0 | 2 0 0
	x[55] = x[19] * x[9]; // 0 0 5 | 0 0 2 | 0 0 3
	x[54] = x[18] * x[9]; // 0 1 4 | 0 0 2 | 0 1 2
	x[53] = x[17] * x[9]; // 0 2 3 | 0 0 2 | 0 2 1
	x[52] = x[17] * x[8]; // 0 3 2 | 0 1 1 | 0 2 1
	x[51] = x[17] * x[7]; // 0 4 1 | 0 2 0 | 0 2 1
	x[50] = x[16] * x[7]; // 0 5 0 | 0 2 0 | 0 3 0
	x[49] = x[15] * x[9]; // 1 0 4 | 0 0 2 | 1 0 2
	x[48] = x[14] * x[9]; // 1 1 3 | 0 0 2 | 1 1 1
	x[47] = x[14] * x[8]; // 1 2 2 | 0 1 1 | 1 1 1
	x[46] = x[14] * x[7]; // 1 3 1 | 0 2 0 | 1 1 1
	x[45] = x[13] * x[7]; // 1 4 0 | 0 2 0 | 1 2 0
	x[44] = x[12] * x[9]; // 2 0 3 | 0 0 2 | 2 0 1
	x[43] = x[14] * x[6]; // 2 1 2 | 1 0 1 | 1 1 1
	x[42] = x[14] * x[5]; // 2 2 1 | 1 1 0 | 1 1 1
	x[41] = x[11] * x[7]; // 2 3 0 | 0 2 0 | 2 1 0
	x[40] = x[12] * x[6]; // 3 0 2 | 1 0 1 | 2 0 1
	x[39] = x[14] * x[4]; // 3 1 1 | 2 0 0 | 1 1 1
	x[38] = x[11] * x[5]; // 3 2 0 | 1 1 0 | 2 1 0
	x[37] = x[12] * x[4]; // 4 0 1 | 2 0 0 | 2 0 1
	x[36] = x[11] * x[4]; // 4 1 0 | 2 0 0 | 2 1 0
	x[35] = x[10] * x[4]; // 5 0 0 | 2 0 0 | 3 0 0
	const T La000 =  (La[0]);
	const T La001 =  (La[21]);
	const T La002 =  (La[36]);
	const T La003 = -(La[24]+(La[26]));
	const T La004 =  (La[10]+fmaf(T(2),La[12],(La[14])));
	const T La005 =  (La[31]+fmaf(T(2),La[33],(La[35])));
	const T La010 =  (La[2]);
	const T La011 =  (La[23]);
	const T La012 = -(La[7]+(La[9]));
	const T La013 = -(La[28]+(La[30]));
	const T La014 =  (La[16]+fmaf(T(2),La[18],(La[20])));
	const T La020 =  (La[5]);
	const T La021 =  (La[26]);
	const T La022 = -(La[12]+(La[14]));
	const T La023 = -(La[33]+(La[35]));
	const T La030 =  (La[9]);
	const T La031 =  (La[30]);
	const T La032 = -(La[18]+(La[20]));
	const T La040 =  (La[14]);
	const T La041 =  (La[35]);
	const T La050 =  (La[20]);
	const T La100 =  (La[1]);
	const T La101 =  (La[22]);
	const T La102 = -(La[6]+(La[8]));
	const T La103 = -(La[27]+(La[29]));
	const T La104 =  (La[15]+fmaf(T(2),La[17],(La[19])));
	const T La110 =  (La[4]);
	const T La111 =  (La[25]);
	const T La112 = -(La[11]+(La[13]));
	const T La113 = -(La[32]+(La[34]));
	const T La120 =  (La[8]);
	const T La121 =  (La[29]);
	const T La122 = -(La[17]+(La[19]));
	const T La130 =  (La[13]);
	const T La131 =  (La[34]);
	const T La140 =  (La[19]);
	const T La200 =  (La[3]);
	const T La201 =  (La[24]);
	const T La202 = -(La[10]+(La[12]));
	const T La203 = -(La[31]+(La[33]));
	const T La210 =  (La[7]);
	const T La211 =  (La[28]);
	const T La212 = -(La[16]+(La[18]));
	const T La220 =  (La[12]);
	const T La221 =  (La[33]);
	const T La230 =  (La[18]);
	const T La300 =  (La[6]);
	const T La301 =  (La[27]);
	const T La302 = -(La[15]+(La[17]));
	const T La310 =  (La[11]);
	const T La311 =  (La[32]);
	const T La320 =  (La[17]);
	const T La400 =  (La[10]);
	const T La401 =  (La[31]);
	const T La410 =  (La[16]);
	const T La500 =  (La[15]);
	Lb(0,0,0) = La(0,0,0);
	Lb(1,0,0) = La(1,0,0);
	Lb(0,1,0) = La(0,1,0);
	Lb(0,0,1) = La(0,0,1);
	if( do_phi ) {
		Lb[0] *= T(1.2000000000000000e+02);
		Lb[0] = fmaf( x[35], La500, Lb[0]);
		Lb[0] = fmaf( x[50], La050, Lb[0]);
		Lb[0] = fmaf( x[55], La005, Lb[0]);
		Lb[0] *= T(2.0000000000000001e-01);
		Lb[0] = fmaf( x[36], La410, Lb[0]);
		Lb[0] = fmaf( x[37], La401, Lb[0]);
		Lb[0] = fmaf( x[20], La400, Lb[0]);
		Lb[0] = fmaf( x[45], La140, Lb[0]);
		Lb[0] = fmaf( x[54], La014, Lb[0]);
		Lb[0] = fmaf( x[49], La104, Lb[0]);
		Lb[0] = fmaf( x[34], La004, Lb[0]);
		Lb[0] = fmaf( x[51], La041, Lb[0]);
		Lb[0] = fmaf( x[30], La040, Lb[0]);
		Lb[0] *= T(5.0000000000000000e-01);
		Lb[0] = fmaf( x[40], La302, Lb[0]);
		Lb[0] = fmaf( x[44], La203, Lb[0]);
		Lb[0] = fmaf( x[41], La230, Lb[0]);
		Lb[0] = fmaf( x[52], La032, Lb[0]);
		Lb[0] = fmaf( x[53], La023, Lb[0]);
		Lb[0] = fmaf( x[38], La320, Lb[0]);
		Lb[0] *= T(5.0000000000000000e-01);
		Lb[0] = fmaf( x[16], La030, Lb[0]);
		Lb[0] = fmaf( x[19], La003, Lb[0]);
		Lb[0] = fmaf( x[33], La013, Lb[0]);
		Lb[0] = fmaf( x[46], La131, Lb[0]);
		Lb[0] = fmaf( x[26], La130, Lb[0]);
		Lb[0] = fmaf( x[48], La113, Lb[0]);
		Lb[0] = fmaf( x[10], La300, Lb[0]);
		Lb[0] = fmaf( x[39], La311, Lb[0]);
		Lb[0] = fmaf( x[29], La103, Lb[0]);
		Lb[0] = fmaf( x[22], La301, Lb[0]);
		Lb[0] = fmaf( x[21], La310, Lb[0]);
		Lb[0] = fmaf( x[31], La031, Lb[0]);
		Lb[0] *= T(6.6666666666666663e-01);
		Lb[0] = fmaf( x[42], La221, Lb[0]);
		Lb[0] = fmaf( x[23], La220, Lb[0]);
		Lb[0] = fmaf( x[43], La212, Lb[0]);
		Lb[0] = fmaf( x[47], La122, Lb[0]);
		Lb[0] = fmaf( x[32], La022, Lb[0]);
		Lb[0] = fmaf( x[25], La202, Lb[0]);
		Lb[0] *= T(5.0000000000000000e-01);
		Lb[0] = fmaf( x[28], La112, Lb[0]);
		Lb[0] = fmaf( x[24], La211, Lb[0]);
		Lb[0] = fmaf( x[11], La210, Lb[0]);
		Lb[0] = fmaf( x[12], La201, Lb[0]);
		Lb[0] = fmaf( x[4], La200, Lb[0]);
		Lb[0] = fmaf( x[27], La121, Lb[0]);
		Lb[0] = fmaf( x[13], La120, Lb[0]);
		Lb[0] = fmaf( x[15], La102, Lb[0]);
		Lb[0] = fmaf( x[17], La021, Lb[0]);
		Lb[0] = fmaf( x[7], La020, Lb[0]);
		Lb[0] = fmaf( x[18], La012, Lb[0]);
		Lb[0] = fmaf( x[9], La002, Lb[0]);
		Lb[0] *= T(5.0000000000000000e-01);
		Lb[0] = fmaf( x[3], La001, Lb[0]);
		Lb[0] = fmaf( x[14], La111, Lb[0]);
		Lb[0] = fmaf( x[5], La110, Lb[0]);
		Lb[0] = fmaf( x[6], La101, Lb[0]);
		Lb[0] = fmaf( x[1], La100, Lb[0]);
		Lb[0] = fmaf( x[8], La011, Lb[0]);
		Lb[0] = fmaf( x[2], La010, Lb[0]);
	}
	Lb[1] *= T(2.4000000000000000e+01);
	Lb[1] = fmaf( x[20], La500, Lb[1]);
	Lb[1] = fmaf( x[34], La104, Lb[1]);
	Lb[1] = fmaf( x[30], La140, Lb[1]);
	Lb[1] *= T(2.5000000000000000e-01);
	Lb[1] = fmaf( x[29], La203, Lb[1]);
	Lb[1] = fmaf( x[21], La410, Lb[1]);
	Lb[1] = fmaf( x[22], La401, Lb[1]);
	Lb[1] = fmaf( x[10], La400, Lb[1]);
	Lb[1] = fmaf( x[26], La230, Lb[1]);
	Lb[1] = fmaf( x[31], La131, Lb[1]);
	Lb[1] = fmaf( x[16], La130, Lb[1]);
	Lb[1] = fmaf( x[19], La103, Lb[1]);
	Lb[1] = fmaf( x[33], La113, Lb[1]);
	Lb[1] *= T(6.6666666666666663e-01);
	Lb[1] = fmaf( x[23], La320, Lb[1]);
	Lb[1] = fmaf( x[25], La302, Lb[1]);
	Lb[1] = fmaf( x[32], La122, Lb[1]);
	Lb[1] *= T(5.0000000000000000e-01);
	Lb[1] = fmaf( x[27], La221, Lb[1]);
	Lb[1] = fmaf( x[9], La102, Lb[1]);
	Lb[1] = fmaf( x[24], La311, Lb[1]);
	Lb[1] = fmaf( x[11], La310, Lb[1]);
	Lb[1] = fmaf( x[12], La301, Lb[1]);
	Lb[1] = fmaf( x[4], La300, Lb[1]);
	Lb[1] = fmaf( x[18], La112, Lb[1]);
	Lb[1] = fmaf( x[13], La220, Lb[1]);
	Lb[1] = fmaf( x[28], La212, Lb[1]);
	Lb[1] = fmaf( x[15], La202, Lb[1]);
	Lb[1] = fmaf( x[7], La120, Lb[1]);
	Lb[1] = fmaf( x[17], La121, Lb[1]);
	Lb[1] *= T(5.0000000000000000e-01);
	Lb[1] = fmaf( x[14], La211, Lb[1]);
	Lb[1] = fmaf( x[5], La210, Lb[1]);
	Lb[1] = fmaf( x[3], La101, Lb[1]);
	Lb[1] = fmaf( x[6], La201, Lb[1]);
	Lb[1] = fmaf( x[1], La200, Lb[1]);
	Lb[1] = fmaf( x[8], La111, Lb[1]);
	Lb[1] = fmaf( x[2], La110, Lb[1]);
	Lb[2] *= T(2.4000000000000000e+01);
	Lb[2] = fmaf( x[20], La410, Lb[2]);
	Lb[2] = fmaf( x[34], La014, Lb[2]);
	Lb[2] = fmaf( x[30], La050, Lb[2]);
	Lb[2] *= T(2.5000000000000000e-01);
	Lb[2] = fmaf( x[29], La113, Lb[2]);
	Lb[2] = fmaf( x[21], La320, Lb[2]);
	Lb[2] = fmaf( x[22], La311, Lb[2]);
	Lb[2] = fmaf( x[10], La310, Lb[2]);
	Lb[2] = fmaf( x[26], La140, Lb[2]);
	Lb[2] = fmaf( x[31], La041, Lb[2]);
	Lb[2] = fmaf( x[16], La040, Lb[2]);
	Lb[2] = fmaf( x[19], La013, Lb[2]);
	Lb[2] = fmaf( x[33], La023, Lb[2]);
	Lb[2] *= T(6.6666666666666663e-01);
	Lb[2] = fmaf( x[23], La230, Lb[2]);
	Lb[2] = fmaf( x[25], La212, Lb[2]);
	Lb[2] = fmaf( x[32], La032, Lb[2]);
	Lb[2] *= T(5.0000000000000000e-01);
	Lb[2] = fmaf( x[27], La131, Lb[2]);
	Lb[2] = fmaf( x[9], La012, Lb[2]);
	Lb[2] = fmaf( x[24], La221, Lb[2]);
	Lb[2] = fmaf( x[11], La220, Lb[2]);
	Lb[2] = fmaf( x[12], La211, Lb[2]);
	Lb[2] = fmaf( x[4], La210, Lb[2]);
	Lb[2] = fmaf( x[18], La022, Lb[2]);
	Lb[2] = fmaf( x[13], La130, Lb[2]);
	Lb[2] = fmaf( x[28], La122, Lb[2]);
	Lb[2] = fmaf( x[15], La112, Lb[2]);
	Lb[2] = fmaf( x[7], La030, Lb[2]);
	Lb[2] = fmaf( x[17], La031, Lb[2]);
	Lb[2] *= T(5.0000000000000000e-01);
	Lb[2] = fmaf( x[14], La121, Lb[2]);
	Lb[2] = fmaf( x[5], La120, Lb[2]);
	Lb[2] = fmaf( x[3], La011, Lb[2]);
	Lb[2] = fmaf( x[6], La111, Lb[2]);
	Lb[2] = fmaf( x[1], La110, Lb[2]);
	Lb[2] = fmaf( x[8], La021, Lb[2]);
	Lb[2] = fmaf( x[2], La020, Lb[2]);
	Lb[3] *= T(2.4000000000000000e+01);
	Lb[3] = fmaf( x[20], La401, Lb[3]);
	Lb[3] = fmaf( x[34], La005, Lb[3]);
	Lb[3] = fmaf( x[30], La041, Lb[3]);
	Lb[3] *= T(2.5000000000000000e-01);
	Lb[3] = fmaf( x[29], La104, Lb[3]);
	Lb[3] = fmaf( x[21], La311, Lb[3]);
	Lb[3] = fmaf( x[22], La302, Lb[3]);
	Lb[3] = fmaf( x[10], La301, Lb[3]);
	Lb[3] = fmaf( x[26], La131, Lb[3]);
	Lb[3] = fmaf( x[31], La032, Lb[3]);
	Lb[3] = fmaf( x[16], La031, Lb[3]);
	Lb[3] = fmaf( x[19], La004, Lb[3]);
	Lb[3] = fmaf( x[33], La014, Lb[3]);
	Lb[3] *= T(6.6666666666666663e-01);
	Lb[3] = fmaf( x[23], La221, Lb[3]);
	Lb[3] = fmaf( x[25], La203, Lb[3]);
	Lb[3] = fmaf( x[32], La023, Lb[3]);
	Lb[3] *= T(5.0000000000000000e-01);
	Lb[3] = fmaf( x[27], La122, Lb[3]);
	Lb[3] = fmaf( x[9], La003, Lb[3]);
	Lb[3] = fmaf( x[24], La212, Lb[3]);
	Lb[3] = fmaf( x[11], La211, Lb[3]);
	Lb[3] = fmaf( x[12], La202, Lb[3]);
	Lb[3] = fmaf( x[4], La201, Lb[3]);
	Lb[3] = fmaf( x[18], La013, Lb[3]);
	Lb[3] = fmaf( x[13], La121, Lb[3]);
	Lb[3] = fmaf( x[28], La113, Lb[3]);
	Lb[3] = fmaf( x[15], La103, Lb[3]);
	Lb[3] = fmaf( x[7], La021, Lb[3]);
	Lb[3] = fmaf( x[17], La022, Lb[3]);
	Lb[3] *= T(5.0000000000000000e-01);
	Lb[3] = fmaf( x[14], La112, Lb[3]);
	Lb[3] = fmaf( x[5], La111, Lb[3]);
	Lb[3] = fmaf( x[3], La002, Lb[3]);
	Lb[3] = fmaf( x[6], La102, Lb[3]);
	Lb[3] = fmaf( x[1], La101, Lb[3]);
	Lb[3] = fmaf( x[8], La012, Lb[3]);
	Lb[3] = fmaf( x[2], La011, Lb[3]);
	return Lb;
/* FLOPS = 331 + do_phi * 118*/
}
template<class T>
CUDA_EXPORT
#ifdef __CUDACC__
__noinline__
#endif
tensor_trless_sym<T, 2> pm_L2P(const tensor_trless_sym<T, 7>& La, array<T,NDIM> X, bool do_phi) {
	X[0] *= T(SCALE_FACTOR);
	X[1] *= T(SCALE_FACTOR);
	X[2] *= T(SCALE_FACTOR);
	tensor_trless_sym<T, 2> Lb;
	T x[84];
	x[0] = T(1);
	x[1] = X[0];
	x[2] = X[1];
	x[3] = X[2];
	x[9] = x[3] * x[3]; // 0 0 2 | 0 0 1 | 0 0 1
	x[8] = x[2] * x[3]; // 0 1 1 | 0 0 1 | 0 1 0
	x[7] = x[2] * x[2]; // 0 2 0 | 0 1 0 | 0 1 0
	x[6] = x[1] * x[3]; // 1 0 1 | 0 0 1 | 1 0 0
	x[5] = x[1] * x[2]; // 1 1 0 | 0 1 0 | 1 0 0
	x[4] = x[1] * x[1]; // 2 0 0 | 1 0 0 | 1 0 0
	x[19] = x[9] * x[3]; // 0 0 3 | 0 0 1 | 0 0 2
	x[18] = x[8] * x[3]; // 0 1 2 | 0 0 1 | 0 1 1
	x[17] = x[8] * x[2]; // 0 2 1 | 0 1 0 | 0 1 1
	x[16] = x[7] * x[2]; // 0 3 0 | 0 1 0 | 0 2 0
	x[15] = x[6] * x[3]; // 1 0 2 | 0 0 1 | 1 0 1
	x[14] = x[5] * x[3]; // 1 1 1 | 0 0 1 | 1 1 0
	x[13] = x[5] * x[2]; // 1 2 0 | 0 1 0 | 1 1 0
	x[12] = x[6] * x[1]; // 2 0 1 | 1 0 0 | 1 0 1
	x[11] = x[5] * x[1]; // 2 1 0 | 1 0 0 | 1 1 0
	x[10] = x[4] * x[1]; // 3 0 0 | 1 0 0 | 2 0 0
	x[34] = x[9] * x[9]; // 0 0 4 | 0 0 2 | 0 0 2
	x[33] = x[8] * x[9]; // 0 1 3 | 0 0 2 | 0 1 1
	x[32] = x[8] * x[8]; // 0 2 2 | 0 1 1 | 0 1 1
	x[31] = x[8] * x[7]; // 0 3 1 | 0 2 0 | 0 1 1
	x[30] = x[7] * x[7]; // 0 4 0 | 0 2 0 | 0 2 0
	x[29] = x[6] * x[9]; // 1 0 3 | 0 0 2 | 1 0 1
	x[28] = x[5] * x[9]; // 1 1 2 | 0 0 2 | 1 1 0
	x[27] = x[5] * x[8]; // 1 2 1 | 0 1 1 | 1 1 0
	x[26] = x[5] * x[7]; // 1 3 0 | 0 2 0 | 1 1 0
	x[25] = x[6] * x[6]; // 2 0 2 | 1 0 1 | 1 0 1
	x[24] = x[5] * x[6]; // 2 1 1 | 1 0 1 | 1 1 0
	x[23] = x[5] * x[5]; // 2 2 0 | 1 1 0 | 1 1 0
	x[22] = x[6] * x[4]; // 3 0 1 | 2 0 0 | 1 0 1
	x[21] = x[5] * x[4]; // 3 1 0 | 2 0 0 | 1 1 0
	x[20] = x[4] * x[4]; // 4 0 0 | 2 0 0 | 2 0 0
	x[55] = x[19] * x[9]; // 0 0 5 | 0 0 2 | 0 0 3
	x[54] = x[18] * x[9]; // 0 1 4 | 0 0 2 | 0 1 2
	x[53] = x[17] * x[9]; // 0 2 3 | 0 0 2 | 0 2 1
	x[52] = x[17] * x[8]; // 0 3 2 | 0 1 1 | 0 2 1
	x[51] = x[17] * x[7]; // 0 4 1 | 0 2 0 | 0 2 1
	x[50] = x[16] * x[7]; // 0 5 0 | 0 2 0 | 0 3 0
	x[49] = x[15] * x[9]; // 1 0 4 | 0 0 2 | 1 0 2
	x[48] = x[14] * x[9]; // 1 1 3 | 0 0 2 | 1 1 1
	x[47] = x[14] * x[8]; // 1 2 2 | 0 1 1 | 1 1 1
	x[46] = x[14] * x[7]; // 1 3 1 | 0 2 0 | 1 1 1
	x[45] = x[13] * x[7]; // 1 4 0 | 0 2 0 | 1 2 0
	x[44] = x[12] * x[9]; // 2 0 3 | 0 0 2 | 2 0 1
	x[43] = x[14] * x[6]; // 2 1 2 | 1 0 1 | 1 1 1
	x[42] = x[14] * x[5]; // 2 2 1 | 1 1 0 | 1 1 1
	x[41] = x[11] * x[7]; // 2 3 0 | 0 2 0 | 2 1 0
	x[40] = x[12] * x[6]; // 3 0 2 | 1 0 1 | 2 0 1
	x[39] = x[14] * x[4]; // 3 1 1 | 2 0 0 | 1 1 1
	x[38] = x[11] * x[5]; // 3 2 0 | 1 1 0 | 2 1 0
	x[37] = x[12] * x[4]; // 4 0 1 | 2 0 0 | 2 0 1
	x[36] = x[11] * x[4]; // 4 1 0 | 2 0 0 | 2 1 0
	x[35] = x[10] * x[4]; // 5 0 0 | 2 0 0 | 3 0 0
	x[83] = x[19] * x[19]; // 0 0 6 | 0 0 3 | 0 0 3
	x[82] = x[18] * x[19]; // 0 1 5 | 0 0 3 | 0 1 2
	x[81] = x[17] * x[19]; // 0 2 4 | 0 0 3 | 0 2 1
	x[80] = x[17] * x[18]; // 0 3 3 | 0 1 2 | 0 2 1
	x[79] = x[17] * x[17]; // 0 4 2 | 0 2 1 | 0 2 1
	x[78] = x[17] * x[16]; // 0 5 1 | 0 3 0 | 0 2 1
	x[77] = x[16] * x[16]; // 0 6 0 | 0 3 0 | 0 3 0
	x[76] = x[15] * x[19]; // 1 0 5 | 0 0 3 | 1 0 2
	x[75] = x[14] * x[19]; // 1 1 4 | 0 0 3 | 1 1 1
	x[74] = x[14] * x[18]; // 1 2 3 | 0 1 2 | 1 1 1
	x[73] = x[14] * x[17]; // 1 3 2 | 0 2 1 | 1 1 1
	x[72] = x[14] * x[16]; // 1 4 1 | 0 3 0 | 1 1 1
	x[71] = x[13] * x[16]; // 1 5 0 | 0 3 0 | 1 2 0
	x[70] = x[12] * x[19]; // 2 0 4 | 0 0 3 | 2 0 1
	x[69] = x[14] * x[15]; // 2 1 3 | 1 0 2 | 1 1 1
	x[68] = x[14] * x[14]; // 2 2 2 | 1 1 1 | 1 1 1
	x[67] = x[14] * x[13]; // 2 3 1 | 1 2 0 | 1 1 1
	x[66] = x[11] * x[16]; // 2 4 0 | 0 3 0 | 2 1 0
	x[65] = x[12] * x[15]; // 3 0 3 | 1 0 2 | 2 0 1
	x[64] = x[14] * x[12]; // 3 1 2 | 2 0 1 | 1 1 1
	x[63] = x[14] * x[11]; // 3 2 1 | 2 1 0 | 1 1 1
	x[62] = x[11] * x[13]; // 3 3 0 | 1 2 0 | 2 1 0
	x[61] = x[12] * x[12]; // 4 0 2 | 2 0 1 | 2 0 1
	x[60] = x[14] * x[10]; // 4 1 1 | 3 0 0 | 1 1 1
	x[59] = x[11] * x[11]; // 4 2 0 | 2 1 0 | 2 1 0
	x[58] = x[12] * x[10]; // 5 0 1 | 3 0 0 | 2 0 1
	x[57] = x[11] * x[10]; // 5 1 0 | 3 0 0 | 2 1 0
	x[56] = x[10] * x[10]; // 6 0 0 | 3 0 0 | 3 0 0
	const T La000 =  (La[0]);
	const T La001 =  (La[28]);
	const T La002 =  (La[49]);
	const T La003 = -(La[31]+(La[33]));
	const T La004 =  (La[10]+fmaf(T(2),La[12],(La[14])));
	const T La005 =  (La[38]+fmaf(T(2),La[40],(La[42])));
	const T La006 = -(La[21]+fmaf(T(3),La[23],fmaf(T(3),La[25],(La[27]))));
	const T La010 =  (La[2]);
	const T La011 =  (La[30]);
	const T La012 = -(La[7]+(La[9]));
	const T La013 = -(La[35]+(La[37]));
	const T La014 =  (La[16]+fmaf(T(2),La[18],(La[20])));
	const T La015 =  (La[44]+fmaf(T(2),La[46],(La[48])));
	const T La020 =  (La[5]);
	const T La021 =  (La[33]);
	const T La022 = -(La[12]+(La[14]));
	const T La023 = -(La[40]+(La[42]));
	const T La024 =  (La[23]+fmaf(T(2),La[25],(La[27])));
	const T La030 =  (La[9]);
	const T La031 =  (La[37]);
	const T La032 = -(La[18]+(La[20]));
	const T La033 = -(La[46]+(La[48]));
	const T La040 =  (La[14]);
	const T La041 =  (La[42]);
	const T La042 = -(La[25]+(La[27]));
	const T La050 =  (La[20]);
	const T La051 =  (La[48]);
	const T La060 =  (La[27]);
	const T La100 =  (La[1]);
	const T La101 =  (La[29]);
	const T La102 = -(La[6]+(La[8]));
	const T La103 = -(La[34]+(La[36]));
	const T La104 =  (La[15]+fmaf(T(2),La[17],(La[19])));
	const T La105 =  (La[43]+fmaf(T(2),La[45],(La[47])));
	const T La110 =  (La[4]);
	const T La111 =  (La[32]);
	const T La112 = -(La[11]+(La[13]));
	const T La113 = -(La[39]+(La[41]));
	const T La114 =  (La[22]+fmaf(T(2),La[24],(La[26])));
	const T La120 =  (La[8]);
	const T La121 =  (La[36]);
	const T La122 = -(La[17]+(La[19]));
	const T La123 = -(La[45]+(La[47]));
	const T La130 =  (La[13]);
	const T La131 =  (La[41]);
	const T La132 = -(La[24]+(La[26]));
	const T La140 =  (La[19]);
	const T La141 =  (La[47]);
	const T La150 =  (La[26]);
	const T La200 =  (La[3]);
	const T La201 =  (La[31]);
	const T La202 = -(La[10]+(La[12]));
	const T La203 = -(La[38]+(La[40]));
	const T La204 =  (La[21]+fmaf(T(2),La[23],(La[25])));
	const T La210 =  (La[7]);
	const T La211 =  (La[35]);
	const T La212 = -(La[16]+(La[18]));
	const T La213 = -(La[44]+(La[46]));
	const T La220 =  (La[12]);
	const T La221 =  (La[40]);
	const T La222 = -(La[23]+(La[25]));
	const T La230 =  (La[18]);
	const T La231 =  (La[46]);
	const T La240 =  (La[25]);
	const T La300 =  (La[6]);
	const T La301 =  (La[34]);
	const T La302 = -(La[15]+(La[17]));
	const T La303 = -(La[43]+(La[45]));
	const T La310 =  (La[11]);
	const T La311 =  (La[39]);
	const T La312 = -(La[22]+(La[24]));
	const T La320 =  (La[17]);
	const T La321 =  (La[45]);
	const T La330 =  (La[24]);
	const T La400 =  (La[10]);
	const T La401 =  (La[38]);
	const T La402 = -(La[21]+(La[23]));
	const T La410 =  (La[16]);
	const T La411 =  (La[44]);
	const T La420 =  (La[23]);
	const T La500 =  (La[15]);
	const T La501 =  (La[43]);
	const T La510 =  (La[22]);
	const T La600 =  (La[21]);
	Lb(0,0,0) = La(0,0,0);
	Lb(1,0,0) = La(1,0,0);
	Lb(0,1,0) = La(0,1,0);
	Lb(0,0,1) = La(0,0,1);
	if( do_phi ) {
		Lb[0] *= T(7.2000000000000000e+02);
		Lb[0] = fmaf( x[56], La600, Lb[0]);
		Lb[0] = fmaf( x[77], La060, Lb[0]);
		Lb[0] = fmaf( x[83], La006, Lb[0]);
		Lb[0] *= T(1.6666666666666669e-01);
		Lb[0] = fmaf( x[78], La051, Lb[0]);
		Lb[0] = fmaf( x[50], La050, Lb[0]);
		Lb[0] = fmaf( x[76], La105, Lb[0]);
		Lb[0] = fmaf( x[82], La015, Lb[0]);
		Lb[0] = fmaf( x[71], La150, Lb[0]);
		Lb[0] = fmaf( x[35], La500, Lb[0]);
		Lb[0] = fmaf( x[58], La501, Lb[0]);
		Lb[0] = fmaf( x[57], La510, Lb[0]);
		Lb[0] = fmaf( x[55], La005, Lb[0]);
		Lb[0] *= T(4.0000000000000002e-01);
		Lb[0] = fmaf( x[59], La420, Lb[0]);
		Lb[0] = fmaf( x[61], La402, Lb[0]);
		Lb[0] = fmaf( x[70], La204, Lb[0]);
		Lb[0] = fmaf( x[81], La024, Lb[0]);
		Lb[0] = fmaf( x[79], La042, Lb[0]);
		Lb[0] = fmaf( x[66], La240, Lb[0]);
		Lb[0] *= T(7.5000000000000000e-01);
		Lb[0] = fmaf( x[62], La330, Lb[0]);
		Lb[0] = fmaf( x[80], La033, Lb[0]);
		Lb[0] = fmaf( x[65], La303, Lb[0]);
		Lb[0] *= T(6.6666666666666663e-01);
		Lb[0] = fmaf( x[30], La040, Lb[0]);
		Lb[0] = fmaf( x[45], La140, Lb[0]);
		Lb[0] = fmaf( x[49], La104, Lb[0]);
		Lb[0] = fmaf( x[75], La114, Lb[0]);
		Lb[0] = fmaf( x[72], La141, Lb[0]);
		Lb[0] = fmaf( x[34], La004, Lb[0]);
		Lb[0] = fmaf( x[60], La411, Lb[0]);
		Lb[0] = fmaf( x[54], La014, Lb[0]);
		Lb[0] = fmaf( x[20], La400, Lb[0]);
		Lb[0] = fmaf( x[36], La410, Lb[0]);
		Lb[0] = fmaf( x[51], La041, Lb[0]);
		Lb[0] = fmaf( x[37], La401, Lb[0]);
		Lb[0] *= T(5.0000000000000000e-01);
		Lb[0] = fmaf( x[41], La230, Lb[0]);
		Lb[0] = fmaf( x[73], La132, Lb[0]);
		Lb[0] = fmaf( x[44], La203, Lb[0]);
		Lb[0] = fmaf( x[69], La213, Lb[0]);
		Lb[0] = fmaf( x[67], La231, Lb[0]);
		Lb[0] = fmaf( x[63], La321, Lb[0]);
		Lb[0] = fmaf( x[38], La320, Lb[0]);
		Lb[0] = fmaf( x[40], La302, Lb[0]);
		Lb[0] = fmaf( x[74], La123, Lb[0]);
		Lb[0] = fmaf( x[64], La312, Lb[0]);
		Lb[0] = fmaf( x[53], La023, Lb[0]);
		Lb[0] = fmaf( x[52], La032, Lb[0]);
		Lb[0] *= T(6.6666666666666663e-01);
		Lb[0] = fmaf( x[68], La222, Lb[0]);
		Lb[0] *= T(7.5000000000000000e-01);
		Lb[0] = fmaf( x[26], La130, Lb[0]);
		Lb[0] = fmaf( x[19], La003, Lb[0]);
		Lb[0] = fmaf( x[33], La013, Lb[0]);
		Lb[0] = fmaf( x[16], La030, Lb[0]);
		Lb[0] = fmaf( x[31], La031, Lb[0]);
		Lb[0] = fmaf( x[39], La311, Lb[0]);
		Lb[0] = fmaf( x[21], La310, Lb[0]);
		Lb[0] = fmaf( x[22], La301, Lb[0]);
		Lb[0] = fmaf( x[10], La300, Lb[0]);
		Lb[0] = fmaf( x[29], La103, Lb[0]);
		Lb[0] = fmaf( x[46], La131, Lb[0]);
		Lb[0] = fmaf( x[48], La113, Lb[0]);
		Lb[0] *= T(6.6666666666666663e-01);
		Lb[0] = fmaf( x[23], La220, Lb[0]);
		Lb[0] = fmaf( x[42], La221, Lb[0]);
		Lb[0] = fmaf( x[43], La212, Lb[0]);
		Lb[0] = fmaf( x[32], La022, Lb[0]);
		Lb[0] = fmaf( x[47], La122, Lb[0]);
		Lb[0] = fmaf( x[25], La202, Lb[0]);
		Lb[0] *= T(5.0000000000000000e-01);
		Lb[0] = fmaf( x[9], La002, Lb[0]);
		Lb[0] = fmaf( x[28], La112, Lb[0]);
		Lb[0] = fmaf( x[18], La012, Lb[0]);
		Lb[0] = fmaf( x[7], La020, Lb[0]);
		Lb[0] = fmaf( x[17], La021, Lb[0]);
		Lb[0] = fmaf( x[27], La121, Lb[0]);
		Lb[0] = fmaf( x[4], La200, Lb[0]);
		Lb[0] = fmaf( x[12], La201, Lb[0]);
		Lb[0] = fmaf( x[13], La120, Lb[0]);
		Lb[0] = fmaf( x[15], La102, Lb[0]);
		Lb[0] = fmaf( x[11], La210, Lb[0]);
		Lb[0] = fmaf( x[24], La211, Lb[0]);
		Lb[0] *= T(5.0000000000000000e-01);
		Lb[0] = fmaf( x[1], La100, Lb[0]);
		Lb[0] = fmaf( x[6], La101, Lb[0]);
		Lb[0] = fmaf( x[3], La001, Lb[0]);
		Lb[0] = fmaf( x[8], La011, Lb[0]);
		Lb[0] = fmaf( x[2], La010, Lb[0]);
		Lb[0] = fmaf( x[5], La110, Lb[0]);
		Lb[0] = fmaf( x[14], La111, Lb[0]);
	}
	Lb[1] *= T(1.2000000000000000e+02);
	Lb[1] = fmaf( x[35], La600, Lb[1]);
	Lb[1] = fmaf( x[50], La150, Lb[1]);
	Lb[1] = fmaf( x[55], La105, Lb[1]);
	Lb[1] *= T(2.0000000000000001e-01);
	Lb[1] = fmaf( x[36], La510, Lb[1]);
	Lb[1] = fmaf( x[37], La501, Lb[1]);
	Lb[1] = fmaf( x[20], La500, Lb[1]);
	Lb[1] = fmaf( x[45], La240, Lb[1]);
	Lb[1] = fmaf( x[54], La114, Lb[1]);
	Lb[1] = fmaf( x[49], La204, Lb[1]);
	Lb[1] = fmaf( x[34], La104, Lb[1]);
	Lb[1] = fmaf( x[51], La141, Lb[1]);
	Lb[1] = fmaf( x[30], La140, Lb[1]);
	Lb[1] *= T(5.0000000000000000e-01);
	Lb[1] = fmaf( x[40], La402, Lb[1]);
	Lb[1] = fmaf( x[44], La303, Lb[1]);
	Lb[1] = fmaf( x[41], La330, Lb[1]);
	Lb[1] = fmaf( x[52], La132, Lb[1]);
	Lb[1] = fmaf( x[53], La123, Lb[1]);
	Lb[1] = fmaf( x[38], La420, Lb[1]);
	Lb[1] *= T(5.0000000000000000e-01);
	Lb[1] = fmaf( x[16], La130, Lb[1]);
	Lb[1] = fmaf( x[19], La103, Lb[1]);
	Lb[1] = fmaf( x[33], La113, Lb[1]);
	Lb[1] = fmaf( x[46], La231, Lb[1]);
	Lb[1] = fmaf( x[26], La230, Lb[1]);
	Lb[1] = fmaf( x[48], La213, Lb[1]);
	Lb[1] = fmaf( x[10], La400, Lb[1]);
	Lb[1] = fmaf( x[39], La411, Lb[1]);
	Lb[1] = fmaf( x[29], La203, Lb[1]);
	Lb[1] = fmaf( x[22], La401, Lb[1]);
	Lb[1] = fmaf( x[21], La410, Lb[1]);
	Lb[1] = fmaf( x[31], La131, Lb[1]);
	Lb[1] *= T(6.6666666666666663e-01);
	Lb[1] = fmaf( x[42], La321, Lb[1]);
	Lb[1] = fmaf( x[23], La320, Lb[1]);
	Lb[1] = fmaf( x[43], La312, Lb[1]);
	Lb[1] = fmaf( x[47], La222, Lb[1]);
	Lb[1] = fmaf( x[32], La122, Lb[1]);
	Lb[1] = fmaf( x[25], La302, Lb[1]);
	Lb[1] *= T(5.0000000000000000e-01);
	Lb[1] = fmaf( x[28], La212, Lb[1]);
	Lb[1] = fmaf( x[24], La311, Lb[1]);
	Lb[1] = fmaf( x[11], La310, Lb[1]);
	Lb[1] = fmaf( x[12], La301, Lb[1]);
	Lb[1] = fmaf( x[4], La300, Lb[1]);
	Lb[1] = fmaf( x[27], La221, Lb[1]);
	Lb[1] = fmaf( x[13], La220, Lb[1]);
	Lb[1] = fmaf( x[15], La202, Lb[1]);
	Lb[1] = fmaf( x[17], La121, Lb[1]);
	Lb[1] = fmaf( x[7], La120, Lb[1]);
	Lb[1] = fmaf( x[18], La112, Lb[1]);
	Lb[1] = fmaf( x[9], La102, Lb[1]);
	Lb[1] *= T(5.0000000000000000e-01);
	Lb[1] = fmaf( x[3], La101, Lb[1]);
	Lb[1] = fmaf( x[14], La211, Lb[1]);
	Lb[1] = fmaf( x[5], La210, Lb[1]);
	Lb[1] = fmaf( x[6], La201, Lb[1]);
	Lb[1] = fmaf( x[1], La200, Lb[1]);
	Lb[1] = fmaf( x[8], La111, Lb[1]);
	Lb[1] = fmaf( x[2], La110, Lb[1]);
	Lb[2] *= T(1.2000000000000000e+02);
	Lb[2] = fmaf( x[35], La510, Lb[2]);
	Lb[2] = fmaf( x[50], La060, Lb[2]);
	Lb[2] = fmaf( x[55], La015, Lb[2]);
	Lb[2] *= T(2.0000000000000001e-01);
	Lb[2] = fmaf( x[36], La420, Lb[2]);
	Lb[2] = fmaf( x[37], La411, Lb[2]);
	Lb[2] = fmaf( x[20], La410, Lb[2]);
	Lb[2] = fmaf( x[45], La150, Lb[2]);
	Lb[2] = fmaf( x[54], La024, Lb[2]);
	Lb[2] = fmaf( x[49], La114, Lb[2]);
	Lb[2] = fmaf( x[34], La014, Lb[2]);
	Lb[2] = fmaf( x[51], La051, Lb[2]);
	Lb[2] = fmaf( x[30], La050, Lb[2]);
	Lb[2] *= T(5.0000000000000000e-01);
	Lb[2] = fmaf( x[40], La312, Lb[2]);
	Lb[2] = fmaf( x[44], La213, Lb[2]);
	Lb[2] = fmaf( x[41], La240, Lb[2]);
	Lb[2] = fmaf( x[52], La042, Lb[2]);
	Lb[2] = fmaf( x[53], La033, Lb[2]);
	Lb[2] = fmaf( x[38], La330, Lb[2]);
	Lb[2] *= T(5.0000000000000000e-01);
	Lb[2] = fmaf( x[16], La040, Lb[2]);
	Lb[2] = fmaf( x[19], La013, Lb[2]);
	Lb[2] = fmaf( x[33], La023, Lb[2]);
	Lb[2] = fmaf( x[46], La141, Lb[2]);
	Lb[2] = fmaf( x[26], La140, Lb[2]);
	Lb[2] = fmaf( x[48], La123, Lb[2]);
	Lb[2] = fmaf( x[10], La310, Lb[2]);
	Lb[2] = fmaf( x[39], La321, Lb[2]);
	Lb[2] = fmaf( x[29], La113, Lb[2]);
	Lb[2] = fmaf( x[22], La311, Lb[2]);
	Lb[2] = fmaf( x[21], La320, Lb[2]);
	Lb[2] = fmaf( x[31], La041, Lb[2]);
	Lb[2] *= T(6.6666666666666663e-01);
	Lb[2] = fmaf( x[42], La231, Lb[2]);
	Lb[2] = fmaf( x[23], La230, Lb[2]);
	Lb[2] = fmaf( x[43], La222, Lb[2]);
	Lb[2] = fmaf( x[47], La132, Lb[2]);
	Lb[2] = fmaf( x[32], La032, Lb[2]);
	Lb[2] = fmaf( x[25], La212, Lb[2]);
	Lb[2] *= T(5.0000000000000000e-01);
	Lb[2] = fmaf( x[28], La122, Lb[2]);
	Lb[2] = fmaf( x[24], La221, Lb[2]);
	Lb[2] = fmaf( x[11], La220, Lb[2]);
	Lb[2] = fmaf( x[12], La211, Lb[2]);
	Lb[2] = fmaf( x[4], La210, Lb[2]);
	Lb[2] = fmaf( x[27], La131, Lb[2]);
	Lb[2] = fmaf( x[13], La130, Lb[2]);
	Lb[2] = fmaf( x[15], La112, Lb[2]);
	Lb[2] = fmaf( x[17], La031, Lb[2]);
	Lb[2] = fmaf( x[7], La030, Lb[2]);
	Lb[2] = fmaf( x[18], La022, Lb[2]);
	Lb[2] = fmaf( x[9], La012, Lb[2]);
	Lb[2] *= T(5.0000000000000000e-01);
	Lb[2] = fmaf( x[3], La011, Lb[2]);
	Lb[2] = fmaf( x[14], La121, Lb[2]);
	Lb[2] = fmaf( x[5], La120, Lb[2]);
	Lb[2] = fmaf( x[6], La111, Lb[2]);
	Lb[2] = fmaf( x[1], La110, Lb[2]);
	Lb[2] = fmaf( x[8], La021, Lb[2]);
	Lb[2] = fmaf( x[2], La020, Lb[2]);
	Lb[3] *= T(1.2000000000000000e+02);
	Lb[3] = fmaf( x[35], La501, Lb[3]);
	Lb[3] = fmaf( x[50], La051, Lb[3]);
	Lb[3] = fmaf( x[55], La006, Lb[3]);
	Lb[3] *= T(2.0000000000000001e-01);
	Lb[3] = fmaf( x[36], La411, Lb[3]);
	Lb[3] = fmaf( x[37], La402, Lb[3]);
	Lb[3] = fmaf( x[20], La401, Lb[3]);
	Lb[3] = fmaf( x[45], La141, Lb[3]);
	Lb[3] = fmaf( x[54], La015, Lb[3]);
	Lb[3] = fmaf( x[49], La105, Lb[3]);
	Lb[3] = fmaf( x[34], La005, Lb[3]);
	Lb[3] = fmaf( x[51], La042, Lb[3]);
	Lb[3] = fmaf( x[30], La041, Lb[3]);
	Lb[3] *= T(5.0000000000000000e-01);
	Lb[3] = fmaf( x[40], La303, Lb[3]);
	Lb[3] = fmaf( x[44], La204, Lb[3]);
	Lb[3] = fmaf( x[41], La231, Lb[3]);
	Lb[3] = fmaf( x[52], La033, Lb[3]);
	Lb[3] = fmaf( x[53], La024, Lb[3]);
	Lb[3] = fmaf( x[38], La321, Lb[3]);
	Lb[3] *= T(5.0000000000000000e-01);
	Lb[3] = fmaf( x[16], La031, Lb[3]);
	Lb[3] = fmaf( x[19], La004, Lb[3]);
	Lb[3] = fmaf( x[33], La014, Lb[3]);
	Lb[3] = fmaf( x[46], La132, Lb[3]);
	Lb[3] = fmaf( x[26], La131, Lb[3]);
	Lb[3] = fmaf( x[48], La114, Lb[3]);
	Lb[3] = fmaf( x[10], La301, Lb[3]);
	Lb[3] = fmaf( x[39], La312, Lb[3]);
	Lb[3] = fmaf( x[29], La104, Lb[3]);
	Lb[3] = fmaf( x[22], La302, Lb[3]);
	Lb[3] = fmaf( x[21], La311, Lb[3]);
	Lb[3] = fmaf( x[31], La032, Lb[3]);
	Lb[3] *= T(6.6666666666666663e-01);
	Lb[3] = fmaf( x[42], La222, Lb[3]);
	Lb[3] = fmaf( x[23], La221, Lb[3]);
	Lb[3] = fmaf( x[43], La213, Lb[3]);
	Lb[3] = fmaf( x[47], La123, Lb[3]);
	Lb[3] = fmaf( x[32], La023, Lb[3]);
	Lb[3] = fmaf( x[25], La203, Lb[3]);
	Lb[3] *= T(5.0000000000000000e-01);
	Lb[3] = fmaf( x[28], La113, Lb[3]);
	Lb[3] = fmaf( x[24], La212, Lb[3]);
	Lb[3] = fmaf( x[11], La211, Lb[3]);
	Lb[3] = fmaf( x[12], La202, Lb[3]);
	Lb[3] = fmaf( x[4], La201, Lb[3]);
	Lb[3] = fmaf( x[27], La122, Lb[3]);
	Lb[3] = fmaf( x[13], La121, Lb[3]);
	Lb[3] = fmaf( x[15], La103, Lb[3]);
	Lb[3] = fmaf( x[17], La022, Lb[3]);
	Lb[3] = fmaf( x[7], La021, Lb[3]);
	Lb[3] = fmaf( x[18], La013, Lb[3]);
	Lb[3] = fmaf( x[9], La003, Lb[3]);
	Lb[3] *= T(5.0000000000000000e-01);
	Lb[3] = fmaf( x[3], La002, Lb[3]);
	Lb[3] = fmaf( x[14], La112, Lb[3]);
	Lb[3] = fmaf( x[5], La111, Lb[3]);
	Lb[3] = fmaf( x[6], La102, Lb[3]);
	Lb[3] = fmaf( x[1], La101, Lb[3]);
	Lb[3] = fmaf( x[8], La012, Lb[3]);
	Lb[3] = fmaf( x[2], La011, Lb[3]);
	return Lb;
/* FLOPS = 540 + do_phi * 178*/
}
static __constant__ char Ldest1[306] = { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,10,10,10,11,11,11,12,12,12,13,13,13,14,14,14,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,27,27,27,28,28,28,29,29,29,30,30,30,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36};
static __constant__ float factor1[306] = { float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.6666667163372040e-01),float(5.0000000000000000e-01),float(5.0000000000000000e-01),float(5.0000000000000000e-01),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.6666667163372040e-01),float(5.0000000000000000e-01),float(5.0000000000000000e-01),float(1.6666667163372040e-01),float(4.1666667908430099e-02),float(1.6666667163372040e-01),float(1.6666667163372040e-01),float(2.5000000000000000e-01),float(5.0000000000000000e-01),float(2.5000000000000000e-01),float(1.6666667163372040e-01),float(5.0000000000000000e-01),float(5.0000000000000000e-01),float(1.6666667163372040e-01),float(4.1666667908430099e-02),float(1.6666667163372040e-01),float(2.5000000000000000e-01),float(1.6666667163372040e-01),float(4.1666667908430099e-02),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.6666667163372040e-01),float(5.0000000000000000e-01),float(5.0000000000000000e-01),float(5.0000000000000000e-01),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.6666667163372040e-01),float(5.0000000000000000e-01),float(5.0000000000000000e-01),float(1.6666667163372040e-01),float(4.1666667908430099e-02),float(1.6666667163372040e-01),float(1.6666667163372040e-01),float(2.5000000000000000e-01),float(5.0000000000000000e-01),float(2.5000000000000000e-01),float(1.6666667163372040e-01),float(5.0000000000000000e-01),float(5.0000000000000000e-01),float(1.6666667163372040e-01),float(4.1666667908430099e-02),float(1.6666667163372040e-01),float(2.5000000000000000e-01),float(1.6666667163372040e-01),float(4.1666667908430099e-02),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.6666667163372040e-01),float(5.0000000000000000e-01),float(5.0000000000000000e-01),float(5.0000000000000000e-01),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.6666667163372040e-01),float(5.0000000000000000e-01),float(5.0000000000000000e-01),float(1.6666667163372040e-01),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.6666667163372040e-01),float(5.0000000000000000e-01),float(5.0000000000000000e-01),float(5.0000000000000000e-01),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.6666667163372040e-01),float(5.0000000000000000e-01),float(5.0000000000000000e-01),float(1.6666667163372040e-01),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.6666667163372040e-01),float(5.0000000000000000e-01),float(5.0000000000000000e-01),float(5.0000000000000000e-01),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.6666667163372040e-01),float(5.0000000000000000e-01),float(5.0000000000000000e-01),float(1.6666667163372040e-01),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.6666667163372040e-01),float(5.0000000000000000e-01),float(5.0000000000000000e-01),float(5.0000000000000000e-01),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.6666667163372040e-01),float(5.0000000000000000e-01),float(5.0000000000000000e-01),float(1.6666667163372040e-01),float(4.1666667908430099e-02),float(1.6666667163372040e-01),float(1.6666667163372040e-01),float(2.5000000000000000e-01),float(5.0000000000000000e-01),float(2.5000000000000000e-01),float(1.6666667163372040e-01),float(5.0000000000000000e-01),float(5.0000000000000000e-01),float(1.6666667163372040e-01),float(4.1666667908430099e-02),float(1.6666667163372040e-01),float(2.5000000000000000e-01),float(1.6666667163372040e-01),float(4.1666667908430099e-02),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.6666667163372040e-01),float(5.0000000000000000e-01),float(5.0000000000000000e-01),float(5.0000000000000000e-01),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.6666667163372040e-01),float(5.0000000000000000e-01),float(5.0000000000000000e-01),float(1.6666667163372040e-01),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.6666667163372040e-01),float(5.0000000000000000e-01),float(5.0000000000000000e-01),float(5.0000000000000000e-01),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.6666667163372040e-01),float(5.0000000000000000e-01),float(5.0000000000000000e-01),float(1.6666667163372040e-01),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.6666667163372040e-01),float(5.0000000000000000e-01),float(5.0000000000000000e-01),float(5.0000000000000000e-01),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.6666667163372040e-01),float(5.0000000000000000e-01),float(5.0000000000000000e-01),float(1.6666667163372040e-01)};
static __constant__ char xsrc1[306] = { 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};
static __constant__ char Lsrc1[306] = { 4,5,6,10,11,12,13,14,15,20,21,22,23,24,25,26,27,28,29,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,5,7,8,11,13,14,16,17,18,21,23,24,26,27,28,30,31,32,33,36,38,39,41,42,43,45,46,47,48,50,51,52,53,54,10,11,12,20,21,22,23,24,25,35,36,37,38,39,40,41,42,43,44,11,13,14,21,23,24,26,27,28,36,38,39,41,42,43,45,46,47,48,13,16,17,23,26,27,30,31,32,38,41,42,45,46,47,50,51,52,53,20,21,22,35,36,37,38,39,40,21,23,24,36,38,39,41,42,43,23,26,27,38,41,42,45,46,47,26,30,31,41,45,46,50,51,52,35,36,37,36,38,39,38,41,42,41,45,46,45,50,51,6,8,9,12,14,15,17,18,19,22,24,25,27,28,29,31,32,33,34,37,39,40,42,43,44,46,47,48,49,51,52,53,54,55,12,14,15,22,24,25,27,28,29,37,39,40,42,43,44,46,47,48,49,14,17,18,24,27,28,31,32,33,39,42,43,46,47,48,51,52,53,54,22,24,25,37,39,40,42,43,44,24,27,28,39,42,43,46,47,48,27,31,32,42,46,47,51,52,53,37,39,40,39,42,43,42,46,47,46,51,52,15,18,19,25,28,29,32,33,34,40,43,44,47,48,49,52,53,54,55};
static __constant__ float phi_factor[55] = { float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.6666667163372040e-01),float(4.1666667908430099e-02),float(8.3333337679505348e-03),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.6666667163372040e-01),float(4.1666667908430099e-02),float(5.0000000000000000e-01),float(5.0000000000000000e-01),float(2.5000000000000000e-01),float(8.3333335816860199e-02),float(1.6666667163372040e-01),float(1.6666667163372040e-01),float(8.3333335816860199e-02),float(4.1666667908430099e-02),float(4.1666667908430099e-02),float(8.3333337679505348e-03),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.6666667163372040e-01),float(4.1666667908430099e-02),float(1.0000000000000000e+00),float(1.0000000000000000e+00),float(5.0000000000000000e-01),float(1.6666667163372040e-01),float(5.0000000000000000e-01),float(5.0000000000000000e-01),float(2.5000000000000000e-01),float(1.6666667163372040e-01),float(1.6666667163372040e-01),float(4.1666667908430099e-02),float(5.0000000000000000e-01),float(5.0000000000000000e-01),float(2.5000000000000000e-01),float(8.3333335816860199e-02),float(5.0000000000000000e-01),float(5.0000000000000000e-01),float(2.5000000000000000e-01),float(2.5000000000000000e-01),float(2.5000000000000000e-01),float(8.3333335816860199e-02),float(1.6666667163372040e-01),float(1.6666667163372040e-01),float(8.3333335816860199e-02),float(1.6666667163372040e-01),float(1.6666667163372040e-01),float(8.3333335816860199e-02),float(4.1666667908430099e-02),float(4.1666667908430099e-02),float(4.1666667908430099e-02),float(8.3333337679505348e-03)};
static __constant__ char phi_Lsrc[55] = { 3,9,19,34,55,2,8,18,33,54,7,17,32,53,16,31,52,30,51,50,1,6,15,29,49,5,14,28,48,13,27,47,26,46,45,4,12,25,44,11,24,43,23,42,41,10,22,40,21,39,38,20,37,36,35};
#ifdef __CUDACC__
template<class T>
__device__
tensor_trless_sym<T, 6> L2L_cuda(const tensor_trless_sym<T, 6>& La, array<T,NDIM> X, bool do_phi) {
	const int tid = threadIdx.x;
	X[0] *= T(SCALE_FACTOR);
	X[1] *= T(SCALE_FACTOR);
	X[2] *= T(SCALE_FACTOR);
	tensor_trless_sym<T, 6> Lb;
	tensor_sym<T, 6> Lc;
	for( int i = 0; i < EXPANSION_SIZE; i ++ ) {
		Lb[i] = 0.0f;
	}
	for( int i = tid; i < EXPANSION_SIZE; i += WARP_SIZE ) {
		Lb[i] = La[i];
	}
	tensor_sym<T,6> dx;
	dx[0] = T(1);
	dx[1] = X[0];
	dx[2] = X[1];
	dx[3] = X[2];
	dx[9]= dx[3] * dx[3];
	dx[8]= dx[2] * dx[3];
	dx[7]= dx[2] * dx[2];
	dx[6]= dx[1] * dx[3];
	dx[5]= dx[1] * dx[2];
	dx[4]= dx[1] * dx[1];
	dx[19]= dx[9] * dx[3];
	dx[18]= dx[8] * dx[3];
	dx[17]= dx[8] * dx[2];
	dx[16]= dx[7] * dx[2];
	dx[15]= dx[6] * dx[3];
	dx[14]= dx[5] * dx[3];
	dx[13]= dx[5] * dx[2];
	dx[12]= dx[6] * dx[1];
	dx[11]= dx[5] * dx[1];
	dx[10]= dx[4] * dx[1];
	dx[34]= dx[9] * dx[9];
	dx[33]= dx[8] * dx[9];
	dx[32]= dx[8] * dx[8];
	dx[31]= dx[8] * dx[7];
	dx[30]= dx[7] * dx[7];
	dx[29]= dx[6] * dx[9];
	dx[28]= dx[5] * dx[9];
	dx[27]= dx[5] * dx[8];
	dx[26]= dx[5] * dx[7];
	dx[25]= dx[6] * dx[6];
	dx[24]= dx[5] * dx[6];
	dx[23]= dx[5] * dx[5];
	dx[22]= dx[6] * dx[4];
	dx[21]= dx[5] * dx[4];
	dx[20]= dx[4] * dx[4];
	dx[55]= dx[19] * dx[9];
	dx[54]= dx[18] * dx[9];
	dx[53]= dx[17] * dx[9];
	dx[52]= dx[17] * dx[8];
	dx[51]= dx[17] * dx[7];
	dx[50]= dx[16] * dx[7];
	dx[49]= dx[15] * dx[9];
	dx[48]= dx[14] * dx[9];
	dx[47]= dx[14] * dx[8];
	dx[46]= dx[14] * dx[7];
	dx[45]= dx[13] * dx[7];
	dx[44]= dx[12] * dx[9];
	dx[43]= dx[14] * dx[6];
	dx[42]= dx[14] * dx[5];
	dx[41]= dx[11] * dx[7];
	dx[40]= dx[12] * dx[6];
	dx[39]= dx[14] * dx[4];
	dx[38]= dx[11] * dx[5];
	dx[37]= dx[12] * dx[4];
	dx[36]= dx[11] * dx[4];
	dx[35]= dx[10] * dx[4];
	Lc[0] =  (La[0]);
	Lc[3] =  (La[21]);
	Lc[9] =  (La[36]);
	Lc[19] = -(La[24]+(La[26]));
	Lc[34] =  (La[10]+fmaf(T(2),La[12],(La[14])));
	Lc[55] =  (La[31]+fmaf(T(2),La[33],(La[35])));
	Lc[2] =  (La[2]);
	Lc[8] =  (La[23]);
	Lc[18] = -(La[7]+(La[9]));
	Lc[33] = -(La[28]+(La[30]));
	Lc[54] =  (La[16]+fmaf(T(2),La[18],(La[20])));
	Lc[7] =  (La[5]);
	Lc[17] =  (La[26]);
	Lc[32] = -(La[12]+(La[14]));
	Lc[53] = -(La[33]+(La[35]));
	Lc[16] =  (La[9]);
	Lc[31] =  (La[30]);
	Lc[52] = -(La[18]+(La[20]));
	Lc[30] =  (La[14]);
	Lc[51] =  (La[35]);
	Lc[50] =  (La[20]);
	Lc[1] =  (La[1]);
	Lc[6] =  (La[22]);
	Lc[15] = -(La[6]+(La[8]));
	Lc[29] = -(La[27]+(La[29]));
	Lc[49] =  (La[15]+fmaf(T(2),La[17],(La[19])));
	Lc[5] =  (La[4]);
	Lc[14] =  (La[25]);
	Lc[28] = -(La[11]+(La[13]));
	Lc[48] = -(La[32]+(La[34]));
	Lc[13] =  (La[8]);
	Lc[27] =  (La[29]);
	Lc[47] = -(La[17]+(La[19]));
	Lc[26] =  (La[13]);
	Lc[46] =  (La[34]);
	Lc[45] =  (La[19]);
	Lc[4] =  (La[3]);
	Lc[12] =  (La[24]);
	Lc[25] = -(La[10]+(La[12]));
	Lc[44] = -(La[31]+(La[33]));
	Lc[11] =  (La[7]);
	Lc[24] =  (La[28]);
	Lc[43] = -(La[16]+(La[18]));
	Lc[23] =  (La[12]);
	Lc[42] =  (La[33]);
	Lc[41] =  (La[18]);
	Lc[10] =  (La[6]);
	Lc[22] =  (La[27]);
	Lc[40] = -(La[15]+(La[17]));
	Lc[21] =  (La[11]);
	Lc[39] =  (La[32]);
	Lc[38] =  (La[17]);
	Lc[20] =  (La[10]);
	Lc[37] =  (La[31]);
	Lc[36] =  (La[16]);
	Lc[35] =  (La[15]);
	for( int i = tid; i < 306; i+=WARP_SIZE) {
		Lb[Ldest1[i]] = fmaf(factor1[i] * dx[xsrc1[i]], Lc[Lsrc1[i]], Lb[Ldest1[i]]);
	}
	if( do_phi ) {
		for( int i = tid; i < 55; i+=WARP_SIZE) {
			Lb[0] = fmaf(phi_factor[i] * dx[phi_Lsrc[i]], Lc[phi_Lsrc[i]], Lb[0]);
		}
	}
	for (int P = warpSize / 2; P >= 1; P /= 2) {
		for (int i = 0; i < EXPANSION_SIZE; i++) {
			Lb[i] += __shfl_xor_sync(0xffffffff, Lb[i], P);
		}
	}
	return Lb;
/* FLOPS = 1336 + do_phi * 220*/
}
#endif
template<class T>
CUDA_EXPORT int apply_scale_factor_inv(tensor_trless_sym<T,6> &L) {
	L[0] *= SCALE_FACTOR_INV1;
	L[21] *= SCALE_FACTOR_INV2;
	L[2] *= SCALE_FACTOR_INV2;
	L[1] *= SCALE_FACTOR_INV2;
	L[36] *= SCALE_FACTOR_INV3;
	L[23] *= SCALE_FACTOR_INV3;
	L[5] *= SCALE_FACTOR_INV3;
	L[22] *= SCALE_FACTOR_INV3;
	L[4] *= SCALE_FACTOR_INV3;
	L[3] *= SCALE_FACTOR_INV3;
	L[26] *= SCALE_FACTOR_INV4;
	L[9] *= SCALE_FACTOR_INV4;
	L[25] *= SCALE_FACTOR_INV4;
	L[8] *= SCALE_FACTOR_INV4;
	L[24] *= SCALE_FACTOR_INV4;
	L[7] *= SCALE_FACTOR_INV4;
	L[6] *= SCALE_FACTOR_INV4;
	L[30] *= SCALE_FACTOR_INV5;
	L[14] *= SCALE_FACTOR_INV5;
	L[29] *= SCALE_FACTOR_INV5;
	L[13] *= SCALE_FACTOR_INV5;
	L[28] *= SCALE_FACTOR_INV5;
	L[12] *= SCALE_FACTOR_INV5;
	L[27] *= SCALE_FACTOR_INV5;
	L[11] *= SCALE_FACTOR_INV5;
	L[10] *= SCALE_FACTOR_INV5;
	L[35] *= SCALE_FACTOR_INV6;
	L[20] *= SCALE_FACTOR_INV6;
	L[34] *= SCALE_FACTOR_INV6;
	L[19] *= SCALE_FACTOR_INV6;
	L[33] *= SCALE_FACTOR_INV6;
	L[18] *= SCALE_FACTOR_INV6;
	L[32] *= SCALE_FACTOR_INV6;
	L[17] *= SCALE_FACTOR_INV6;
	L[31] *= SCALE_FACTOR_INV6;
	L[16] *= SCALE_FACTOR_INV6;
	L[15] *= SCALE_FACTOR_INV6;
	return 37;
}
template<class T>
CUDA_EXPORT int apply_scale_factor(tensor_trless_sym<T,5> &M) {
	M[0] *= SCALE_FACTOR_INV0;
	M[15] *= SCALE_FACTOR_INV1;
	M[2] *= SCALE_FACTOR_INV1;
	M[1] *= SCALE_FACTOR_INV1;
	M[25] *= SCALE_FACTOR_INV2;
	M[17] *= SCALE_FACTOR_INV2;
	M[5] *= SCALE_FACTOR_INV2;
	M[16] *= SCALE_FACTOR_INV2;
	M[4] *= SCALE_FACTOR_INV2;
	M[3] *= SCALE_FACTOR_INV2;
	M[20] *= SCALE_FACTOR_INV3;
	M[9] *= SCALE_FACTOR_INV3;
	M[19] *= SCALE_FACTOR_INV3;
	M[8] *= SCALE_FACTOR_INV3;
	M[18] *= SCALE_FACTOR_INV3;
	M[7] *= SCALE_FACTOR_INV3;
	M[6] *= SCALE_FACTOR_INV3;
	M[24] *= SCALE_FACTOR_INV4;
	M[14] *= SCALE_FACTOR_INV4;
	M[23] *= SCALE_FACTOR_INV4;
	M[13] *= SCALE_FACTOR_INV4;
	M[22] *= SCALE_FACTOR_INV4;
	M[12] *= SCALE_FACTOR_INV4;
	M[21] *= SCALE_FACTOR_INV4;
	M[11] *= SCALE_FACTOR_INV4;
	M[10] *= SCALE_FACTOR_INV4;
	return 26;
}
